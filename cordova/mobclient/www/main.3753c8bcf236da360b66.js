/*! For license information please see main.3753c8bcf236da360b66.js.LICENSE.txt */
!function(){var e,t,n={6751:function(e,t,n){"use strict";n.d(t,{Z:function(){return oe}});var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),o=Math.abs,i=String.fromCharCode,a=Object.assign;function s(e){return e.trim()}function l(e,t,n){return e.replace(t,n)}function u(e,t){return e.indexOf(t)}function c(e,t){return 0|e.charCodeAt(t)}function f(e,t,n){return e.slice(t,n)}function d(e){return e.length}function p(e){return e.length}function h(e,t){return t.push(e),e}var m=1,v=1,g=0,y=0,b=0,w="";function _(e,t,n,r,o,i,a){return{value:e,root:t,parent:n,type:r,props:o,children:i,line:m,column:v,length:a,return:""}}function x(e,t){return a(_("",null,null,"",null,null,0),e,{length:-e.length},t)}function k(){return b=y>0?c(w,--y):0,v--,10===b&&(v=1,m--),b}function S(){return b=y<g?c(w,y++):0,v++,10===b&&(v=1,m++),b}function E(){return c(w,y)}function P(){return y}function O(e,t){return f(w,e,t)}function C(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function j(e){return m=v=1,g=d(w=e),y=0,[]}function T(e){return w="",e}function R(e){return s(O(y-1,M(91===e?e+2:40===e?e+1:e)))}function A(e){for(;(b=E())&&b<33;)S();return C(e)>2||C(b)>3?"":" "}function Z(e,t){for(;--t&&S()&&!(b<48||b>102||b>57&&b<65||b>70&&b<97););return O(e,P()+(t<6&&32==E()&&32==S()))}function M(e){for(;S();)switch(b){case e:return y;case 34:case 39:34!==e&&39!==e&&M(b);break;case 40:41===e&&M(e);break;case 92:S()}return y}function N(e,t){for(;S()&&e+b!==57&&(e+b!==84||47!==E()););return"/*"+O(t,y-1)+"*"+i(47===e?e:S())}function I(e){for(;!C(E());)S();return O(e,y)}var L="-ms-",$="-moz-",D="-webkit-",z="comm",F="rule",B="decl",q="@import",W="@keyframes";function U(e,t){for(var n="",r=p(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function V(e,t,n,r){switch(e.type){case q:case B:return e.return=e.return||e.value;case z:return"";case W:return e.return=e.value+"{"+U(e.children,r)+"}";case F:e.value=e.props.join(",")}return d(n=U(e.children,r))?e.return=e.value+"{"+n+"}":""}function H(e){return T(K("",null,null,null,[""],e=j(e),0,[0],e))}function K(e,t,n,r,o,a,s,f,p){for(var m=0,v=0,g=s,y=0,b=0,w=0,_=1,x=1,O=1,C=0,j="",T=o,M=a,L=r,$=j;x;)switch(w=C,C=S()){case 40:if(108!=w&&58==c($,g-1)){-1!=u($+=l(R(C),"&","&\f"),"&\f")&&(O=-1);break}case 34:case 39:case 91:$+=R(C);break;case 9:case 10:case 13:case 32:$+=A(w);break;case 92:$+=Z(P()-1,7);continue;case 47:switch(E()){case 42:case 47:h(Q(N(S(),P()),t,n),p);break;default:$+="/"}break;case 123*_:f[m++]=d($)*O;case 125*_:case 59:case 0:switch(C){case 0:case 125:x=0;case 59+v:b>0&&d($)-g&&h(b>32?Y($+";",r,n,g-1):Y(l($," ","")+";",r,n,g-2),p);break;case 59:$+=";";default:if(h(L=G($,t,n,m,v,o,f,j,T=[],M=[],g),a),123===C)if(0===v)K($,t,L,L,T,a,g,f,M);else switch(99===y&&110===c($,3)?100:y){case 100:case 109:case 115:K(e,L,L,r&&h(G(e,L,L,0,0,o,f,j,o,T=[],g),M),o,M,g,f,r?T:M);break;default:K($,L,L,L,[""],M,0,f,M)}}m=v=b=0,_=O=1,j=$="",g=s;break;case 58:g=1+d($),b=w;default:if(_<1)if(123==C)--_;else if(125==C&&0==_++&&125==k())continue;switch($+=i(C),C*_){case 38:O=v>0?1:($+="\f",-1);break;case 44:f[m++]=(d($)-1)*O,O=1;break;case 64:45===E()&&($+=R(S())),y=E(),v=g=d(j=$+=I(P())),C++;break;case 45:45===w&&2==d($)&&(_=0)}}return a}function G(e,t,n,r,i,a,u,c,d,h,m){for(var v=i-1,g=0===i?a:[""],y=p(g),b=0,w=0,x=0;b<r;++b)for(var k=0,S=f(e,v+1,v=o(w=u[b])),E=e;k<y;++k)(E=s(w>0?g[k]+" "+S:l(S,/&\f/g,g[k])))&&(d[x++]=E);return _(e,t,n,0===i?F:c,d,h,m)}function Q(e,t,n){return _(e,t,n,z,i(b),f(e,2,-2),0)}function Y(e,t,n,r){return _(e,t,n,B,f(e,0,r),f(e,r+1,-1),r)}var X=function(e,t,n){for(var r=0,o=0;r=o,o=E(),38===r&&12===o&&(t[n]=1),!C(o);)S();return O(e,y)},J=new WeakMap,ee=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||J.get(n))&&!r){J.set(e,!0);for(var o=[],a=function(e,t){return T(function(e,t){var n=-1,r=44;do{switch(C(r)){case 0:38===r&&12===E()&&(t[n]=1),e[n]+=X(y-1,t,n);break;case 2:e[n]+=R(r);break;case 4:if(44===r){e[++n]=58===E()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=i(r)}}while(r=S());return e}(j(e),t))}(t,o),s=n.props,l=0,u=0;l<a.length;l++)for(var c=0;c<s.length;c++,u++)e.props[u]=o[l]?a[l].replace(/&\f/g,s[c]):s[c]+" "+a[l]}}},te=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function ne(e,t){switch(function(e,t){return 45^c(e,0)?(((t<<2^c(e,0))<<2^c(e,1))<<2^c(e,2))<<2^c(e,3):0}(e,t)){case 5103:return D+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return D+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return D+e+$+e+L+e+e;case 6828:case 4268:return D+e+L+e+e;case 6165:return D+e+L+"flex-"+e+e;case 5187:return D+e+l(e,/(\w+).+(:[^]+)/,D+"box-$1$2"+L+"flex-$1$2")+e;case 5443:return D+e+L+"flex-item-"+l(e,/flex-|-self/,"")+e;case 4675:return D+e+L+"flex-line-pack"+l(e,/align-content|flex-|-self/,"")+e;case 5548:return D+e+L+l(e,"shrink","negative")+e;case 5292:return D+e+L+l(e,"basis","preferred-size")+e;case 6060:return D+"box-"+l(e,"-grow","")+D+e+L+l(e,"grow","positive")+e;case 4554:return D+l(e,/([^-])(transform)/g,"$1"+D+"$2")+e;case 6187:return l(l(l(e,/(zoom-|grab)/,D+"$1"),/(image-set)/,D+"$1"),e,"")+e;case 5495:case 3959:return l(e,/(image-set\([^]*)/,D+"$1$`$1");case 4968:return l(l(e,/(.+:)(flex-)?(.*)/,D+"box-pack:$3"+L+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+D+e+e;case 4095:case 3583:case 4068:case 2532:return l(e,/(.+)-inline(.+)/,D+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(d(e)-1-t>6)switch(c(e,t+1)){case 109:if(45!==c(e,t+4))break;case 102:return l(e,/(.+:)(.+)-([^]+)/,"$1"+D+"$2-$3$1"+$+(108==c(e,t+3)?"$3":"$2-$3"))+e;case 115:return~u(e,"stretch")?ne(l(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==c(e,t+1))break;case 6444:switch(c(e,d(e)-3-(~u(e,"!important")&&10))){case 107:return l(e,":",":"+D)+e;case 101:return l(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+D+(45===c(e,14)?"inline-":"")+"box$3$1"+D+"$2$3$1"+L+"$2box$3")+e}break;case 5936:switch(c(e,t+11)){case 114:return D+e+L+l(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return D+e+L+l(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return D+e+L+l(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return D+e+L+e+e}return e}var re=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case B:e.return=ne(e.value,e.length);break;case W:return U([x(e,{value:l(e.value,"@","@"+D)})],r);case F:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return U([x(e,{props:[l(t,/:(read-\w+)/,":"+$+"$1")]})],r);case"::placeholder":return U([x(e,{props:[l(t,/:(plac\w+)/,":"+D+"input-$1")]}),x(e,{props:[l(t,/:(plac\w+)/,":"+$+"$1")]}),x(e,{props:[l(t,/:(plac\w+)/,L+"input-$1")]})],r)}return""}))}}],oe=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var o,i,a=e.stylisPlugins||re,s={},l=[];o=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)s[t[n]]=!0;l.push(e)}));var u,c,f,d,h=[V,(d=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&d(e)})],m=(c=[ee,te].concat(a,h),f=p(c),function(e,t,n,r){for(var o="",i=0;i<f;i++)o+=c[i](e,t,n,r)||"";return o});i=function(e,t,n,r){u=n,U(H(e?e+"{"+t.styles+"}":t.styles),m),r&&(v.inserted[t.name]=!0)};var v={key:t,sheet:new r({key:t,container:o,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:s,registered:{},insert:i};return v.sheet.hydrate(l),v}},5042:function(e,t){"use strict";t.Z=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}},2443:function(e,t,n){"use strict";n.d(t,{T:function(){return s},w:function(){return a}});var r=n(7294),o=n(6751),i=(n(6797),n(7278),(0,r.createContext)("undefined"!=typeof HTMLElement?(0,o.Z)({key:"css"}):null));i.Provider;var a=function(e){return(0,r.forwardRef)((function(t,n){var o=(0,r.useContext)(i);return e(t,o,n)}))},s=(0,r.createContext)({})},6797:function(e,t,n){"use strict";n.d(t,{O:function(){return m}});var r=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},o={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},i=n(5042),a=/[A-Z]|^ms/g,s=/_EMO_([^_]+?)_([^]*?)_EMO_/g,l=function(e){return 45===e.charCodeAt(1)},u=function(e){return null!=e&&"boolean"!=typeof e},c=(0,i.Z)((function(e){return l(e)?e:e.replace(a,"-$&").toLowerCase()})),f=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(s,(function(e,t,n){return p={name:t,styles:n,next:p},t}))}return 1===o[e]||l(e)||"number"!=typeof t||0===t?t:t+"px"};function d(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return p={name:n.name,styles:n.styles,next:p},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)p={name:r.name,styles:r.styles,next:p},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=d(e,t,n[o])+";";else for(var i in n){var a=n[i];if("object"!=typeof a)null!=t&&void 0!==t[a]?r+=i+"{"+t[a]+"}":u(a)&&(r+=c(i)+":"+f(i,a)+";");else if(!Array.isArray(a)||"string"!=typeof a[0]||null!=t&&void 0!==t[a[0]]){var s=d(e,t,a);switch(i){case"animation":case"animationName":r+=c(i)+":"+s+";";break;default:r+=i+"{"+s+"}"}}else for(var l=0;l<a.length;l++)u(a[l])&&(r+=c(i)+":"+f(i,a[l])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=p,i=n(e);return p=o,d(e,t,i)}}if(null==t)return n;var a=t[n];return void 0!==a?a:n}var p,h=/label:\s*([^\s;\n{]+)\s*(;|$)/g,m=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var o=!0,i="";p=void 0;var a=e[0];null==a||void 0===a.raw?(o=!1,i+=d(n,t,a)):i+=a[0];for(var s=1;s<e.length;s++)i+=d(n,t,e[s]),o&&(i+=a[s]);h.lastIndex=0;for(var l,u="";null!==(l=h.exec(i));)u+="-"+l[1];return{name:r(i)+u,styles:i,next:p}}},7278:function(e,t,n){"use strict";var r;n.d(t,{L:function(){return a},j:function(){return s}});var o=n(7294),i=!!(r||(r=n.t(o,2))).useInsertionEffect&&(r||(r=n.t(o,2))).useInsertionEffect,a=i||function(e){return e()},s=i||o.useLayoutEffect},444:function(e,t,n){"use strict";function r(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}n.d(t,{My:function(){return i},fp:function(){return r},hC:function(){return o}});var o=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},i=function(e,t,n){o(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var i=t;do{e.insert(t===i?"."+r:"",i,e.sheet,!0),i=i.next}while(void 0!==i)}}},3619:function(e,t,n){"use strict";var r=n(4836);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"m12 4-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z"}),"ArrowForward");t.Z=a},4938:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(2112)},8794:function(e,t,n){"use strict";n.d(t,{Z:function(){return z}});var r=n(7462),o=n(3366),i=n(1387),a=n(9766),s=n(6268),l=n(8010),u=n(6523),c=n(1796),f={black:"#000",white:"#fff"},d={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},p={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},h={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},m={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},v={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},g={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},y={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"};const b=["mode","contrastThreshold","tonalOffset"],w={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:f.white,default:f.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},_={text:{primary:f.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:f.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function x(e,t,n,r){const o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,c.$n)(e.main,o):"dark"===t&&(e.dark=(0,c._j)(e.main,i)))}const k=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],S={textTransform:"uppercase"},E='"Roboto", "Helvetica", "Arial", sans-serif';function P(e,t){const n="function"==typeof t?t(e):t,{fontFamily:i=E,fontSize:s=14,fontWeightLight:l=300,fontWeightRegular:u=400,fontWeightMedium:c=500,fontWeightBold:f=700,htmlFontSize:d=16,allVariants:p,pxToRem:h}=n,m=(0,o.Z)(n,k),v=s/14,g=h||(e=>e/d*v+"rem"),y=(e,t,n,o,a)=>{return(0,r.Z)({fontFamily:i,fontWeight:e,fontSize:g(t),lineHeight:n},i===E?{letterSpacing:(s=o/t,Math.round(1e5*s)/1e5+"em")}:{},a,p);var s},b={h1:y(l,96,1.167,-1.5),h2:y(l,60,1.2,-.5),h3:y(u,48,1.167,0),h4:y(u,34,1.235,.25),h5:y(u,24,1.334,0),h6:y(c,20,1.6,.15),subtitle1:y(u,16,1.75,.15),subtitle2:y(c,14,1.57,.1),body1:y(u,16,1.5,.15),body2:y(u,14,1.43,.15),button:y(c,14,1.75,.4,S),caption:y(u,12,1.66,.4),overline:y(u,12,2.66,1,S)};return(0,a.Z)((0,r.Z)({htmlFontSize:d,pxToRem:g,fontFamily:i,fontSize:s,fontWeightLight:l,fontWeightRegular:u,fontWeightMedium:c,fontWeightBold:f},b),m,{clone:!1})}const O=.2,C=.14,j=.12;function T(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,${O})`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,${C})`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,${j})`].join(",")}var R=["none",T(0,2,1,-1,0,1,1,0,0,1,3,0),T(0,3,1,-2,0,2,2,0,0,1,5,0),T(0,3,3,-2,0,3,4,0,0,1,8,0),T(0,2,4,-1,0,4,5,0,0,1,10,0),T(0,3,5,-1,0,5,8,0,0,1,14,0),T(0,3,5,-1,0,6,10,0,0,1,18,0),T(0,4,5,-2,0,7,10,1,0,2,16,1),T(0,5,5,-3,0,8,10,1,0,3,14,2),T(0,5,6,-3,0,9,12,1,0,3,16,2),T(0,6,6,-3,0,10,14,1,0,4,18,3),T(0,6,7,-4,0,11,15,1,0,4,20,3),T(0,7,8,-4,0,12,17,2,0,5,22,4),T(0,7,8,-4,0,13,19,2,0,5,24,4),T(0,7,9,-4,0,14,21,2,0,5,26,4),T(0,8,9,-5,0,15,22,2,0,6,28,5),T(0,8,10,-5,0,16,24,2,0,6,30,5),T(0,8,11,-5,0,17,26,2,0,6,32,5),T(0,9,11,-5,0,18,28,2,0,7,34,6),T(0,9,12,-6,0,19,29,2,0,7,36,6),T(0,10,13,-6,0,20,31,3,0,8,38,7),T(0,10,13,-6,0,21,33,3,0,8,40,7),T(0,10,14,-6,0,22,35,3,0,8,42,7),T(0,11,14,-7,0,23,36,3,0,9,44,8),T(0,11,15,-7,0,24,38,3,0,9,46,8)];const A=["duration","easing","delay"],Z={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},M={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function N(e){return`${Math.round(e)}ms`}function I(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function L(e){const t=(0,r.Z)({},Z,e.easing),n=(0,r.Z)({},M,e.duration);return(0,r.Z)({getAutoHeightDuration:I,create:(e=["all"],r={})=>{const{duration:i=n.standard,easing:a=t.easeInOut,delay:s=0}=r;return(0,o.Z)(r,A),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof i?i:N(i)} ${a} ${"string"==typeof s?s:N(s)}`)).join(",")}},e,{easing:t,duration:n})}var $={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};const D=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];var z=function(e={},...t){const{mixins:n={},palette:k={},transitions:S={},typography:E={}}=e,O=(0,o.Z)(e,D);if(e.vars)throw new Error((0,i.Z)(18));const C=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:s=.2}=e,l=(0,o.Z)(e,b),u=e.primary||function(e="light"){return"dark"===e?{main:v[200],light:v[50],dark:v[400]}:{main:v[700],light:v[400],dark:v[800]}}(t),k=e.secondary||function(e="light"){return"dark"===e?{main:p[200],light:p[50],dark:p[400]}:{main:p[500],light:p[300],dark:p[700]}}(t),S=e.error||function(e="light"){return"dark"===e?{main:h[500],light:h[300],dark:h[700]}:{main:h[700],light:h[400],dark:h[800]}}(t),E=e.info||function(e="light"){return"dark"===e?{main:g[400],light:g[300],dark:g[700]}:{main:g[700],light:g[500],dark:g[900]}}(t),P=e.success||function(e="light"){return"dark"===e?{main:y[400],light:y[300],dark:y[700]}:{main:y[800],light:y[500],dark:y[900]}}(t),O=e.warning||function(e="light"){return"dark"===e?{main:m[400],light:m[300],dark:m[700]}:{main:"#ed6c02",light:m[500],dark:m[900]}}(t);function C(e){return(0,c.mi)(e,_.text.primary)>=n?_.text.primary:w.text.primary}const j=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:a=700})=>{if(!(e=(0,r.Z)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,i.Z)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,i.Z)(12,t?` (${t})`:"",JSON.stringify(e.main)));return x(e,"light",o,s),x(e,"dark",a,s),e.contrastText||(e.contrastText=C(e.main)),e},T={dark:_,light:w};return(0,a.Z)((0,r.Z)({common:(0,r.Z)({},f),mode:t,primary:j({color:u,name:"primary"}),secondary:j({color:k,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:j({color:S,name:"error"}),warning:j({color:O,name:"warning"}),info:j({color:E,name:"info"}),success:j({color:P,name:"success"}),grey:d,contrastThreshold:n,getContrastText:C,augmentColor:j,tonalOffset:s},T[t]),l)}(k),j=(0,s.Z)(e);let T=(0,a.Z)(j,{mixins:(A=j.breakpoints,Z=n,(0,r.Z)({toolbar:{minHeight:56,[A.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[A.up("sm")]:{minHeight:64}}},Z)),palette:C,shadows:R.slice(),typography:P(C,E),transitions:L(S),zIndex:(0,r.Z)({},$)});var A,Z;return T=(0,a.Z)(T,O),T=t.reduce(((e,t)=>(0,a.Z)(e,t)),T),T.unstable_sxConfig=(0,r.Z)({},l.Z,null==O?void 0:O.unstable_sxConfig),T.unstable_sx=function(e){return(0,u.Z)({sx:e,theme:this})},T}()},2077:function(e,t,n){"use strict";n.d(t,{ZP:function(){return I},FO:function(){return Z},Dz:function(){return M}});var r=n(3366),o=n(7462),i=n(7294),a=n(5042),s=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,l=(0,a.Z)((function(e){return s.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),u=n(2443),c=n(444),f=n(6797),d=n(7278),p=l,h=function(e){return"theme"!==e},m=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?p:h},v=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},g=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return(0,c.hC)(t,n,r),(0,d.L)((function(){return(0,c.My)(t,n,r)})),null},y=function e(t,n){var r,a,s=t.__emotion_real===t,l=s&&t.__emotion_base||t;void 0!==n&&(r=n.label,a=n.target);var d=v(t,n,s),p=d||m(l),h=!p("as");return function(){var y=arguments,b=s&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==r&&b.push("label:"+r+";"),null==y[0]||void 0===y[0].raw)b.push.apply(b,y);else{b.push(y[0][0]);for(var w=y.length,_=1;_<w;_++)b.push(y[_],y[0][_])}var x=(0,u.w)((function(e,t,n){var r=h&&e.as||l,o="",s=[],v=e;if(null==e.theme){for(var y in v={},e)v[y]=e[y];v.theme=(0,i.useContext)(u.T)}"string"==typeof e.className?o=(0,c.fp)(t.registered,s,e.className):null!=e.className&&(o=e.className+" ");var w=(0,f.O)(b.concat(s),t.registered,v);o+=t.key+"-"+w.name,void 0!==a&&(o+=" "+a);var _=h&&void 0===d?m(r):p,x={};for(var k in e)h&&"as"===k||_(k)&&(x[k]=e[k]);return x.className=o,x.ref=n,(0,i.createElement)(i.Fragment,null,(0,i.createElement)(g,{cache:t,serialized:w,isStringTag:"string"==typeof r}),(0,i.createElement)(r,x))}));return x.displayName=void 0!==r?r:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",x.defaultProps=t.defaultProps,x.__emotion_real=x,x.__emotion_base=l,x.__emotion_styles=b,x.__emotion_forwardProp=d,Object.defineProperty(x,"toString",{value:function(){return"."+a}}),x.withComponent=function(t,r){return e(t,(0,o.Z)({},n,r,{shouldForwardProp:v(x,r,!0)})).apply(void 0,b)},x}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){y[e]=y(e)}));var b=y;var w=n(6268),_=n(8320);const x=["variant"];function k(e){return 0===e.length}function S(e){const{variant:t}=e,n=(0,r.Z)(e,x);let o=t||"";return Object.keys(n).sort().forEach((t=>{o+="color"===t?k(o)?e[t]:(0,_.Z)(e[t]):`${k(o)?t:(0,_.Z)(t)}${(0,_.Z)(e[t].toString())}`})),o}var E=n(6523);const P=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],O=["theme"],C=["theme"];function j(e){return 0===Object.keys(e).length}function T(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const R=(0,w.Z)();var A=n(8794);const Z=e=>T(e)&&"classes"!==e,M=T,N=function(e={}){const{defaultTheme:t=R,rootShouldForwardProp:n=T,slotShouldForwardProp:i=T}=e,a=e=>{const n=j(e.theme)?t:e.theme;return(0,E.Z)((0,o.Z)({},e,{theme:n}))};return a.__mui_systemSx=!0,(e,s={})=>{((e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))})(e,(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx)))));const{name:l,slot:u,skipVariantsResolver:c,skipSx:f,overridesResolver:d}=s,p=(0,r.Z)(s,P),h=void 0!==c?c:u&&"Root"!==u||!1,m=f||!1;let v=T;"Root"===u?v=n:u?v=i:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(v=void 0);const g=function(e,t){return b(e,t)}(e,(0,o.Z)({shouldForwardProp:v,label:void 0},p)),y=(e,...n)=>{const i=n?n.map((e=>"function"==typeof e&&e.__emotion_real!==e?n=>{let{theme:i}=n,a=(0,r.Z)(n,O);return e((0,o.Z)({theme:j(i)?t:i},a))}:e)):[];let s=e;l&&d&&i.push((e=>{const n=j(e.theme)?t:e.theme,r=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(l,n);if(r){const t={};return Object.entries(r).forEach((([r,i])=>{t[r]="function"==typeof i?i((0,o.Z)({},e,{theme:n})):i})),d(e,t)}return null})),l&&!h&&i.push((e=>{const n=j(e.theme)?t:e.theme;return((e,t,n,r)=>{var o,i;const{ownerState:a={}}=e,s=[],l=null==n||null==(o=n.components)||null==(i=o[r])?void 0:i.variants;return l&&l.forEach((n=>{let r=!0;Object.keys(n.props).forEach((t=>{a[t]!==n.props[t]&&e[t]!==n.props[t]&&(r=!1)})),r&&s.push(t[S(n.props)])})),s})(e,((e,t)=>{let n=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants);const r={};return n.forEach((e=>{const t=S(e.props);r[t]=e.style})),r})(l,n),n,l)})),m||i.push(a);const u=i.length-n.length;if(Array.isArray(e)&&u>0){const t=new Array(u).fill("");s=[...e,...t],s.raw=[...e.raw,...t]}else"function"==typeof e&&e.__emotion_real!==e&&(s=n=>{let{theme:i}=n,a=(0,r.Z)(n,C);return e((0,o.Z)({theme:j(i)?t:i},a))});return g(s,...i)};return g.withConfig&&(y.withConfig=g.withConfig),y}}({defaultTheme:A.Z,rootShouldForwardProp:Z});var I=N},6122:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var r=n(7925),o=n(7878);var i=n(8794);function a({props:e,name:t}){return function({props:e,name:t,defaultTheme:n}){const i=function(e){const{theme:t,name:n,props:o}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?(0,r.Z)(t.components[n].defaultProps,o):o}({theme:(0,o.Z)(n),name:t,props:e});return i}({props:e,name:t,defaultTheme:i.Z})}},1220:function(e,t,n){"use strict";var r=n(8320);t.Z=r.Z},5949:function(e,t,n){"use strict";n.d(t,{Z:function(){return b}});var r=n(7462),o=n(7294),i=n(3366),a=n(6010),s=n(4780),l=n(1220),u=n(6122),c=n(2077),f=n(1588),d=n(4867);function p(e){return(0,d.Z)("MuiSvgIcon",e)}(0,f.Z)("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);var h=n(5893);const m=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],v=(0,c.ZP)("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${(0,l.Z)(n.color)}`],t[`fontSize${(0,l.Z)(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,r,o,i,a,s,l,u,c,f,d,p,h,m,v,g,y;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(o=e.transitions)||null==(i=o.duration)?void 0:i.shorter}),fontSize:{inherit:"inherit",small:(null==(a=e.typography)||null==(s=a.pxToRem)?void 0:s.call(a,20))||"1.25rem",medium:(null==(l=e.typography)||null==(u=l.pxToRem)?void 0:u.call(l,24))||"1.5rem",large:(null==(c=e.typography)||null==(f=c.pxToRem)?void 0:f.call(c,35))||"2.1875rem"}[t.fontSize],color:null!=(d=null==(p=(e.vars||e).palette)||null==(h=p[t.color])?void 0:h.main)?d:{action:null==(m=(e.vars||e).palette)||null==(v=m.action)?void 0:v.active,disabled:null==(g=(e.vars||e).palette)||null==(y=g.action)?void 0:y.disabled,inherit:void 0}[t.color]}})),g=o.forwardRef((function(e,t){const n=(0,u.Z)({props:e,name:"MuiSvgIcon"}),{children:o,className:c,color:f="inherit",component:d="svg",fontSize:g="medium",htmlColor:y,inheritViewBox:b=!1,titleAccess:w,viewBox:_="0 0 24 24"}=n,x=(0,i.Z)(n,m),k=(0,r.Z)({},n,{color:f,component:d,fontSize:g,instanceFontSize:e.fontSize,inheritViewBox:b,viewBox:_}),S={};b||(S.viewBox=_);const E=(e=>{const{color:t,fontSize:n,classes:r}=e,o={root:["root","inherit"!==t&&`color${(0,l.Z)(t)}`,`fontSize${(0,l.Z)(n)}`]};return(0,s.Z)(o,p,r)})(k);return(0,h.jsxs)(v,(0,r.Z)({as:d,className:(0,a.Z)(E.root,c),focusable:"false",color:y,"aria-hidden":!w||void 0,role:w?"img":void 0,ref:t},S,x,{ownerState:k,children:[o,w?(0,h.jsx)("title",{children:w}):null]}))}));g.muiName="SvgIcon";var y=g;function b(e,t){function n(n,o){return(0,h.jsx)(y,(0,r.Z)({"data-testid":`${t}Icon`,ref:o},n,{children:e}))}return n.muiName=y.muiName,o.memo(o.forwardRef(n))}},7144:function(e,t,n){"use strict";var r=n(7596);t.Z=r.Z},2112:function(e,t,n){"use strict";n.r(t),n.d(t,{capitalize:function(){return o.Z},createChainedFunction:function(){return i},createSvgIcon:function(){return a.Z},debounce:function(){return s.Z},deprecatedPropType:function(){return l},isMuiElement:function(){return u.Z},ownerDocument:function(){return c.Z},ownerWindow:function(){return f.Z},requirePropFactory:function(){return d},setRef:function(){return p},unstable_ClassNameGenerator:function(){return _},unstable_useEnhancedEffect:function(){return h.Z},unstable_useId:function(){return m},unsupportedProp:function(){return v},useControlled:function(){return g.Z},useEventCallback:function(){return y.Z},useForkRef:function(){return b.Z},useIsFocusVisible:function(){return w.Z}});var r=n(7078),o=n(1220),i=n(9064).Z,a=n(5949),s=n(7144),l=function(e,t){return()=>null},u=n(8502),c=n(8038),f=n(5340);n(7462);var d=function(e,t){return()=>null},p=n(7960).Z,h=n(8974),m=n(7579).Z,v=function(e,t,n,r,o){return null},g=n(2893),y=n(2068),b=n(1705),w=n(3511);const _={configure:e=>{r.Z.configure(e)}}},8502:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var r=n(7294),o=function(e,t){return r.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}},8038:function(e,t,n){"use strict";var r=n(7094);t.Z=r.Z},5340:function(e,t,n){"use strict";var r=n(8290);t.Z=r.Z},2893:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var r=n(7294),o=function({controlled:e,default:t,name:n,state:o="value"}){const{current:i}=r.useRef(void 0!==e),[a,s]=r.useState(t);return[i?e:a,r.useCallback((e=>{i||s(e)}),[])]}},8974:function(e,t,n){"use strict";var r=n(6600);t.Z=r.Z},2068:function(e,t,n){"use strict";var r=n(3633);t.Z=r.Z},1705:function(e,t,n){"use strict";var r=n(67);t.Z=r.Z},3511:function(e,t,n){"use strict";n.d(t,{Z:function(){return f}});var r=n(7294);let o,i=!0,a=!1;const s={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function l(e){e.metaKey||e.altKey||e.ctrlKey||(i=!0)}function u(){i=!1}function c(){"hidden"===this.visibilityState&&a&&(i=!0)}var f=function(){const e=r.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",l,!0),t.addEventListener("mousedown",u,!0),t.addEventListener("pointerdown",u,!0),t.addEventListener("touchstart",u,!0),t.addEventListener("visibilitychange",c,!0))}),[]),t=r.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return i||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!s[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(a=!0,window.clearTimeout(o),o=window.setTimeout((()=>{a=!1}),100),t.current=!1,!0)},ref:e}}},5408:function(e,t,n){"use strict";n.d(t,{L7:function(){return s},P$:function(){return l},VO:function(){return r},W8:function(){return a},k9:function(){return i}});const r={xs:0,sm:600,md:900,lg:1200,xl:1536},o={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${r[e]}px)`};function i(e,t,n){const i=e.theme||{};if(Array.isArray(t)){const e=i.breakpoints||o;return t.reduce(((r,o,i)=>(r[e.up(e.keys[i])]=n(t[i]),r)),{})}if("object"==typeof t){const e=i.breakpoints||o;return Object.keys(t).reduce(((o,i)=>{if(-1!==Object.keys(e.values||r).indexOf(i))o[e.up(i)]=n(t[i],i);else{const e=i;o[e]=t[e]}return o}),{})}return n(t)}function a(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}function s(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}function l({values:e,breakpoints:t,base:n}){const r=n||function(e,t){if("object"!=typeof e)return{};const n={},r=Object.keys(t);return Array.isArray(e)?r.forEach(((t,r)=>{r<e.length&&(n[t]=!0)})):r.forEach((t=>{null!=e[t]&&(n[t]=!0)})),n}(e,t),o=Object.keys(r);if(0===o.length)return e;let i;return o.reduce(((t,n,r)=>(Array.isArray(e)?(t[n]=null!=e[r]?e[r]:e[i],i=r):"object"==typeof e?(t[n]=null!=e[n]?e[n]:e[i],i=n):t[n]=e,t)),{})}},1796:function(e,t,n){"use strict";n.d(t,{$n:function(){return f},Fq:function(){return u},_j:function(){return c},mi:function(){return l}});var r=n(1387);function o(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function i(e){if(e.type)return e;if("#"===e.charAt(0))return i(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error((0,r.Z)(9,e));let o,a=e.substring(t+1,e.length-1);if("color"===n){if(a=a.split(" "),o=a.shift(),4===a.length&&"/"===a[3].charAt(0)&&(a[3]=a[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(o))throw new Error((0,r.Z)(10,o))}else a=a.split(",");return a=a.map((e=>parseFloat(e))),{type:n,values:a,colorSpace:o}}function a(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function s(e){let t="hsl"===(e=i(e)).type||"hsla"===e.type?i(function(e){e=i(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,s=r*Math.min(o,1-o),l=(e,t=(e+n/30)%12)=>o-s*Math.max(Math.min(t-3,9-t,1),-1);let u="rgb";const c=[Math.round(255*l(0)),Math.round(255*l(8)),Math.round(255*l(4))];return"hsla"===e.type&&(u+="a",c.push(t[3])),a({type:u,values:c})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function l(e,t){const n=s(e),r=s(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function u(e,t){return e=i(e),t=o(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,a(e)}function c(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return a(e)}function f(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return a(e)}},6268:function(e,t,n){"use strict";n.d(t,{Z:function(){return d}});var r=n(7462),o=n(3366),i=n(9766);const a=["values","unit","step"];var s={borderRadius:4},l=n(2605),u=n(6523),c=n(8010);const f=["breakpoints","palette","spacing","shape"];var d=function(e={},...t){const{breakpoints:n={},palette:d={},spacing:p,shape:h={}}=e,m=(0,o.Z)(e,f),v=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:i=5}=e,s=(0,o.Z)(e,a),l=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>(0,r.Z)({},e,{[t.key]:t.val})),{})})(t),u=Object.keys(l);function c(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function f(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-i/100}${n})`}function d(e,r){const o=u.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[u[o]]?t[u[o]]:r)-i/100}${n})`}return(0,r.Z)({keys:u,values:l,up:c,down:f,between:d,only:function(e){return u.indexOf(e)+1<u.length?d(e,u[u.indexOf(e)+1]):c(e)},not:function(e){const t=u.indexOf(e);return 0===t?c(u[1]):t===u.length-1?f(u[t]):d(e,u[u.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},s)}(n),g=function(e=8){if(e.mui)return e;const t=(0,l.hB)({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(p);let y=(0,i.Z)({breakpoints:v,direction:"ltr",components:{},palette:(0,r.Z)({mode:"light"},d),spacing:g,shape:(0,r.Z)({},s,h)},m);return y=t.reduce(((e,t)=>(0,i.Z)(e,t)),y),y.unstable_sxConfig=(0,r.Z)({},c.Z,null==m?void 0:m.unstable_sxConfig),y.unstable_sx=function(e){return(0,u.Z)({sx:e,theme:this})},y}},7730:function(e,t,n){"use strict";var r=n(9766);t.Z=function(e,t){return t?(0,r.Z)(e,t,{clone:!1}):e}},2605:function(e,t,n){"use strict";n.d(t,{hB:function(){return h},eI:function(){return p},NA:function(){return m},e6:function(){return g},o3:function(){return y}});var r=n(5408),o=n(4844),i=n(7730);const a={m:"margin",p:"padding"},s={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},l={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},u=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!l[e])return[e];e=l[e]}const[t,n]=e.split(""),r=a[t],o=s[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(e)),t[e])}(),c=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],f=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],d=[...c,...f];function p(e,t,n,r){var i;const a=null!=(i=(0,o.DW)(e,t,!1))?i:n;return"number"==typeof a?e=>"string"==typeof e?e:a*e:Array.isArray(a)?e=>"string"==typeof e?e:a[e]:"function"==typeof a?a:()=>{}}function h(e){return p(e,"spacing",8)}function m(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function v(e,t){const n=h(e.theme);return Object.keys(e).map((o=>function(e,t,n,o){if(-1===t.indexOf(n))return null;const i=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=m(t,n),e)),{})}(u(n),o),a=e[n];return(0,r.k9)(e,a,i)}(e,t,o,n))).reduce(i.Z,{})}function g(e){return v(e,c)}function y(e){return v(e,f)}function b(e){return v(e,d)}g.propTypes={},g.filterProps=c,y.propTypes={},y.filterProps=f,b.propTypes={},b.filterProps=d},4844:function(e,t,n){"use strict";n.d(t,{DW:function(){return i},Jq:function(){return a}});var r=n(8320),o=n(5408);function i(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function a(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:i(e,n)||r,t&&(o=t(o,r,e)),o}t.ZP=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:s,transform:l}=e,u=e=>{if(null==e[t])return null;const u=e[t],c=i(e.theme,s)||{};return(0,o.k9)(e,u,(e=>{let o=a(c,l,e);return e===o&&"string"==typeof e&&(o=a(c,l,`${t}${"default"===e?"":(0,r.Z)(e)}`,e)),!1===n?o:{[n]:o}}))};return u.propTypes={},u.filterProps=[t],u}},8010:function(e,t,n){"use strict";n.d(t,{Z:function(){return R}});var r=n(2605),o=n(4844),i=n(7730),a=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?(0,i.Z)(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n},s=n(5408);function l(e){return"number"!=typeof e?e:`${e}px solid`}const u=(0,o.ZP)({prop:"border",themeKey:"borders",transform:l}),c=(0,o.ZP)({prop:"borderTop",themeKey:"borders",transform:l}),f=(0,o.ZP)({prop:"borderRight",themeKey:"borders",transform:l}),d=(0,o.ZP)({prop:"borderBottom",themeKey:"borders",transform:l}),p=(0,o.ZP)({prop:"borderLeft",themeKey:"borders",transform:l}),h=(0,o.ZP)({prop:"borderColor",themeKey:"palette"}),m=(0,o.ZP)({prop:"borderTopColor",themeKey:"palette"}),v=(0,o.ZP)({prop:"borderRightColor",themeKey:"palette"}),g=(0,o.ZP)({prop:"borderBottomColor",themeKey:"palette"}),y=(0,o.ZP)({prop:"borderLeftColor",themeKey:"palette"}),b=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=(0,r.eI)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:(0,r.NA)(t,e)});return(0,s.k9)(e,e.borderRadius,n)}return null};b.propTypes={},b.filterProps=["borderRadius"],a(u,c,f,d,p,h,m,v,g,y,b);const w=e=>{if(void 0!==e.gap&&null!==e.gap){const t=(0,r.eI)(e.theme,"spacing",8,"gap"),n=e=>({gap:(0,r.NA)(t,e)});return(0,s.k9)(e,e.gap,n)}return null};w.propTypes={},w.filterProps=["gap"];const _=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=(0,r.eI)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:(0,r.NA)(t,e)});return(0,s.k9)(e,e.columnGap,n)}return null};_.propTypes={},_.filterProps=["columnGap"];const x=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=(0,r.eI)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:(0,r.NA)(t,e)});return(0,s.k9)(e,e.rowGap,n)}return null};function k(e,t){return"grey"===t?t:e}function S(e){return e<=1&&0!==e?100*e+"%":e}x.propTypes={},x.filterProps=["rowGap"],a(w,_,x,(0,o.ZP)({prop:"gridColumn"}),(0,o.ZP)({prop:"gridRow"}),(0,o.ZP)({prop:"gridAutoFlow"}),(0,o.ZP)({prop:"gridAutoColumns"}),(0,o.ZP)({prop:"gridAutoRows"}),(0,o.ZP)({prop:"gridTemplateColumns"}),(0,o.ZP)({prop:"gridTemplateRows"}),(0,o.ZP)({prop:"gridTemplateAreas"}),(0,o.ZP)({prop:"gridArea"})),a((0,o.ZP)({prop:"color",themeKey:"palette",transform:k}),(0,o.ZP)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:k}),(0,o.ZP)({prop:"backgroundColor",themeKey:"palette",transform:k}));const E=(0,o.ZP)({prop:"width",transform:S}),P=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r,o;return{maxWidth:(null==(n=e.theme)||null==(r=n.breakpoints)||null==(o=r.values)?void 0:o[t])||s.VO[t]||S(t)}};return(0,s.k9)(e,e.maxWidth,t)}return null};P.filterProps=["maxWidth"];const O=(0,o.ZP)({prop:"minWidth",transform:S}),C=(0,o.ZP)({prop:"height",transform:S}),j=(0,o.ZP)({prop:"maxHeight",transform:S}),T=(0,o.ZP)({prop:"minHeight",transform:S});(0,o.ZP)({prop:"size",cssProperty:"width",transform:S}),(0,o.ZP)({prop:"size",cssProperty:"height",transform:S}),a(E,P,O,C,j,T,(0,o.ZP)({prop:"boxSizing"}));var R={border:{themeKey:"borders",transform:l},borderTop:{themeKey:"borders",transform:l},borderRight:{themeKey:"borders",transform:l},borderBottom:{themeKey:"borders",transform:l},borderLeft:{themeKey:"borders",transform:l},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:b},color:{themeKey:"palette",transform:k},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:k},backgroundColor:{themeKey:"palette",transform:k},p:{style:r.o3},pt:{style:r.o3},pr:{style:r.o3},pb:{style:r.o3},pl:{style:r.o3},px:{style:r.o3},py:{style:r.o3},padding:{style:r.o3},paddingTop:{style:r.o3},paddingRight:{style:r.o3},paddingBottom:{style:r.o3},paddingLeft:{style:r.o3},paddingX:{style:r.o3},paddingY:{style:r.o3},paddingInline:{style:r.o3},paddingInlineStart:{style:r.o3},paddingInlineEnd:{style:r.o3},paddingBlock:{style:r.o3},paddingBlockStart:{style:r.o3},paddingBlockEnd:{style:r.o3},m:{style:r.e6},mt:{style:r.e6},mr:{style:r.e6},mb:{style:r.e6},ml:{style:r.e6},mx:{style:r.e6},my:{style:r.e6},margin:{style:r.e6},marginTop:{style:r.e6},marginRight:{style:r.e6},marginBottom:{style:r.e6},marginLeft:{style:r.e6},marginX:{style:r.e6},marginY:{style:r.e6},marginInline:{style:r.e6},marginInlineStart:{style:r.e6},marginInlineEnd:{style:r.e6},marginBlock:{style:r.e6},marginBlockStart:{style:r.e6},marginBlockEnd:{style:r.e6},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:w},rowGap:{style:x},columnGap:{style:_},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:S},maxWidth:{style:P},minWidth:{transform:S},height:{transform:S},maxHeight:{transform:S},minHeight:{transform:S},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}},6523:function(e,t,n){"use strict";var r=n(8320),o=n(7730),i=n(4844),a=n(5408),s=n(8010);const l=function(){function e(e,t,n,o){const s={[e]:t,theme:n},l=o[e];if(!l)return{[e]:t};const{cssProperty:u=e,themeKey:c,transform:f,style:d}=l;if(null==t)return null;const p=(0,i.DW)(n,c)||{};return d?d(s):(0,a.k9)(s,t,(t=>{let n=(0,i.Jq)(p,f,t);return t===n&&"string"==typeof t&&(n=(0,i.Jq)(p,f,`${e}${"default"===t?"":(0,r.Z)(t)}`,t)),!1===u?n:{[u]:n}}))}return function t(n){var r;const{sx:i,theme:l={}}=n||{};if(!i)return null;const u=null!=(r=l.unstable_sxConfig)?r:s.Z;function c(n){let r=n;if("function"==typeof n)r=n(l);else if("object"!=typeof n)return n;if(!r)return null;const i=(0,a.W8)(l.breakpoints),s=Object.keys(i);let c=i;return Object.keys(r).forEach((n=>{const i="function"==typeof(s=r[n])?s(l):s;var s;if(null!=i)if("object"==typeof i)if(u[n])c=(0,o.Z)(c,e(n,i,l,u));else{const e=(0,a.k9)({theme:l},i,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,i)?c=(0,o.Z)(c,e):c[n]=t({sx:i,theme:l})}else c=(0,o.Z)(c,e(n,i,l,u))})),(0,a.L7)(s,c)}return Array.isArray(i)?i.map(c):c(i)}}();l.filterProps=["sx"],t.Z=l},7878:function(e,t,n){"use strict";n.d(t,{Z:function(){return s}});var r=n(6268),o=n(7294),i=o.createContext(null);const a=(0,r.Z)();var s=function(e=a){return function(e=null){const t=o.useContext(i);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}(e)}},7078:function(e,t){"use strict";const n=e=>e,r=(()=>{let e=n;return{configure(t){e=t},generate(t){return e(t)},reset(){e=n}}})();t.Z=r},8320:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var r=n(1387);function o(e){if("string"!=typeof e)throw new Error((0,r.Z)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},4780:function(e,t,n){"use strict";function r(e,t,n){const r={};return Object.keys(e).forEach((o=>{r[o]=e[o].reduce(((e,r)=>(r&&(e.push(t(r)),n&&n[r]&&e.push(n[r])),e)),[]).join(" ")})),r}n.d(t,{Z:function(){return r}})},9064:function(e,t,n){"use strict";function r(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))}n.d(t,{Z:function(){return r}})},7596:function(e,t,n){"use strict";function r(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}n.d(t,{Z:function(){return r}})},9766:function(e,t,n){"use strict";n.d(t,{P:function(){return o},Z:function(){return a}});var r=n(7462);function o(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function i(e){if(!o(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=i(e[n])})),t}function a(e,t,n={clone:!0}){const s=n.clone?(0,r.Z)({},e):e;return o(e)&&o(t)&&Object.keys(t).forEach((r=>{"__proto__"!==r&&(o(t[r])&&r in e&&o(e[r])?s[r]=a(e[r],t[r],n):n.clone?s[r]=o(t[r])?i(t[r]):t[r]:s[r]=t[r])})),s}},1387:function(e,t,n){"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,{Z:function(){return r}})},4867:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var r=n(7078);const o={active:"active",checked:"checked",completed:"completed",disabled:"disabled",readOnly:"readOnly",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",required:"required",selected:"selected"};function i(e,t,n="Mui"){const i=o[t];return i?`${n}-${i}`:`${r.Z.generate(e)}-${t}`}},1588:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var r=n(4867);function o(e,t,n="Mui"){const o={};return t.forEach((t=>{o[t]=(0,r.Z)(e,t,n)})),o}},7094:function(e,t,n){"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,{Z:function(){return r}})},8290:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var r=n(7094);function o(e){return(0,r.Z)(e).defaultView||window}},7925:function(e,t,n){"use strict";n.d(t,{Z:function(){return o}});var r=n(7462);function o(e,t){const n=(0,r.Z)({},t);return Object.keys(e).forEach((i=>{if(i.toString().match(/^(components|slots)$/))n[i]=(0,r.Z)({},e[i],n[i]);else if(i.toString().match(/^(componentsProps|slotProps)$/)){const a=e[i]||{},s=t[i];n[i]={},s&&Object.keys(s)?a&&Object.keys(a)?(n[i]=(0,r.Z)({},s),Object.keys(a).forEach((e=>{n[i][e]=o(a[e],s[e])}))):n[i]=s:n[i]=a}else void 0===n[i]&&(n[i]=e[i])})),n}},7960:function(e,t,n){"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,{Z:function(){return r}})},6600:function(e,t,n){"use strict";var r=n(7294);const o="undefined"!=typeof window?r.useLayoutEffect:r.useEffect;t.Z=o},3633:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var r=n(7294),o=n(6600);function i(e){const t=r.useRef(e);return(0,o.Z)((()=>{t.current=e})),r.useCallback(((...e)=>(0,t.current)(...e)),[])}},67:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var r=n(7294),o=n(7960);function i(...e){return r.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{(0,o.Z)(e,t)}))}),e)}},7579:function(e,t,n){"use strict";var r;n.d(t,{Z:function(){return s}});var o=n(7294);let i=0;const a=(r||(r=n.t(o,2))).useId;function s(e){if(void 0!==a){const t=a();return null!=e?e:t}return function(e){const[t,n]=o.useState(e),r=e||t;return o.useEffect((()=>{null==t&&(i+=1,n(`mui-${i}`))}),[t]),r}(e)}},6010:function(e,t,n){"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.Z=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},2955:function(e,t,n){var r=n(3645),o=n(1667),i=n(6333);t=r(!1);var a=o(i);t.push([e.id,"@font-face {\r\n    font-family: 'arial narrow';\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    src: url("+a+") format('woff2');\r\n}\r\n\r\n",""]),e.exports=t},3645:function(e){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n,r,o,i=e[1]||"",a=e[3];if(!a)return i;if(t&&"function"==typeof btoa){var s=(n=a,r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),"/*# ".concat(o," */")),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(l).concat([s]).join("\n")}return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},1667:function(e){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},7187:function(e){"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(n,r){function o(n){e.removeListener(t,i),r(n)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",o),n([].slice.call(arguments))}m(e,t,i,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&m(e,"error",t,{once:!0})}(e,o)}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var a=10;function s(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,t,n,r){var o,i,a,u;if(s(n),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),a=i[t]),void 0===a)a=i[t]=n,++e._eventsCount;else if("function"==typeof a?a=i[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(o=l(e))>0&&a.length>o&&!a.warned){a.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=a.length,u=c,console&&console.warn&&console.warn(u)}return e}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=c.bind(r);return o.listener=n,r.wrapFn=o,o}function d(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):h(o,o.length)}function p(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function h(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function m(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(i){r.once&&e.removeEventListener(t,o),n(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o="error"===e,i=this._events;if(void 0!==i)o=o&&void 0===i.error;else if(!o)return!1;if(o){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var l=i[e];if(void 0===l)return!1;if("function"==typeof l)r(l,this,t);else{var u=l.length,c=h(l,u);for(n=0;n<u;++n)r(c[n],this,t)}return!0},i.prototype.addListener=function(e,t){return u(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return u(this,e,t,!0)},i.prototype.once=function(e,t){return s(t),this.on(e,f(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,f(this,e,t)),this},i.prototype.removeListener=function(e,t){var n,r,o,i,a;if(s(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){a=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},i.prototype.listeners=function(e){return d(this,e,!0)},i.prototype.rawListeners=function(e){return d(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},6333:function(e,t,n){"use strict";n.r(t),t.default=n.p+"fonts/arial-narrow.woff2"},8679:function(e,t,n){"use strict";var r=n(1296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?a:s[e.$$typeof]||o}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=a;var u=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var s=l(t),m=l(n),v=0;v<a.length;++v){var g=a[v];if(!(i[g]||r&&r[g]||m&&m[g]||s&&s[g])){var y=d(n,g);try{u(t,g,y)}catch(e){}}}}return t}},6103:function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case s:case a:case p:return e;default:switch(e=e&&e.$$typeof){case u:case d:case v:case m:case l:return e;default:return t}}case o:return t}}}function x(e){return _(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=u,t.ContextProvider=l,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=s,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return x(e)||_(e)===c},t.isConcurrentMode=x,t.isContextConsumer=function(e){return _(e)===u},t.isContextProvider=function(e){return _(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return _(e)===d},t.isFragment=function(e){return _(e)===i},t.isLazy=function(e){return _(e)===v},t.isMemo=function(e){return _(e)===m},t.isPortal=function(e){return _(e)===o},t.isProfiler=function(e){return _(e)===s},t.isStrictMode=function(e){return _(e)===a},t.isSuspense=function(e){return _(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===s||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===l||e.$$typeof===u||e.$$typeof===d||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===g)},t.typeOf=_},1296:function(e,t,n){"use strict";e.exports=n(6103)},7418:function(e){"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var i,a,s=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var u in i=Object(arguments[l]))n.call(i,u)&&(s[u]=i[u]);if(t){a=t(i);for(var c=0;c<a.length;c++)r.call(i,a[c])&&(s[a[c]]=i[a[c]])}}return s}},2982:function(e,t,n){"use strict";var r,o,i,a=[n(5961),n(2073),n(6629),n(1994),n(1960),n(5571)],s=-1,l=[],u=!1;function c(){r&&o&&(r=!1,o.length?l=o.concat(l):s=-1,l.length&&f())}function f(){if(!r){u=!1,r=!0;for(var e=l.length,t=setTimeout(c);e;){for(o=l,l=[];o&&++s<e;)o[s].run();s=-1,e=l.length}o=null,s=-1,r=!1,clearTimeout(t)}}for(var d=-1,p=a.length;++d<p;)if(a[d]&&a[d].test&&a[d].test()){i=a[d].install(f);break}function h(e,t){this.fun=e,this.array=t}h.prototype.run=function(){var e=this.fun,t=this.array;switch(t.length){case 0:return e();case 1:return e(t[0]);case 2:return e(t[0],t[1]);case 3:return e(t[0],t[1],t[2]);default:return e.apply(null,t)}},e.exports=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new h(e,t)),u||r||(u=!0,i())}},1994:function(e,t,n){"use strict";t.test=function(){return!n.g.setImmediate&&void 0!==n.g.MessageChannel},t.install=function(e){var t=new n.g.MessageChannel;return t.port1.onmessage=e,function(){t.port2.postMessage(0)}}},6629:function(e,t,n){"use strict";var r=n.g.MutationObserver||n.g.WebKitMutationObserver;t.test=function(){return r},t.install=function(e){var t=0,o=new r(e),i=n.g.document.createTextNode("");return o.observe(i,{characterData:!0}),function(){i.data=t=++t%2}}},2073:function(e,t,n){"use strict";t.test=function(){return"function"==typeof n.g.queueMicrotask},t.install=function(e){return function(){n.g.queueMicrotask(e)}}},1960:function(e,t,n){"use strict";t.test=function(){return"document"in n.g&&"onreadystatechange"in n.g.document.createElement("script")},t.install=function(e){return function(){var t=n.g.document.createElement("script");return t.onreadystatechange=function(){e(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},n.g.document.documentElement.appendChild(t),e}}},5571:function(e,t){"use strict";t.test=function(){return!0},t.install=function(e){return function(){setTimeout(e,0)}}},2703:function(e,t,n){"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},5697:function(e,t,n){e.exports=n(2703)()},414:function(e){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:function(e,t,n){"use strict";var r=n(7294),o=n(7418),i=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,k=60106,S=60107,E=60108,P=60114,O=60109,C=60110,j=60112,T=60113,R=60120,A=60115,Z=60116,M=60121,N=60128,I=60129,L=60130,$=60131;if("function"==typeof Symbol&&Symbol.for){var D=Symbol.for;x=D("react.element"),k=D("react.portal"),S=D("react.fragment"),E=D("react.strict_mode"),P=D("react.profiler"),O=D("react.provider"),C=D("react.context"),j=D("react.forward_ref"),T=D("react.suspense"),R=D("react.suspense_list"),A=D("react.memo"),Z=D("react.lazy"),M=D("react.block"),D("react.scope"),N=D("react.opaque.id"),I=D("react.debug_trace_mode"),L=D("react.offscreen"),$=D("react.legacy_hidden")}var z,F="function"==typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=F&&e[F]||e["@@iterator"])?e:null}function q(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var W=!1;function U(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,s=i.length-1;1<=a&&0<=s&&o[a]!==i[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==i[s]){if(1!==a||1!==s)do{if(a--,0>--s||o[a]!==i[s])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?q(e):""}function V(e){switch(e.tag){case 5:return q(e.type);case 16:return q("Lazy");case 13:return q("Suspense");case 19:return q("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 22:return U(e.type._render,!1);case 1:return U(e.type,!0);default:return""}}function H(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case k:return"Portal";case P:return"Profiler";case E:return"StrictMode";case T:return"Suspense";case R:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case j:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case A:return H(e.type);case M:return H(e._render);case Z:t=e._payload,e=e._init;try{return H(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function G(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=G(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Y(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=G(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function ue(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ve=(me=function(e,t){if(e.namespaceURI!==fe.svg||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function _e(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var xe=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Pe=null,Oe=null,Ce=null;function je(e){if(e=no(e)){if("function"!=typeof Pe)throw Error(a(280));var t=e.stateNode;t&&(t=oo(t),Pe(e.stateNode,e.type,t))}}function Te(e){Oe?Ce?Ce.push(e):Ce=[e]:Oe=e}function Re(){if(Oe){var e=Oe,t=Ce;if(Ce=Oe=null,je(e),t)for(e=0;e<t.length;e++)je(t[e])}}function Ae(e,t){return e(t)}function Ze(e,t,n,r,o){return e(t,n,r,o)}function Me(){}var Ne=Ae,Ie=!1,Le=!1;function $e(){null===Oe&&null===Ce||(Me(),Re())}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var ze=!1;if(f)try{var Fe={};Object.defineProperty(Fe,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Fe,Fe),window.removeEventListener("test",Fe,Fe)}catch(me){ze=!1}function Be(e,t,n,r,o,i,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var qe=!1,We=null,Ue=!1,Ve=null,He={onError:function(e){qe=!0,We=e}};function Ke(e,t,n,r,o,i,a,s,l){qe=!1,We=null,Be.apply(He,arguments)}function Ge(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ye(e){if(Ge(e)!==e)throw Error(a(188))}function Xe(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ye(o),e;if(i===r)return Ye(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var s=!1,l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,st=null,lt=null,ut=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=to(e.target);if(null!==t){var n=Ge(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Qe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&gt(at)&&(at=null),null!==st&&gt(st)&&(st=null),null!==lt&&gt(lt)&&(lt=null),ut.forEach(yt),ct.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function _t(e){function t(t){return wt(t,e)}if(0<it.length){wt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&wt(at,e),null!==st&&wt(st,e),null!==lt&&wt(lt,e),ut.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function xt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},St={},Et={};function Pt(e){if(St[e])return St[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Et)return St[e]=n[t];return e}f&&(Et=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Ot=Pt("animationend"),Ct=Pt("animationiteration"),jt=Pt("animationstart"),Tt=Pt("transitionend"),Rt=new Map,At=new Map,Zt=["abort","abort",Ot,"animationEnd",Ct,"animationIteration",jt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tt,"transitionEnd","waiting","waiting"];function Mt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),At.set(r,t),Rt.set(r,o),u(o,[r])}}(0,i.unstable_now)();var Nt=8;function It(e){if(0!=(1&e))return Nt=15,1;if(0!=(2&e))return Nt=14,2;if(0!=(4&e))return Nt=13,4;var t=24&e;return 0!==t?(Nt=12,t):0!=(32&e)?(Nt=11,32):0!=(t=192&e)?(Nt=10,t):0!=(256&e)?(Nt=9,256):0!=(t=3584&e)?(Nt=8,t):0!=(4096&e)?(Nt=7,4096):0!=(t=4186112&e)?(Nt=6,t):0!=(t=62914560&e)?(Nt=5,t):67108864&e?(Nt=4,67108864):0!=(134217728&e)?(Nt=3,134217728):0!=(t=805306368&e)?(Nt=2,t):0!=(1073741824&e)?(Nt=1,1073741824):(Nt=8,e)}function Lt(e,t){var n=e.pendingLanes;if(0===n)return Nt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==i)r=i,o=Nt=15;else if(0!=(i=134217727&n)){var l=i&~a;0!==l?(r=It(l),o=Nt):0!=(s&=i)&&(r=It(s),o=Nt)}else 0!=(i=n&~a)?(r=It(i),o=Nt):0!==s&&(r=It(s),o=Nt);if(0===r)return 0;if(r=n&((0>(r=31-qt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(It(t),o<=Nt)return t;Nt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-qt(t)),r|=e[n],t&=~o;return r}function $t(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Dt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=zt(24&~t))?Dt(10,t):e;case 10:return 0===(e=zt(192&~t))?Dt(8,t):e;case 8:return 0===(e=zt(3584&~t))&&0===(e=zt(4186112&~t))&&(e=512),e;case 2:return 0===(t=zt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function zt(e){return e&-e}function Ft(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Bt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-qt(t)]=n}var qt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Ut|0)|0},Wt=Math.log,Ut=Math.LN2,Vt=i.unstable_UserBlockingPriority,Ht=i.unstable_runWithPriority,Kt=!0;function Gt(e,t,n,r){Ie||Me();var o=Yt,i=Ie;Ie=!0;try{Ze(o,e,t,n,r)}finally{(Ie=i)||$e()}}function Qt(e,t,n,r){Ht(Vt,Yt.bind(null,e,t,n,r))}function Yt(e,t,n,r){var o;if(Kt)if((o=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Xt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=mt(at,e,t,n,r,o),!0;case"dragenter":return st=mt(st,e,t,n,r,o),!0;case"mouseover":return lt=mt(lt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return ut.set(i,mt(ut.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,mt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Mr(e,t,r,null,n)}}}function Xt(e,t,n,r){var o=Ee(r);if(null!==(o=to(o))){var i=Ge(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Qe(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Mr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,un,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=sn(fn),pn=o({},fn,{view:0,detail:0}),hn=sn(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),vn=sn(mn),gn=sn(o({},mn,{dataTransfer:0})),yn=sn(o({},pn,{relatedTarget:0})),bn=sn(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),_n=sn(wn),xn=sn(o({},fn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function On(){return Pn}var Cn=o({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),jn=sn(Cn),Tn=sn(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Rn=sn(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),An=sn(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Zn=o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Mn=sn(Zn),Nn=[9,13,27,32],In=f&&"CompositionEvent"in window,Ln=null;f&&"documentMode"in document&&(Ln=document.documentMode);var $n=f&&"TextEvent"in window&&!Ln,Dn=f&&(!In||Ln&&8<Ln&&11>=Ln),zn=String.fromCharCode(32),Fn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==Nn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function qn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Hn(e,t,n,r){Te(r),0<(t=Ir(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Kn=null,Gn=null;function Qn(e){Cr(e,0)}function Yn(e){if(Y(ro(e)))return e}function Xn(e,t){if("change"===e)return t}var Jn=!1;if(f){var er;if(f){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){Kn&&(Kn.detachEvent("onpropertychange",or),Gn=Kn=null)}function or(e){if("value"===e.propertyName&&Yn(Gn)){var t=[];if(Hn(t,Gn,e,Ee(e)),e=Qn,Ie)e(t);else{Ie=!0;try{Ae(e,t)}finally{Ie=!1,$e()}}}}function ir(e,t,n){"focusin"===e?(rr(),Gn=n,(Kn=t).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Gn)}function sr(e,t){if("click"===e)return Yn(t)}function lr(e,t){if("input"===e||"change"===e)return Yn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function fr(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!ur(e[n[r]],t[n[r]]))return!1;return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pr(e,t){var n,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function vr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gr=f&&"documentMode"in document&&11>=document.documentMode,yr=null,br=null,wr=null,_r=!1;function xr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;_r||null==yr||yr!==X(r)||(r="selectionStart"in(r=yr)&&vr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},wr&&fr(wr,r)||(wr=r,0<(r=Ir(br,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}Mt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Mt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Mt(Zt,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sr=0;Sr<kr.length;Sr++)At.set(kr[Sr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Er="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Pr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Er));function Or(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,s,l,u){if(Ke.apply(this,arguments),qe){if(!qe)throw Error(a(198));var c=We;qe=!1,We=null,Ue||(Ue=!0,Ve=c)}}(r,t,void 0,e),e.currentTarget=null}function Cr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==i&&o.isPropagationStopped())break e;Or(o,s,u),i=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,u=s.currentTarget,s=s.listener,l!==i&&o.isPropagationStopped())break e;Or(o,s,u),i=l}}}if(Ue)throw e=Ve,Ue=!1,Ve=null,e}function jr(e,t){var n=io(t),r=e+"__bubble";n.has(r)||(Zr(t,e,2,!1),n.add(r))}var Tr="_reactListening"+Math.random().toString(36).slice(2);function Rr(e){e[Tr]||(e[Tr]=!0,s.forEach((function(t){Pr.has(t)||Ar(t,!1,e,null),Ar(t,!0,e,null)})))}function Ar(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Pr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=io(i),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(o|=4),Zr(i,e,o,t),a.add(s))}function Zr(e,t,n,r){var o=At.get(t);switch(void 0===o?2:o){case 0:o=Gt;break;case 1:o=Qt;break;default:o=Yt}n=o.bind(null,t,n,e),o=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Mr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==s;){if(null===(a=to(s)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(Le)return e();Le=!0;try{return Ne(e,t,n)}finally{Le=!1,$e()}}((function(){var r=i,o=Ee(n),a=[];e:{var s=Rt.get(e);if(void 0!==s){var l=dn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=jn;break;case"focusin":u="focus",l=yn;break;case"focusout":u="blur",l=yn;break;case"beforeblur":case"afterblur":l=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Rn;break;case Ot:case Ct:case jt:l=bn;break;case Tt:l=An;break;case"scroll":l=hn;break;case"wheel":l=Mn;break;case"copy":case"cut":case"paste":l=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Tn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==s?s+"Capture":null:s;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=De(h,d))&&c.push(Nr(h,m,p))),f)break;h=h.return}0<c.length&&(s=new l(s,u,null,n,o),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!to(u)&&!u[Jr])&&(l||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?to(u):null)&&(u!==(f=Ge(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Tn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?s:ro(l),p=null==u?s:ro(u),(s=new c(m,h+"leave",l,n,o)).target=f,s.relatedTarget=p,m=null,to(o)===r&&((c=new c(d,h+"enter",u,n,o)).target=p,c.relatedTarget=f,m=c),f=m,l&&u)e:{for(d=u,h=0,p=c=l;p;p=Lr(p))h++;for(p=0,m=d;m;m=Lr(m))p++;for(;0<h-p;)c=Lr(c),h--;for(;0<p-h;)d=Lr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Lr(c),d=Lr(d)}c=null}else c=null;null!==l&&$r(a,s,l,c,!1),null!==u&&null!==f&&$r(a,f,u,c,!0)}if("select"===(l=(s=r?ro(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var v=Xn;else if(Vn(s))if(Jn)v=lr;else{v=ar;var g=ir}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(v=sr);switch(v&&(v=v(e,r))?Hn(a,v,n,o):(g&&g(e,s,r),"focusout"===e&&(g=s._wrapperState)&&g.controlled&&"number"===s.type&&oe(s,"number",s.value)),g=r?ro(r):window,e){case"focusin":(Vn(g)||"true"===g.contentEditable)&&(yr=g,br=r,wr=null);break;case"focusout":wr=br=yr=null;break;case"mousedown":_r=!0;break;case"contextmenu":case"mouseup":case"dragend":_r=!1,xr(a,n,o);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":xr(a,n,o)}var y;if(In)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(y=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Wn=!0)),0<(g=Ir(r,b)).length&&(b=new xn(b,e,null,n,o),a.push({event:b,listeners:g}),(y||null!==(y=qn(n)))&&(b.data=y))),(y=$n?function(e,t){switch(e){case"compositionend":return qn(t);case"keypress":return 32!==t.which?null:(Fn=!0,zn);case"textInput":return(e=t.data)===zn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!In&&Bn(e,t)?(e=nn(),tn=en=Jt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Ir(r,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y)}Cr(a,t)}))}function Nr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ir(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=De(e,n))&&r.unshift(Nr(e,i,o)),null!=(i=De(e,t))&&r.push(Nr(e,i,o))),e=e.return}return r}function Lr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function $r(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,o?null!=(l=De(n,i))&&a.unshift(Nr(n,l,s)):o||null!=(l=De(n,i))&&a.push(Nr(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Dr(){}var zr=null,Fr=null;function Br(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function qr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wr="function"==typeof setTimeout?setTimeout:void 0,Ur="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Hr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Kr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Gr=0,Qr=Math.random().toString(36).slice(2),Yr="__reactFiber$"+Qr,Xr="__reactProps$"+Qr,Jr="__reactContainer$"+Qr,eo="__reactEvents$"+Qr;function to(e){var t=e[Yr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Yr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Kr(e);null!==e;){if(n=e[Yr])return n;e=Kr(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Yr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function oo(e){return e[Xr]||null}function io(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var ao=[],so=-1;function lo(e){return{current:e}}function uo(e){0>so||(e.current=ao[so],ao[so]=null,so--)}function co(e,t){so++,ao[so]=e.current,e.current=t}var fo={},po=lo(fo),ho=lo(!1),mo=fo;function vo(e,t){var n=e.type.contextTypes;if(!n)return fo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function go(e){return null!=e.childContextTypes}function yo(){uo(ho),uo(po)}function bo(e,t,n){if(po.current!==fo)throw Error(a(168));co(po,t),co(ho,n)}function wo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,H(t)||"Unknown",i));return o({},n,r)}function _o(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||fo,mo=po.current,co(po,e),co(ho,ho.current),!0}function xo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=wo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,uo(ho),uo(po),co(po,e)):uo(ho),co(ho,n)}var ko=null,So=null,Eo=i.unstable_runWithPriority,Po=i.unstable_scheduleCallback,Oo=i.unstable_cancelCallback,Co=i.unstable_shouldYield,jo=i.unstable_requestPaint,To=i.unstable_now,Ro=i.unstable_getCurrentPriorityLevel,Ao=i.unstable_ImmediatePriority,Zo=i.unstable_UserBlockingPriority,Mo=i.unstable_NormalPriority,No=i.unstable_LowPriority,Io=i.unstable_IdlePriority,Lo={},$o=void 0!==jo?jo:function(){},Do=null,zo=null,Fo=!1,Bo=To(),qo=1e4>Bo?To:function(){return To()-Bo};function Wo(){switch(Ro()){case Ao:return 99;case Zo:return 98;case Mo:return 97;case No:return 96;case Io:return 95;default:throw Error(a(332))}}function Uo(e){switch(e){case 99:return Ao;case 98:return Zo;case 97:return Mo;case 96:return No;case 95:return Io;default:throw Error(a(332))}}function Vo(e,t){return e=Uo(e),Eo(e,t)}function Ho(e,t,n){return e=Uo(e),Po(e,t,n)}function Ko(){if(null!==zo){var e=zo;zo=null,Oo(e)}Go()}function Go(){if(!Fo&&null!==Do){Fo=!0;var e=0;try{var t=Do;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),Po(Ao,Ko),t}finally{Fo=!1}}}var Qo=_.ReactCurrentBatchConfig;function Yo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Xo=lo(null),Jo=null,ei=null,ti=null;function ni(){ti=ei=Jo=null}function ri(e){var t=Xo.current;uo(Xo),e.type._context._currentValue=t}function oi(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ii(e,t){Jo=e,ti=ei=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ia=!0),e.firstContext=null)}function ai(e,t){if(ti!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ti=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ei){if(null===Jo)throw Error(a(308));ei=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else ei=ei.next=t;return e._currentValue}var si=!1;function li(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ui(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ci(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function fi(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function di(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function pi(e,t,n,r){var i=e.updateQueue;si=!1;var a=i.firstBaseUpdate,s=i.lastBaseUpdate,l=i.shared.pending;if(null!==l){i.shared.pending=null;var u=l,c=u.next;u.next=null,null===s?a=c:s.next=c,s=u;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==s&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=u)}}if(null!==a){for(d=i.baseState,s=0,f=c=u=null;;){l=a.lane;var p=a.eventTime;if((r&l)===l){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(l=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,l);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=m.payload)?h.call(p,d,l):h))break e;d=o({},d,l);break e;case 2:si=!0}}null!==a.callback&&(e.flags|=32,null===(l=i.effects)?i.effects=[a]:l.push(a))}else p={eventTime:p,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,u=d):f=f.next=p,s|=l;if(null===(a=a.next)){if(null===(l=i.shared.pending))break;a=l.next,l.next=null,i.lastBaseUpdate=l,i.shared.pending=null}}null===f&&(u=d),i.baseState=u,i.firstBaseUpdate=c,i.lastBaseUpdate=f,Ds|=s,e.lanes=s,e.memoizedState=d}}function hi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var mi=(new r.Component).refs;function vi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var gi={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=cl(),o=fl(e),i=ci(r,o);i.payload=t,null!=n&&(i.callback=n),fi(e,i),dl(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=cl(),o=fl(e),i=ci(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),fi(e,i),dl(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=cl(),r=fl(e),o=ci(n,r);o.tag=2,null!=t&&(o.callback=t),fi(e,o),dl(e,r,n)}};function yi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&fr(n,r)&&fr(o,i))}function bi(e,t,n){var r=!1,o=fo,i=t.contextType;return"object"==typeof i&&null!==i?i=ai(i):(o=go(t)?mo:po.current,i=(r=null!=(r=t.contextTypes))?vo(e,o):fo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=gi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function wi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&gi.enqueueReplaceState(t,t.state,null)}function _i(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=mi,li(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ai(i):(i=go(t)?mo:po.current,o.context=vo(e,i)),pi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(vi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&gi.enqueueReplaceState(o,o.state,null),pi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var xi=Array.isArray;function ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Si(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ei(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Wl(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Kl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ki(e,t,n),r.return=e,r):((r=Ul(n.type,n.key,n.props,null,e.mode,r)).ref=ki(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Gl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Vl(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Kl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Ul(t.type,t.key,t.props,null,e.mode,n)).ref=ki(e,null,t),n.return=e,n;case k:return(t=Gl(t,e.mode,n)).return=e,t}if(xi(t)||B(t))return(t=Vl(t,e.mode,n,null)).return=e,t;Si(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?n.type===S?f(e,t,n.props.children,r,o):u(e,t,n,r):null;case k:return n.key===o?c(e,t,n,r):null}if(xi(n)||B(n))return null!==o?null:f(e,t,n,r,null);Si(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return e=e.get(null===r.key?n:r.key)||null,r.type===S?f(t,e,r.props.children,o,r.key):u(t,e,r,o);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(xi(r)||B(r))return f(t,e=e.get(n)||null,r,o,null);Si(t,r)}return null}function m(o,a,s,l){for(var u=null,c=null,f=a,m=a=0,v=null;null!==f&&m<s.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,s[m],l);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),a=i(g,a,m),null===c?u=g:c.sibling=g,c=g,f=v}if(m===s.length)return n(o,f),u;if(null===f){for(;m<s.length;m++)null!==(f=d(o,s[m],l))&&(a=i(f,a,m),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(o,f);m<s.length;m++)null!==(v=h(f,o,m,s[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?u=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),u}function v(o,s,l,u){var c=B(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var f=c=null,m=s,v=s=0,g=null,y=l.next();null!==m&&!y.done;v++,y=l.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,u);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),s=i(b,s,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;v++,y=l.next())null!==(y=d(o,y.value,u))&&(s=i(y,s,v),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;v++,y=l.next())null!==(y=h(m,o,v,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),s=i(y,s,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,l){var u="object"==typeof i&&null!==i&&i.type===S&&null===i.key;u&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case x:e:{for(c=i.key,u=r;null!==u;){if(u.key===c){if(7===u.tag){if(i.type===S){n(e,u.sibling),(r=o(u,i.props.children)).return=e,e=r;break e}}else if(u.elementType===i.type){n(e,u.sibling),(r=o(u,i.props)).ref=ki(e,u,i),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===S?((r=Vl(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Ul(i.type,i.key,i.props,null,e.mode,l)).ref=ki(e,r,i),l.return=e,e=l)}return s(e);case k:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Gl(i,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Kl(i,e.mode,l)).return=e,e=r),s(e);if(xi(i))return m(e,r,i,l);if(B(i))return v(e,r,i,l);if(c&&Si(e,i),void 0===i&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,H(e.type)||"Component"))}return n(e,r)}}var Pi=Ei(!0),Oi=Ei(!1),Ci={},ji=lo(Ci),Ti=lo(Ci),Ri=lo(Ci);function Ai(e){if(e===Ci)throw Error(a(174));return e}function Zi(e,t){switch(co(Ri,t),co(Ti,e),co(ji,Ci),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(ji),co(ji,t)}function Mi(){uo(ji),uo(Ti),uo(Ri)}function Ni(e){Ai(Ri.current);var t=Ai(ji.current),n=pe(t,e.type);t!==n&&(co(Ti,e),co(ji,n))}function Ii(e){Ti.current===e&&(uo(ji),uo(Ti))}var Li=lo(0);function $i(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Di=null,zi=null,Fi=!1;function Bi(e,t){var n=Bl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function qi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Wi(e){if(Fi){var t=zi;if(t){var n=t;if(!qi(e,t)){if(!(t=Hr(n.nextSibling))||!qi(e,t))return e.flags=-1025&e.flags|2,Fi=!1,void(Di=e);Bi(Di,n)}Di=e,zi=Hr(t.firstChild)}else e.flags=-1025&e.flags|2,Fi=!1,Di=e}}function Ui(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Di=e}function Vi(e){if(e!==Di)return!1;if(!Fi)return Ui(e),Fi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!qr(t,e.memoizedProps))for(t=zi;t;)Bi(e,t),t=Hr(t.nextSibling);if(Ui(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){zi=Hr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}zi=null}}else zi=Di?Hr(e.stateNode.nextSibling):null;return!0}function Hi(){zi=Di=null,Fi=!1}var Ki=[];function Gi(){for(var e=0;e<Ki.length;e++)Ki[e]._workInProgressVersionPrimary=null;Ki.length=0}var Qi=_.ReactCurrentDispatcher,Yi=_.ReactCurrentBatchConfig,Xi=0,Ji=null,ea=null,ta=null,na=!1,ra=!1;function oa(){throw Error(a(321))}function ia(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function aa(e,t,n,r,o,i){if(Xi=i,Ji=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qi.current=null===e||null===e.memoizedState?Aa:Za,e=n(r,o),ra){i=0;do{if(ra=!1,!(25>i))throw Error(a(301));i+=1,ta=ea=null,t.updateQueue=null,Qi.current=Ma,e=n(r,o)}while(ra)}if(Qi.current=Ra,t=null!==ea&&null!==ea.next,Xi=0,ta=ea=Ji=null,na=!1,t)throw Error(a(300));return e}function sa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Ji.memoizedState=ta=e:ta=ta.next=e,ta}function la(){if(null===ea){var e=Ji.alternate;e=null!==e?e.memoizedState:null}else e=ea.next;var t=null===ta?Ji.memoizedState:ta.next;if(null!==t)ta=t,ea=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ea=e).memoizedState,baseState:ea.baseState,baseQueue:ea.baseQueue,queue:ea.queue,next:null},null===ta?Ji.memoizedState=ta=e:ta=ta.next=e}return ta}function ua(e,t){return"function"==typeof t?t(e):t}function ca(e){var t=la(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ea,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var s=o.next;o.next=i.next,i.next=s}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=s=i=null,u=o;do{var c=u.lane;if((Xi&c)===c)null!==l&&(l=l.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var f={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(s=l=f,i=r):l=l.next=f,Ji.lanes|=c,Ds|=c}u=u.next}while(null!==u&&u!==o);null===l?i=r:l.next=s,ur(r,t.memoizedState)||(Ia=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function fa(e){var t=la(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{i=e(i,s.action),s=s.next}while(s!==o);ur(i,t.memoizedState)||(Ia=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function da(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Xi&e)===e)&&(t._workInProgressVersionPrimary=r,Ki.push(t))),e)return n(t._source);throw Ki.push(t),Error(a(350))}function pa(e,t,n,r){var o=Rs;if(null===o)throw Error(a(349));var i=t._getVersion,s=i(t._source),l=Qi.current,u=l.useState((function(){return da(o,t,n)})),c=u[1],f=u[0];u=ta;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Ji;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!ur(s,e)){e=n(t._source),ur(f,e)||(c(e),e=fl(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var l=31-qt(a),u=1<<l;r[l]|=e,a&=~u}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=fl(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ur(h,n)&&ur(m,t)&&ur(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:f}).dispatch=c=Ta.bind(null,Ji,e),u.queue=e,u.baseQueue=null,f=da(o,t,n),u.memoizedState=u.baseState=f),f}function ha(e,t,n){return pa(la(),e,t,n)}function ma(e){var t=sa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:e}).dispatch=Ta.bind(null,Ji,e),[t.memoizedState,e]}function va(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ji.updateQueue)?(t={lastEffect:null},Ji.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ga(e){return e={current:e},sa().memoizedState=e}function ya(){return la().memoizedState}function ba(e,t,n,r){var o=sa();Ji.flags|=e,o.memoizedState=va(1|t,n,void 0,void 0===r?null:r)}function wa(e,t,n,r){var o=la();r=void 0===r?null:r;var i=void 0;if(null!==ea){var a=ea.memoizedState;if(i=a.destroy,null!==r&&ia(r,a.deps))return void va(t,n,i,r)}Ji.flags|=e,o.memoizedState=va(1|t,n,i,r)}function _a(e,t){return ba(516,4,e,t)}function xa(e,t){return wa(516,4,e,t)}function ka(e,t){return wa(4,2,e,t)}function Sa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ea(e,t,n){return n=null!=n?n.concat([e]):null,wa(4,2,Sa.bind(null,t,e),n)}function Pa(){}function Oa(e,t){var n=la();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ca(e,t){var n=la();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ja(e,t){var n=Wo();Vo(98>n?98:n,(function(){e(!0)})),Vo(97<n?97:n,(function(){var n=Yi.transition;Yi.transition=1;try{e(!1),t()}finally{Yi.transition=n}}))}function Ta(e,t,n){var r=cl(),o=fl(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Ji||null!==a&&a===Ji)ra=na=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=a(s,n);if(i.eagerReducer=a,i.eagerState=l,ur(l,s))return}catch(e){}dl(e,o,r)}}var Ra={readContext:ai,useCallback:oa,useContext:oa,useEffect:oa,useImperativeHandle:oa,useLayoutEffect:oa,useMemo:oa,useReducer:oa,useRef:oa,useState:oa,useDebugValue:oa,useDeferredValue:oa,useTransition:oa,useMutableSource:oa,useOpaqueIdentifier:oa,unstable_isNewReconciler:!1},Aa={readContext:ai,useCallback:function(e,t){return sa().memoizedState=[e,void 0===t?null:t],e},useContext:ai,useEffect:_a,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ba(4,2,Sa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ba(4,2,e,t)},useMemo:function(e,t){var n=sa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=sa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ta.bind(null,Ji,e),[r.memoizedState,e]},useRef:ga,useState:ma,useDebugValue:Pa,useDeferredValue:function(e){var t=ma(e),n=t[0],r=t[1];return _a((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=ma(!1),t=e[0];return ga(e=ja.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=sa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},pa(r,e,t,n)},useOpaqueIdentifier:function(){if(Fi){var e=!1,t=function(e){return{$$typeof:N,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Gr++).toString(36))),Error(a(355))})),n=ma(t)[1];return 0==(2&Ji.mode)&&(Ji.flags|=516,va(5,(function(){n("r:"+(Gr++).toString(36))}),void 0,null)),t}return ma(t="r:"+(Gr++).toString(36)),t},unstable_isNewReconciler:!1},Za={readContext:ai,useCallback:Oa,useContext:ai,useEffect:xa,useImperativeHandle:Ea,useLayoutEffect:ka,useMemo:Ca,useReducer:ca,useRef:ya,useState:function(){return ca(ua)},useDebugValue:Pa,useDeferredValue:function(e){var t=ca(ua),n=t[0],r=t[1];return xa((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=ca(ua)[0];return[ya().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return ca(ua)[0]},unstable_isNewReconciler:!1},Ma={readContext:ai,useCallback:Oa,useContext:ai,useEffect:xa,useImperativeHandle:Ea,useLayoutEffect:ka,useMemo:Ca,useReducer:fa,useRef:ya,useState:function(){return fa(ua)},useDebugValue:Pa,useDeferredValue:function(e){var t=fa(ua),n=t[0],r=t[1];return xa((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=fa(ua)[0];return[ya().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return fa(ua)[0]},unstable_isNewReconciler:!1},Na=_.ReactCurrentOwner,Ia=!1;function La(e,t,n,r){t.child=null===e?Oi(t,null,n,r):Pi(t,e.child,n,r)}function $a(e,t,n,r,o){n=n.render;var i=t.ref;return ii(t,o),r=aa(e,t,n,r,i,o),null===e||Ia?(t.flags|=1,La(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,rs(e,t,o))}function Da(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||ql(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ul(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,za(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:fr)(o,r)&&e.ref===t.ref)?rs(e,t,i):(t.flags|=1,(e=Wl(a,r)).ref=t.ref,e.return=t,t.child=e)}function za(e,t,n,r,o,i){if(null!==e&&fr(e.memoizedProps,r)&&e.ref===t.ref){if(Ia=!1,0==(i&o))return t.lanes=e.lanes,rs(e,t,i);0!=(16384&e.flags)&&(Ia=!0)}return qa(e,t,n,r,i)}function Fa(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},wl(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},wl(0,e),null;t.memoizedState={baseLanes:0},wl(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,wl(0,r);return La(e,t,o,n),t.child}function Ba(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function qa(e,t,n,r,o){var i=go(n)?mo:po.current;return i=vo(t,i),ii(t,o),n=aa(e,t,n,r,i,o),null===e||Ia?(t.flags|=1,La(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,rs(e,t,o))}function Wa(e,t,n,r,o){if(go(n)){var i=!0;_o(t)}else i=!1;if(ii(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),bi(t,n,r),_i(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;u="object"==typeof u&&null!==u?ai(u):vo(t,u=go(n)?mo:po.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==u)&&wi(t,a,r,u),si=!1;var d=t.memoizedState;a.state=d,pi(t,r,a,o),l=t.memoizedState,s!==r||d!==l||ho.current||si?("function"==typeof c&&(vi(t,n,c,r),l=t.memoizedState),(s=si||yi(t,n,s,r,d,l,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=u,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ui(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:Yo(t.type,s),a.props=u,f=t.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?ai(l):vo(t,l=go(n)?mo:po.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==f||d!==l)&&wi(t,a,r,l),si=!1,d=t.memoizedState,a.state=d,pi(t,r,a,o);var h=t.memoizedState;s!==f||d!==h||ho.current||si?("function"==typeof p&&(vi(t,n,p,r),h=t.memoizedState),(u=si||yi(t,n,u,r,d,h,l))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Ua(e,t,n,r,i,o)}function Ua(e,t,n,r,o,i){Ba(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&xo(t,n,!1),rs(e,t,i);r=t.stateNode,Na.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Pi(t,e.child,null,i),t.child=Pi(t,null,s,i)):La(e,t,s,i),t.memoizedState=r.state,o&&xo(t,n,!0),t.child}function Va(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),Zi(e,t.containerInfo)}var Ha,Ka,Ga,Qa,Ya={dehydrated:null,retryLane:0};function Xa(e,t,n){var r,o=t.pendingProps,i=Li.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),co(Li,1&i),null===e?(void 0!==o.fallback&&Wi(t),e=o.children,i=o.fallback,a?(e=Ja(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ya,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ja(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ya,t.lanes=33554432,e):((n=Hl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Wl(a,s),null!==e?r=Wl(e,r):(r=Vl(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Ya,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Wl(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ja(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Hl(t,o,0,null),n=Vl(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function es(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oi(e.return,t)}function ts(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function ns(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(La(e,t,r.children,n),0!=(2&(r=Li.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&es(e,n);else if(19===e.tag)es(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Li,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===$i(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),ts(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===$i(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}ts(t,!0,n,null,i,t.lastEffect);break;case"together":ts(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function rs(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ds|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Wl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Wl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function os(e,t){if(!Fi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function is(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return go(t.type)&&yo(),null;case 3:return Mi(),uo(ho),uo(po),Gi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),Ka(t),null;case 5:Ii(t);var i=Ai(Ri.current);if(n=t.type,null!==e&&null!=t.stateNode)Ga(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ai(ji.current),Vi(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Yr]=t,r[Xr]=s,n){case"dialog":jr("cancel",r),jr("close",r);break;case"iframe":case"object":case"embed":jr("load",r);break;case"video":case"audio":for(e=0;e<Er.length;e++)jr(Er[e],r);break;case"source":jr("error",r);break;case"img":case"image":case"link":jr("error",r),jr("load",r);break;case"details":jr("toggle",r);break;case"input":ee(r,s),jr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},jr("invalid",r);break;case"textarea":le(r,s),jr("invalid",r)}for(var u in ke(n,s),e=null,s)s.hasOwnProperty(u)&&(i=s[u],"children"===u?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):l.hasOwnProperty(u)&&null!=i&&"onScroll"===u&&jr("scroll",r));switch(n){case"input":Q(r),re(r,s,!0);break;case"textarea":Q(r),ce(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Dr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===i.nodeType?i:i.ownerDocument,e===fe.html&&(e=de(n)),e===fe.html?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Yr]=t,e[Xr]=r,Ha(e,t,!1,!1),t.stateNode=e,u=Se(n,r),n){case"dialog":jr("cancel",e),jr("close",e),i=r;break;case"iframe":case"object":case"embed":jr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Er.length;i++)jr(Er[i],e);i=r;break;case"source":jr("error",e),i=r;break;case"img":case"image":case"link":jr("error",e),jr("load",e),i=r;break;case"details":jr("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),jr("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),jr("invalid",e);break;case"textarea":le(e,r),i=se(e,r),jr("invalid",e);break;default:i=r}ke(n,i);var c=i;for(s in c)if(c.hasOwnProperty(s)){var f=c[s];"style"===s?_e(e,f):"dangerouslySetInnerHTML"===s?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===s?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=f&&"onScroll"===s&&jr("scroll",e):null!=f&&w(e,s,f,u))}switch(n){case"input":Q(e),re(e,r,!1);break;case"textarea":Q(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ae(e,!!r.multiple,s,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Dr)}Br(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Qa(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ai(Ri.current),Ai(ji.current),Vi(t)?(r=t.stateNode,n=t.memoizedProps,r[Yr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Yr]=t,t.stateNode=r)}return null;case 13:return uo(Li),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Li.current)?0===Is&&(Is=3):(0!==Is&&3!==Is||(Is=4),null===Rs||0==(134217727&Ds)&&0==(134217727&zs)||vl(Rs,Zs))),(r||n)&&(t.flags|=4),null);case 4:return Mi(),Ka(t),null===e&&Rr(t.stateNode.containerInfo),null;case 10:return ri(t),null;case 19:if(uo(Li),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(u=r.rendering))if(s)os(r,!1);else{if(0!==Is||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=$i(e))){for(t.flags|=64,os(r,!1),null!==(s=u.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(u=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=u.childLanes,s.lanes=u.lanes,s.child=u.child,s.memoizedProps=u.memoizedProps,s.memoizedState=u.memoizedState,s.updateQueue=u.updateQueue,s.type=u.type,e=u.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return co(Li,1&Li.current|2),t.child}e=e.sibling}null!==r.tail&&qo()>Ws&&(t.flags|=64,s=!0,os(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=$i(u))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),os(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Fi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*qo()-r.renderingStartTime>Ws&&1073741824!==n&&(t.flags|=64,s=!0,os(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=qo(),n.sibling=null,t=Li.current,co(Li,s?1&t|2:1&t),n):null;case 23:case 24:return _l(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function as(e){switch(e.tag){case 1:go(e.type)&&yo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Mi(),uo(ho),uo(po),Gi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Ii(e),null;case 13:return uo(Li),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return uo(Li),null;case 4:return Mi(),null;case 10:return ri(e),null;case 23:case 24:return _l(),null;default:return null}}function ss(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ls(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ha=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ka=function(){},Ga=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Ai(ji.current);var a,s=null;switch(n){case"input":i=J(e,i),r=J(e,r),s=[];break;case"option":i=ie(e,i),r=ie(e,r),s=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),s=[];break;case"textarea":i=se(e,i),r=se(e,r),s=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Dr)}for(f in ke(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var u=i[f];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?s||(s=[]):(s=s||[]).push(f,null));for(f in r){var c=r[f];if(u=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&c!==u&&(null!=c||null!=u))if("style"===f)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(s||(s=[]),s.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&jr("scroll",e),s||u===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===N?c.toString():(s=s||[]).push(f,c))}n&&(s=s||[]).push("style",n);var f=s;(t.updateQueue=f)&&(t.flags|=4)}},Qa=function(e,t,n,r){n!==r&&(t.flags|=4)};var us="function"==typeof WeakMap?WeakMap:Map;function cs(e,t,n){(n=ci(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ks||(Ks=!0,Gs=r),ls(0,t)},n}function fs(e,t,n){(n=ci(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ls(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Qs?Qs=new Set([this]):Qs.add(this),ls(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ds="function"==typeof WeakSet?WeakSet:Set;function ps(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){$l(e,t)}else t.current=null}function hs(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo))}throw Error(a(163))}function ms(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Nl(n,e),Ml(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Yo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&hi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}hi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Br(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_t(n)))))}throw Error(a(163))}function vs(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function gs(e,t){if(So&&"function"==typeof So.onCommitFiberUnmount)try{So.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Nl(t,n);else{r=t;try{o()}catch(e){$l(r,e)}}n=n.next}while(n!==e)}break;case 1:if(ps(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){$l(t,e)}break;case 5:ps(t);break;case 4:ks(e,t)}}function ys(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function bs(e){return 5===e.tag||3===e.tag||4===e.tag}function ws(e){e:{for(var t=e.return;null!==t;){if(bs(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||bs(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?_s(e,n,t):xs(e,n,t)}function _s(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Dr));else if(4!==r&&null!==(e=e.child))for(_s(e,t,n),e=e.sibling;null!==e;)_s(e,t,n),e=e.sibling}function xs(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(xs(e,t,n),e=e.sibling;null!==e;)xs(e,t,n),e=e.sibling}function ks(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var s=e,l=o,u=l;;)if(gs(s,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===l)break e;for(;null===u.sibling;){if(null===u.return||u.return===l)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(s=n,l=o.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(gs(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function Ss(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Xr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,o),t=Se(e,r),o=0;o<i.length;o+=2){var s=i[o],l=i[o+1];"style"===s?_e(n,l):"dangerouslySetInnerHTML"===s?ve(n,l):"children"===s?ge(n,l):w(n,s,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,_t(n.containerInfo)));case 13:return null!==t.memoizedState&&(qs=qo(),vs(t.child,!0)),void Es(t);case 19:return void Es(t);case 23:case 24:return void vs(t,null!==t.memoizedState)}throw Error(a(163))}function Es(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ds),t.forEach((function(t){var r=zl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Ps(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Os=Math.ceil,Cs=_.ReactCurrentDispatcher,js=_.ReactCurrentOwner,Ts=0,Rs=null,As=null,Zs=0,Ms=0,Ns=lo(0),Is=0,Ls=null,$s=0,Ds=0,zs=0,Fs=0,Bs=null,qs=0,Ws=1/0;function Us(){Ws=qo()+500}var Vs,Hs=null,Ks=!1,Gs=null,Qs=null,Ys=!1,Xs=null,Js=90,el=[],tl=[],nl=null,rl=0,ol=null,il=-1,al=0,sl=0,ll=null,ul=!1;function cl(){return 0!=(48&Ts)?qo():-1!==il?il:il=qo()}function fl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Wo()?1:2;if(0===al&&(al=$s),0!==Qo.transition){0!==sl&&(sl=null!==Bs?Bs.pendingLanes:0),e=al;var t=4186112&~sl;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Wo(),e=Dt(0!=(4&Ts)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),al)}function dl(e,t,n){if(50<rl)throw rl=0,ol=null,Error(a(185));if(null===(e=pl(e,t)))return null;Bt(e,t,n),e===Rs&&(zs|=t,4===Is&&vl(e,Zs));var r=Wo();1===t?0!=(8&Ts)&&0==(48&Ts)?gl(e):(hl(e,n),0===Ts&&(Us(),Ko())):(0==(4&Ts)||98!==r&&99!==r||(null===nl?nl=new Set([e]):nl.add(e)),hl(e,n)),Bs=e}function pl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function hl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-qt(s),u=1<<l,c=i[l];if(-1===c){if(0==(u&r)||0!=(u&o)){c=t,It(u);var f=Nt;i[l]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);s&=~u}if(r=Lt(e,e===Rs?Zs:0),t=Nt,0===r)null!==n&&(n!==Lo&&Oo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Lo&&Oo(n)}15===t?(n=gl.bind(null,e),null===Do?(Do=[n],zo=Po(Ao,Go)):Do.push(n),n=Lo):14===t?n=Ho(99,gl.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),n=Ho(n,ml.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function ml(e){if(il=-1,sl=al=0,0!=(48&Ts))throw Error(a(327));var t=e.callbackNode;if(Zl()&&e.callbackNode!==t)return null;var n=Lt(e,e===Rs?Zs:0);if(0===n)return null;var r=n,o=Ts;Ts|=16;var i=Sl();for(Rs===e&&Zs===r||(Us(),xl(e,r));;)try{Ol();break}catch(t){kl(e,t)}if(ni(),Cs.current=i,Ts=o,null!==As?r=0:(Rs=null,Zs=0,r=Is),0!=($s&zs))xl(e,0);else if(0!==r){if(2===r&&(Ts|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=$t(e))&&(r=El(e,n))),1===r)throw t=Ls,xl(e,0),vl(e,n),hl(e,qo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:case 5:Tl(e);break;case 3:if(vl(e,n),(62914560&n)===n&&10<(r=qs+500-qo())){if(0!==Lt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){cl(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Wr(Tl.bind(null,e),r);break}Tl(e);break;case 4:if(vl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var s=31-qt(n);i=1<<s,(s=r[s])>o&&(o=s),n&=~i}if(n=o,10<(n=(120>(n=qo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Os(n/1960))-n)){e.timeoutHandle=Wr(Tl.bind(null,e),n);break}Tl(e);break;default:throw Error(a(329))}}return hl(e,qo()),e.callbackNode===t?ml.bind(null,e):null}function vl(e,t){for(t&=~Fs,t&=~zs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-qt(t),r=1<<n;e[n]=-1,t&=~r}}function gl(e){if(0!=(48&Ts))throw Error(a(327));if(Zl(),e===Rs&&0!=(e.expiredLanes&Zs)){var t=Zs,n=El(e,t);0!=($s&zs)&&(n=El(e,t=Lt(e,t)))}else n=El(e,t=Lt(e,0));if(0!==e.tag&&2===n&&(Ts|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=$t(e))&&(n=El(e,t))),1===n)throw n=Ls,xl(e,0),vl(e,t),hl(e,qo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Tl(e),hl(e,qo()),null}function yl(e,t){var n=Ts;Ts|=1;try{return e(t)}finally{0===(Ts=n)&&(Us(),Ko())}}function bl(e,t){var n=Ts;Ts&=-2,Ts|=8;try{return e(t)}finally{0===(Ts=n)&&(Us(),Ko())}}function wl(e,t){co(Ns,Ms),Ms|=t,$s|=t}function _l(){Ms=Ns.current,uo(Ns)}function xl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Ur(n)),null!==As)for(n=As.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&yo();break;case 3:Mi(),uo(ho),uo(po),Gi();break;case 5:Ii(r);break;case 4:Mi();break;case 13:case 19:uo(Li);break;case 10:ri(r);break;case 23:case 24:_l()}n=n.return}Rs=e,As=Wl(e.current,null),Zs=Ms=$s=t,Is=0,Ls=null,Fs=zs=Ds=0}function kl(e,t){for(;;){var n=As;try{if(ni(),Qi.current=Ra,na){for(var r=Ji.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}na=!1}if(Xi=0,ta=ea=Ji=null,ra=!1,js.current=null,null===n||null===n.return){Is=1,Ls=t,As=null;break}e:{var i=e,a=n.return,s=n,l=t;if(t=Zs,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var f=0!=(1&Li.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(u),d.updateQueue=g}else v.add(u);if(0==(2&d.mode)){if(d.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var y=ci(-1,1);y.tag=2,fi(s,y)}s.lanes|=1;break e}l=void 0,s=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new us,l=new Set,b.set(u,l)):void 0===(l=b.get(u))&&(l=new Set,b.set(u,l)),!l.has(s)){l.add(s);var w=Dl.bind(null,i,u,s);u.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error((H(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Is&&(Is=2),l=ss(l,s),d=a;do{switch(d.tag){case 3:i=l,d.flags|=4096,t&=-t,d.lanes|=t,di(d,cs(0,i,t));break e;case 1:i=l;var _=d.type,x=d.stateNode;if(0==(64&d.flags)&&("function"==typeof _.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Qs||!Qs.has(x)))){d.flags|=4096,t&=-t,d.lanes|=t,di(d,fs(d,i,t));break e}}d=d.return}while(null!==d)}jl(n)}catch(e){t=e,As===n&&null!==n&&(As=n=n.return);continue}break}}function Sl(){var e=Cs.current;return Cs.current=Ra,null===e?Ra:e}function El(e,t){var n=Ts;Ts|=16;var r=Sl();for(Rs===e&&Zs===t||xl(e,t);;)try{Pl();break}catch(t){kl(e,t)}if(ni(),Ts=n,Cs.current=r,null!==As)throw Error(a(261));return Rs=null,Zs=0,Is}function Pl(){for(;null!==As;)Cl(As)}function Ol(){for(;null!==As&&!Co();)Cl(As)}function Cl(e){var t=Vs(e.alternate,e,Ms);e.memoizedProps=e.pendingProps,null===t?jl(e):As=t,js.current=null}function jl(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=is(n,t,Ms)))return void(As=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ms)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=as(t)))return n.flags&=2047,void(As=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(As=t);As=t=e}while(null!==t);0===Is&&(Is=5)}function Tl(e){var t=Wo();return Vo(99,Rl.bind(null,e,t)),null}function Rl(e,t){do{Zl()}while(null!==Xs);if(0!=(48&Ts))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<i;){var u=31-qt(i),c=1<<u;o[u]=0,s[u]=-1,l[u]=-1,i&=~c}if(null!==nl&&0==(24&r)&&nl.has(e)&&nl.delete(e),e===Rs&&(As=Rs=null,Zs=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ts,Ts|=32,js.current=null,zr=Kt,vr(s=mr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,i=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{l.nodeType,u.nodeType}catch(e){l=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=s,g=null;t:for(;;){for(var y;v!==l||0!==i&&3!==v.nodeType||(d=f+i),v!==u||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===s)break t;if(g===l&&++h===i&&(d=f),g===u&&++m===c&&(p=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}l=-1===d||-1===p?null:{start:d,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;Fr={focusedElem:s,selectionRange:l},Kt=!1,ll=null,ul=!1,Hs=r;do{try{Al()}catch(e){if(null===Hs)throw Error(a(330));$l(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);ll=null,Hs=r;do{try{for(s=e;null!==Hs;){var b=Hs.flags;if(16&b&&ge(Hs.stateNode,""),128&b){var w=Hs.alternate;if(null!==w){var _=w.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&b){case 2:ws(Hs),Hs.flags&=-3;break;case 6:ws(Hs),Hs.flags&=-3,Ss(Hs.alternate,Hs);break;case 1024:Hs.flags&=-1025;break;case 1028:Hs.flags&=-1025,Ss(Hs.alternate,Hs);break;case 4:Ss(Hs.alternate,Hs);break;case 8:ks(s,l=Hs);var x=l.alternate;ys(l),null!==x&&ys(x)}Hs=Hs.nextEffect}}catch(e){if(null===Hs)throw Error(a(330));$l(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);if(_=Fr,w=mr(),b=_.focusedElem,s=_.selectionRange,w!==b&&b&&b.ownerDocument&&hr(b.ownerDocument.documentElement,b)){null!==s&&vr(b)&&(w=s.start,void 0===(_=s.end)&&(_=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(_,b.value.length)):(_=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(_=_.getSelection(),l=b.textContent.length,x=Math.min(s.start,l),s=void 0===s.end?x:Math.min(s.end,l),!_.extend&&x>s&&(l=s,s=x,x=l),l=pr(b,x),i=pr(b,s),l&&i&&(1!==_.rangeCount||_.anchorNode!==l.node||_.anchorOffset!==l.offset||_.focusNode!==i.node||_.focusOffset!==i.offset)&&((w=w.createRange()).setStart(l.node,l.offset),_.removeAllRanges(),x>s?(_.addRange(w),_.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),_.addRange(w))))),w=[];for(_=b;_=_.parentNode;)1===_.nodeType&&w.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(_=w[b]).element.scrollLeft=_.left,_.element.scrollTop=_.top}Kt=!!zr,Fr=zr=null,e.current=n,Hs=r;do{try{for(b=e;null!==Hs;){var k=Hs.flags;if(36&k&&ms(b,Hs.alternate,Hs),128&k){w=void 0;var S=Hs.ref;if(null!==S){var E=Hs.stateNode;Hs.tag,w=E,"function"==typeof S?S(w):S.current=w}}Hs=Hs.nextEffect}}catch(e){if(null===Hs)throw Error(a(330));$l(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);Hs=null,$o(),Ts=o}else e.current=n;if(Ys)Ys=!1,Xs=e,Js=t;else for(Hs=r;null!==Hs;)t=Hs.nextEffect,Hs.nextEffect=null,8&Hs.flags&&((k=Hs).sibling=null,k.stateNode=null),Hs=t;if(0===(r=e.pendingLanes)&&(Qs=null),1===r?e===ol?rl++:(rl=0,ol=e):rl=0,n=n.stateNode,So&&"function"==typeof So.onCommitFiberRoot)try{So.onCommitFiberRoot(ko,n,void 0,64==(64&n.current.flags))}catch(e){}if(hl(e,qo()),Ks)throw Ks=!1,e=Gs,Gs=null,e;return 0!=(8&Ts)||Ko(),null}function Al(){for(;null!==Hs;){var e=Hs.alternate;ul||null===ll||(0!=(8&Hs.flags)?Je(Hs,ll)&&(ul=!0):13===Hs.tag&&Ps(e,Hs)&&Je(Hs,ll)&&(ul=!0));var t=Hs.flags;0!=(256&t)&&hs(e,Hs),0==(512&t)||Ys||(Ys=!0,Ho(97,(function(){return Zl(),null}))),Hs=Hs.nextEffect}}function Zl(){if(90!==Js){var e=97<Js?97:Js;return Js=90,Vo(e,Il)}return!1}function Ml(e,t){el.push(t,e),Ys||(Ys=!0,Ho(97,(function(){return Zl(),null})))}function Nl(e,t){tl.push(t,e),Ys||(Ys=!0,Ho(97,(function(){return Zl(),null})))}function Il(){if(null===Xs)return!1;var e=Xs;if(Xs=null,0!=(48&Ts))throw Error(a(331));var t=Ts;Ts|=32;var n=tl;tl=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],s=o.destroy;if(o.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===i)throw Error(a(330));$l(i,e)}}for(n=el,el=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===i)throw Error(a(330));$l(i,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ts=t,Ko(),!0}function Ll(e,t,n){fi(e,t=cs(0,t=ss(n,t),1)),t=cl(),null!==(e=pl(e,1))&&(Bt(e,1,t),hl(e,t))}function $l(e,t){if(3===e.tag)Ll(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ll(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Qs||!Qs.has(r))){var o=fs(n,e=ss(t,e),1);if(fi(n,o),o=cl(),null!==(n=pl(n,1)))Bt(n,1,o),hl(n,o);else if("function"==typeof r.componentDidCatch&&(null===Qs||!Qs.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Dl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=cl(),e.pingedLanes|=e.suspendedLanes&n,Rs===e&&(Zs&n)===n&&(4===Is||3===Is&&(62914560&Zs)===Zs&&500>qo()-qs?xl(e,0):Fs|=n),hl(e,t)}function zl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Wo()?1:2:(0===al&&(al=$s),0===(t=zt(62914560&~al))&&(t=4194304))),n=cl(),null!==(e=pl(e,t))&&(Bt(e,t,n),hl(e,n))}function Fl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Bl(e,t,n,r){return new Fl(e,t,n,r)}function ql(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Wl(e,t){var n=e.alternate;return null===n?((n=Bl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ul(e,t,n,r,o,i){var s=2;if(r=e,"function"==typeof e)ql(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case S:return Vl(n.children,o,i,t);case I:s=8,o|=16;break;case E:s=8,o|=1;break;case P:return(e=Bl(12,n,t,8|o)).elementType=P,e.type=P,e.lanes=i,e;case T:return(e=Bl(13,n,t,o)).type=T,e.elementType=T,e.lanes=i,e;case R:return(e=Bl(19,n,t,o)).elementType=R,e.lanes=i,e;case L:return Hl(n,o,i,t);case $:return(e=Bl(24,n,t,o)).elementType=$,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:s=10;break e;case C:s=9;break e;case j:s=11;break e;case A:s=14;break e;case Z:s=16,r=null;break e;case M:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Bl(s,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Vl(e,t,n,r){return(e=Bl(7,e,r,t)).lanes=n,e}function Hl(e,t,n,r){return(e=Bl(23,e,r,t)).elementType=L,e.lanes=n,e}function Kl(e,t,n){return(e=Bl(6,e,null,t)).lanes=n,e}function Gl(e,t,n){return(t=Bl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ql(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ft(0),this.expirationTimes=Ft(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ft(0),this.mutableSourceEagerHydrationData=null}function Yl(e,t,n,r){var o=t.current,i=cl(),s=fl(o);e:if(n){t:{if(Ge(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(go(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var u=n.type;if(go(u)){n=wo(n,u,l);break e}}n=l}else n=fo;return null===t.context?t.context=n:t.pendingContext=n,(t=ci(i,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),fi(o,t),dl(o,s,i),s}function Xl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Jl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function eu(e,t){Jl(e,t),(e=e.alternate)&&Jl(e,t)}function tu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Ql(e,t,null!=n&&!0===n.hydrate),t=Bl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,li(t),e[Jr]=n.current,Rr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function nu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ru(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var s=o;o=function(){var e=Xl(a);s.call(e)}}Yl(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Xl(a);l.call(e)}}bl((function(){Yl(t,a,e,o)}))}return Xl(a)}function ou(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nu(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Vs=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ho.current)Ia=!0;else{if(0==(n&r)){switch(Ia=!1,t.tag){case 3:Va(t),Hi();break;case 5:Ni(t);break;case 1:go(t.type)&&_o(t);break;case 4:Zi(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;co(Xo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Xa(e,t,n):(co(Li,1&Li.current),null!==(t=rs(e,t,n))?t.sibling:null);co(Li,1&Li.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return ns(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),co(Li,Li.current),r)break;return null;case 23:case 24:return t.lanes=0,Fa(e,t,n)}return rs(e,t,n)}Ia=0!=(16384&e.flags)}else Ia=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=vo(t,po.current),ii(t,n),o=aa(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(r)){var i=!0;_o(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,li(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&vi(t,r,s,e),o.updater=gi,t.stateNode=o,o._reactInternals=t,_i(t,r,e,n),t=Ua(null,t,r,!0,i,n)}else t.tag=0,La(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return ql(e)?1:0;if(null!=e){if((e=e.$$typeof)===j)return 11;if(e===A)return 14}return 2}(o),e=Yo(o,e),i){case 0:t=qa(null,t,o,e,n);break e;case 1:t=Wa(null,t,o,e,n);break e;case 11:t=$a(null,t,o,e,n);break e;case 14:t=Da(null,t,o,Yo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,qa(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Wa(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 3:if(Va(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ui(e,t),pi(t,r,null,n),(r=t.memoizedState.element)===o)Hi(),t=rs(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(zi=Hr(t.stateNode.containerInfo.firstChild),Di=t,i=Fi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Ki.push(i);for(n=Oi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else La(e,t,r,n),Hi();t=t.child}return t;case 5:return Ni(t),null===e&&Wi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,s=o.children,qr(r,o)?s=null:null!==i&&qr(r,i)&&(t.flags|=16),Ba(e,t),La(e,t,s,n),t.child;case 6:return null===e&&Wi(t),null;case 13:return Xa(e,t,n);case 4:return Zi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Pi(t,null,r,n):La(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,$a(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 7:return La(e,t,t.pendingProps,n),t.child;case 8:case 12:return La(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,s=t.memoizedProps,i=o.value;var l=t.type._context;if(co(Xo,l._currentValue),l._currentValue=i,null!==s)if(l=s.value,0==(i=ur(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(s.children===o.children&&!ho.current){t=rs(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===l.tag&&((c=ci(-1,n&-n)).tag=2,fi(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),oi(l.return,n),u.lanes|=n;break}c=c.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}La(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ii(t,n),r=r(o=ai(o,i.unstable_observedBits)),t.flags|=1,La(e,t,r,n),t.child;case 14:return i=Yo(o=t.type,t.pendingProps),Da(e,t,o,i=Yo(o.type,i),r,n);case 15:return za(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Yo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,go(r)?(e=!0,_o(t)):e=!1,ii(t,n),bi(t,r,o),_i(t,r,o,n),Ua(null,t,r,!0,e,n);case 19:return ns(e,t,n);case 23:case 24:return Fa(e,t,n)}throw Error(a(156,t.tag))},tu.prototype.render=function(e){Yl(e,this._internalRoot,null,null)},tu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Yl(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(dl(e,4,cl()),eu(e,4))},tt=function(e){13===e.tag&&(dl(e,67108864,cl()),eu(e,67108864))},nt=function(e){if(13===e.tag){var t=cl(),n=fl(e);dl(e,n,t),eu(e,n)}},rt=function(e,t){return t()},Pe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(a(90));Y(r),ne(r,o)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Ae=yl,Ze=function(e,t,n,r,o){var i=Ts;Ts|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(Ts=i)&&(Us(),Ko())}},Me=function(){0==(49&Ts)&&(function(){if(null!==nl){var e=nl;nl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,hl(e,qo())}))}Ko()}(),Zl())},Ne=function(e,t){var n=Ts;Ts|=2;try{return e(t)}finally{0===(Ts=n)&&(Us(),Ko())}};var iu={Events:[no,ro,oo,Te,Re,Zl,{current:!1}]},au={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},su={bundleType:au.bundleType,version:au.version,rendererPackageName:au.rendererPackageName,rendererConfig:au.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Xe(e))?null:e.stateNode},findFiberByHostInstance:au.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lu.isDisabled&&lu.supportsFiber)try{ko=lu.inject(su),So=lu}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=iu,t.createPortal=ou,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Xe(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ts;if(0!=(48&n))return e(t);Ts|=1;try{if(e)return Vo(99,e.bind(null,t))}finally{Ts=n,Ko()}},t.hydrate=function(e,t,n){if(!nu(t))throw Error(a(200));return ru(null,e,t,!0,n)},t.render=function(e,t,n){if(!nu(t))throw Error(a(200));return ru(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nu(e))throw Error(a(40));return!!e._reactRootContainer&&(bl((function(){ru(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=yl,t.unstable_createPortal=function(e,t){return ou(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nu(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ru(e,t,n,!1,r)},t.version="17.0.2"},3935:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},1897:function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DBMode=t.DBOperations=t.CreateObjectStore=t.openDatabase=void 0;var r,o=n(4),i=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;function a(e,t,n){return new Promise((function(r,o){var a,s=i.open(e,t);s.onsuccess=function(e){a=s.result,r(a)},s.onerror=function(e){o("IndexedDB error: "+s.error)},"function"==typeof n&&(s.onupgradeneeded=function(e){n(e,a)})}))}t.openDatabase=a,t.CreateObjectStore=function(e,t,n){var r=i.open(e,t);r.onupgradeneeded=function(e){var t=e.target.result;n.forEach((function(e){if(!t.objectStoreNames.contains(e.store)){var n=t.createObjectStore(e.store,e.storeConfig);e.storeSchema.forEach((function(e){n.createIndex(e.name,e.keypath,e.options)}))}})),t.close()},r.onsuccess=function(e){e.target.result.close()}},t.DBOperations=function(e,t,n){return{add:function(i,s){return new Promise((function(l,u){a(e,t).then((function(e){o.createTransaction(e,o.optionsGenerator(r.readwrite,n,u,l)).objectStore(n).add(i,s).onsuccess=function(e){s=e.target.result,l(s)}}))}))},getByID:function(i){return new Promise((function(s,l){a(e,t).then((function(e){o.validateBeforeTransaction(e,n,l),o.createTransaction(e,o.optionsGenerator(r.readonly,n,l,s)).objectStore(n).get(+i).onsuccess=function(e){s(e.target.result)}}))}))},getAll:function(){return new Promise((function(i,s){a(e,t).then((function(e){o.validateBeforeTransaction(e,n,s);var t=o.createTransaction(e,o.optionsGenerator(r.readonly,n,s,i)).objectStore(n).getAll();t.onerror=function(e){s(e)},t.onsuccess=function(e){var t=e.target.result;i(t)}}))}))},update:function(i,s){return new Promise((function(l,u){a(e,t).then((function(e){o.validateBeforeTransaction(e,n,u);var t=o.createTransaction(e,o.optionsGenerator(r.readwrite,n,u,l)),a=t.objectStore(n);t.oncomplete=function(e){l(e)},a.put(i,s)}))}))},deleteRecord:function(i){return new Promise((function(s,l){a(e,t).then((function(e){o.validateBeforeTransaction(e,n,l),o.createTransaction(e,o.optionsGenerator(r.readwrite,n,l,s)).objectStore(n).delete(i).onsuccess=function(e){s(e)}}))}))},clear:function(){return new Promise((function(i,s){a(e,t).then((function(e){o.validateBeforeTransaction(e,n,s);var t=o.createTransaction(e,o.optionsGenerator(r.readwrite,n,s,i));t.objectStore(n).clear(),t.oncomplete=function(e){i()}}))}))},openCursor:function(i,s){return new Promise((function(l,u){a(e,t).then((function(e){o.validateBeforeTransaction(e,n,u),o.createTransaction(e,o.optionsGenerator(r.readonly,n,u,l)).objectStore(n).openCursor(s).onsuccess=function(e){i(e),l()}}))}))},getByIndex:function(i,s){return new Promise((function(l,u){a(e,t).then((function(e){o.validateBeforeTransaction(e,n,u),o.createTransaction(e,o.optionsGenerator(r.readonly,n,u,l)).objectStore(n).index(i).get(s).onsuccess=function(e){l(e.target.result)}}))}))}}},function(e){e.readonly="readonly",e.readwrite="readwrite"}(r=t.DBMode||(t.DBMode={}))},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});var i=n(2);Object.defineProperty(t,"AccessDB",{enumerable:!0,get:function(){return i.AccessDB}}),Object.defineProperty(t,"IndexedDB",{enumerable:!0,get:function(){return i.IndexedDB}}),o(n(5),t)},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AccessDB=t.IndexedDB=void 0;var s=a(n(3)),l=n(0),u=s.default.createContext({db:null,name:null,version:null}),c=u.Provider,f=u.Consumer;t.IndexedDB=function(e){var t=this,n=e.name,r=e.version,a=e.children;return e.objectStoresMeta.forEach((function(e){return o(t,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,l.openDatabase(n,r,(function(t){var n=t.currentTarget.result.createObjectStore(e.store,e.storeConfig);e.storeSchema.forEach((function(e){n.createIndex(e.name,e.keypath,e.options)}))}))];case 1:return t.sent(),[2]}}))}))})),s.default.createElement(c,{value:{db:null,name:n,version:r}},a)},t.AccessDB=function(e){var t=e.children,n=e.objectStore;return s.default.createElement(f,null,(function(e){var o=e.db,i=e.name,a=e.version;return t(r({db:o},l.DBOperations(i,a,n)))}))}},function(e,t){e.exports=n(7294)},function(e,t,n){"use strict";function r(e,t){return e.objectStoreNames.contains(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.optionsGenerator=t.createTransaction=t.validateBeforeTransaction=t.validateStoreName=void 0,t.validateStoreName=r,t.validateBeforeTransaction=function(e,t,n){e||n("You need to use the openDatabase function to create a database before you query it!"),r(e,t)||n("objectStore does not exists: "+t)},t.createTransaction=function(e,t){var n=e.transaction(t.storeName,t.dbMode);return n.onerror=t.error,n.oncomplete=t.complete,n.onabort=t.abort,n},t.optionsGenerator=function(e,t,n,r){return{storeName:t,dbMode:e,error:function(e){n(e)},complete:function(e){r()},abort:function(e){n(e)}}}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.useIndexedDB=t.initDB=void 0;var o=n(0),i={version:null,name:null};t.initDB=function(e){var t=e.name,n=e.version,r=e.objectStoresMeta;i.name=t,i.version=n,Object.freeze(i),o.CreateObjectStore(t,n,r)},t.useIndexedDB=function(e){if(!i.name||!i.version)throw new Error("Please, initialize the DB before the use.");return r({},o.DBOperations(i.name,i.version,e))}}])},9921:function(e,t){"use strict";Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference")},9864:function(e,t,n){"use strict";n(9921)},6871:function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function i(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,a=null,s=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?s="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(s="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==s){var l=e.displayName||e.name,u="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+l+" uses "+u+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==s?"\n  "+s:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=i;var c=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,e,t,r)}}return e}n.r(t),n.d(t,{polyfill:function(){return a}}),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0},266:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(8216),o=n(6317),i=n(350),a=(0,r.connect)((function(e,t){return{loading:e.get("loadingBar")[t.scope||i.DEFAULT_SCOPE]}}))(o.LoadingBar);t.default=a},6784:function(e,t,n){"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}Object.defineProperty(t,"f0",{enumerable:!0,get:function(){return i.default}});var o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=s();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(n,i,a):n[i]=e[i]}return n.default=e,t&&t.set(e,n),n}(n(6317)),i=a(n(6501));n(350),a(n(266));function a(e){return e&&e.__esModule?e:{default:e}}function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}o.default},6317:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.LoadingBar=t.TERMINATING_ANIMATION_DURATION=t.ANIMATION_DURATION=t.PROGRESS_INCREASE=t.MAX_PROGRESS=t.UPDATE_TIME=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==u(e)&&"function"!=typeof e)return{default:e};var t=l();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(n(7294)),o=n(6871),i=n(5697),a=n(8216),s=n(350);function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e){return h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},h(e)}function m(e,t){return m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},m(e,t)}t.UPDATE_TIME=400,t.MAX_PROGRESS=99,t.PROGRESS_INCREASE=20,t.ANIMATION_DURATION=800,t.TERMINATING_ANIMATION_DURATION=200;var v={percent:0,status:"hidden"},g=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}(this,(e=h(t)).call.apply(e,[this].concat(o)))).state=f({},v),n.reset=function(){n.terminatingAnimationTimeoutId=null,n.setState(v)},n.newPercent=function(e,t){return e+t*Math.cos(e*(Math.PI/2/100))},n.simulateProgress=function(){n.setState((function(e,t){var r=t.maxProgress,o=t.progressIncrease,i=e.percent,a=n.newPercent(i,o);return a<=r&&(i=a),{percent:i}}))},n}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,e),n=t,i=[{key:"shouldStart",value:function(e,t){return e.loading>0&&["hidden","stopping"].indexOf(t.status)>=0}},{key:"shouldStop",value:function(e,t){return 0===e.loading&&["starting","running"].indexOf(t.status)>=0}},{key:"getDerivedStateFromProps",value:function(e,n){return t.shouldStart(e,n)?{status:"starting"}:t.shouldStop(e,n)?{status:"stopping"}:null}}],(o=[{key:"componentDidMount",value:function(){"starting"===this.state.status&&this.start()}},{key:"componentDidUpdate",value:function(e,t){var n=this.state.status;t.status!==n&&("starting"===n&&this.start(),"stopping"===n&&this.stop())}},{key:"componentWillUnmount",value:function(){clearInterval(this.progressIntervalId),clearTimeout(this.terminatingAnimationTimeoutId)}},{key:"start",value:function(){this.terminatingAnimationTimeoutId&&(clearTimeout(this.terminatingAnimationTimeoutId),this.reset());var e=this.props.updateTime;this.progressIntervalId=setInterval(this.simulateProgress,e),this.setState({status:"running"})}},{key:"stop",value:function(){var e=this.props.showFastActions;clearInterval(this.progressIntervalId),this.progressIntervalId=null;var t=this.isShown()||e?200:0;this.terminatingAnimationTimeoutId=setTimeout(this.reset,t),this.setState({percent:100})}},{key:"isShown",value:function(){var e=this.state.percent;return e>0&&e<=100}},{key:"buildStyle",value:function(){var e=this.state,t=e.status,n=e.percent,r=this.props,o=r.direction,i=r.className,a=r.style,s="stopping"===t?200:800,l=(100-n)*("rtl"===o?1:-1),u={opacity:"1",transform:"translate3d(".concat(l,"%, 0px, 0px)"),msTransform:"translate3d(".concat(l,"%, 0px, 0px)"),WebkitTransform:"translate3d(".concat(l,"%, 0px, 0px)"),MozTransform:"translate3d(".concat(l,"%, 0px, 0px)"),OTransform:"translate3d(".concat(l,"%, 0px, 0px)"),transition:"transform ".concat(s,"ms linear 0s"),msTransition:"-ms-transform ".concat(s,"ms linear 0s"),WebkitTransition:"-webkit-transform ".concat(s,"ms linear 0s"),MozTransition:"-moz-transform ".concat(s,"ms linear 0s"),OTransition:"-o-transform ".concat(s,"ms linear 0s"),width:"100%",willChange:"transform, opacity"};return i||(u.height="3px",u.backgroundColor="red",u.position="absolute"),this.isShown()?u.opacity="1":u.opacity="0",f({},u,{},a)}},{key:"render",value:function(){var e=this.state.status,t=this.props.className;return"hidden"===e?r.default.createElement("div",null):r.default.createElement("div",null,r.default.createElement("div",{style:this.buildStyle(),className:t}),r.default.createElement("div",{style:{display:"table",clear:"both"}}))}}])&&p(n.prototype,o),i&&p(n,i),t}(r.Component);t.LoadingBar=g,g.propTypes={className:i.string,direction:i.string,loading:i.number,maxProgress:i.number,progressIncrease:i.number,scope:i.string,showFastActions:i.bool,style:i.object,updateTime:i.number},g.defaultProps={className:"",direction:"ltr",loading:0,maxProgress:99,progressIncrease:20,scope:s.DEFAULT_SCOPE,showFastActions:!1,style:{},updateTime:400},(0,o.polyfill)(g);var y=(0,a.connect)((function(e,t){return{loading:e.loadingBar[t.scope||s.DEFAULT_SCOPE]}}))(g);t.default=y},350:function(e,t){"use strict";function n(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function r(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.showLoading=function(){return{type:i,payload:{scope:arguments.length>0&&void 0!==arguments[0]?arguments[0]:l}}},t.hideLoading=function(){return{type:a,payload:{scope:arguments.length>0&&void 0!==arguments[0]?arguments[0]:l}}},t.resetLoading=function(){return{type:s,payload:{scope:arguments.length>0&&void 0!==arguments[0]?arguments[0]:l}}},t.loadingBarReducer=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=(t.payload||{}).scope,u=void 0===n?l:n;switch(t.type){case i:return r({},e,o({},u,(e[u]||0)+1));case a:return r({},e,o({},u,Math.max(0,(e[u]||1)-1)));case s:return r({},e,o({},u,0));default:return e}},t.DEFAULT_SCOPE=t.RESET=t.HIDE=t.SHOW=void 0;var i="loading-bar/SHOW";t.SHOW=i;var a="loading-bar/HIDE";t.HIDE=a;var s="loading-bar/RESET";t.RESET=s;var l="default";t.DEFAULT_SCOPE=l},6501:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.promiseTypeSuffixes||o,n=e.scope||r.DEFAULT_SCOPE;return function(e){var o=e.dispatch;return function(e){return function(i){if(i.type){var a=(3,function(e){if(Array.isArray(e))return e}(h=t)||function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),3!==n.length);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}}(h)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()),s=a[0],l=a[1],u=a[2],c=new RegExp("".concat(s,"$"),"g"),f=new RegExp("".concat(l,"$"),"g"),d=new RegExp("".concat(u,"$"),"g"),p=i.meta&&i.meta.scope||i.scope||n;i.type.match(c)?o((0,r.showLoading)(p)):(i.type.match(f)||i.type.match(d))&&o((0,r.hideLoading)(p))}var h;return e(i)}}}};var r=n(350),o=["PENDING","FULFILLED","REJECTED"]},8216:function(e,t,n){"use strict";n.r(t),n.d(t,{Provider:function(){return c},ReactReduxContext:function(){return o},batch:function(){return J.unstable_batchedUpdates},connect:function(){return q},connectAdvanced:function(){return E},createDispatchHook:function(){return H},createSelectorHook:function(){return Q},createStoreHook:function(){return U},shallowEqual:function(){return O},useDispatch:function(){return K},useSelector:function(){return X},useStore:function(){return V}});var r=n(7294),o=r.createContext(null),i=function(e){e()},a=function(){return i},s={notify:function(){},get:function(){return[]}};function l(e,t){var n,r=s;function o(){l.onStateChange&&l.onStateChange()}function i(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){var e=a(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}var l={addNestedSub:function(e){return i(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:i,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=s)},getListeners:function(){return r}};return l}var u="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,c=function(e){var t=e.store,n=e.context,i=e.children,a=(0,r.useMemo)((function(){var e=l(t);return{store:t,subscription:e}}),[t]),s=(0,r.useMemo)((function(){return t.getState()}),[t]);u((function(){var e=a.subscription;return e.onStateChange=e.notifyNestedSubs,e.trySubscribe(),s!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,s]);var c=n||o;return r.createElement(c.Provider,{value:a},i)},f=n(7462),d=n(3366),p=n(8679),h=n.n(p),m=n(2973),v=["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"],g=["reactReduxForwardedRef"],y=[],b=[null,null];function w(e,t){var n=e[1];return[t.payload,n+1]}function _(e,t,n){u((function(){return e.apply(void 0,t)}),n)}function x(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function k(e,t,n,r,o,i,a,s,l,u){if(e){var c=!1,f=null,d=function(){if(!c){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||l():(i.current=e,s.current=e,a.current=!0,u({type:"STORE_UPDATED",payload:{error:n}}))}};return n.onStateChange=d,n.trySubscribe(),d(),function(){if(c=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var S=function(){return[null,0]};function E(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,a=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,s=n.methodName,u=void 0===s?"connectAdvanced":s,c=n.renderCountProp,p=void 0===c?void 0:c,E=n.shouldHandleStateChanges,P=void 0===E||E,O=n.storeKey,C=void 0===O?"store":O,j=(n.withRef,n.forwardRef),T=void 0!==j&&j,R=n.context,A=void 0===R?o:R,Z=(0,d.Z)(n,v),M=A;return function(t){var n=t.displayName||t.name||"Component",o=a(n),i=(0,f.Z)({},Z,{getDisplayName:a,methodName:u,renderCountProp:p,shouldHandleStateChanges:P,storeKey:C,displayName:o,wrappedComponentName:n,WrappedComponent:t}),s=Z.pure,c=s?r.useMemo:function(e){return e()};function v(n){var o=(0,r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=(0,d.Z)(n,g);return[n.context,e,t]}),[n]),a=o[0],s=o[1],u=o[2],p=(0,r.useMemo)((function(){return a&&a.Consumer&&(0,m.isContextConsumer)(r.createElement(a.Consumer,null))?a:M}),[a,M]),h=(0,r.useContext)(p),v=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(h)&&Boolean(h.store);var E=v?n.store:h.store,O=(0,r.useMemo)((function(){return function(t){return e(t.dispatch,i)}(E)}),[E]),C=(0,r.useMemo)((function(){if(!P)return b;var e=l(E,v?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[E,v,h]),j=C[0],T=C[1],R=(0,r.useMemo)((function(){return v?h:(0,f.Z)({},h,{subscription:j})}),[v,h,j]),A=(0,r.useReducer)(w,y,S),Z=A[0][0],N=A[1];if(Z&&Z.error)throw Z.error;var I=(0,r.useRef)(),L=(0,r.useRef)(u),$=(0,r.useRef)(),D=(0,r.useRef)(!1),z=c((function(){return $.current&&u===L.current?$.current:O(E.getState(),u)}),[E,Z,u]);_(x,[L,I,D,u,z,$,T]),_(k,[P,E,j,O,L,I,D,$,T,N],[E,j,O]);var F=(0,r.useMemo)((function(){return r.createElement(t,(0,f.Z)({},z,{ref:s}))}),[s,t,z]);return(0,r.useMemo)((function(){return P?r.createElement(p.Provider,{value:R},F):F}),[p,F,R])}var E=s?r.memo(v):v;if(E.WrappedComponent=t,E.displayName=v.displayName=o,T){var O=r.forwardRef((function(e,t){return r.createElement(E,(0,f.Z)({},e,{reactReduxForwardedRef:t}))}));return O.displayName=o,O.WrappedComponent=t,h()(O,t)}return h()(E,t)}}function P(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function O(e,t){if(P(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!P(e[n[o]],t[n[o]]))return!1;return!0}function C(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function j(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function T(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=j(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=j(o),o=r(t,n)),o},r}}var R=[function(e){return"function"==typeof e?T(e):void 0},function(e){return e?void 0:C((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?C((function(t){return function(e,t){var n={},r=function(r){var o=e[r];"function"==typeof o&&(n[r]=function(){return t(o.apply(void 0,arguments))})};for(var o in e)r(o);return n}(e,t)})):void 0}],A=[function(e){return"function"==typeof e?T(e):void 0},function(e){return e?void 0:C((function(){return{}}))}];function Z(e,t,n){return(0,f.Z)({},n,e,t)}var M=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,s){var l=e(t,n,s);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return Z}}],N=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function I(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function L(e,t,n,r,o){var i,a,s,l,u,c=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;return function(o,h){return p?function(o,p){var h,m,v=!f(p,a),g=!c(o,i,p,a);return i=o,a=p,v&&g?(s=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),u=n(s,l,a)):v?(e.dependsOnOwnProps&&(s=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),u=n(s,l,a)):g?(h=e(i,a),m=!d(h,s),s=h,m&&(u=n(s,l,a)),u):u}(o,h):(s=e(i=o,a=h),l=t(r,a),u=n(s,l,a),p=!0,u)}}function $(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=(0,d.Z)(t,N),a=n(e,i),s=r(e,i),l=o(e,i);return(i.pure?L:I)(a,s,l,e,i)}var D=["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"];function z(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function F(e,t){return e===t}function B(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?E:n,o=t.mapStateToPropsFactories,i=void 0===o?A:o,a=t.mapDispatchToPropsFactories,s=void 0===a?R:a,l=t.mergePropsFactories,u=void 0===l?M:l,c=t.selectorFactory,p=void 0===c?$:c;return function(e,t,n,o){void 0===o&&(o={});var a=o,l=a.pure,c=void 0===l||l,h=a.areStatesEqual,m=void 0===h?F:h,v=a.areOwnPropsEqual,g=void 0===v?O:v,y=a.areStatePropsEqual,b=void 0===y?O:y,w=a.areMergedPropsEqual,_=void 0===w?O:w,x=(0,d.Z)(a,D),k=z(e,i,"mapStateToProps"),S=z(t,s,"mapDispatchToProps"),E=z(n,u,"mergeProps");return r(p,(0,f.Z)({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:k,initMapDispatchToProps:S,initMergeProps:E,pure:c,areStatesEqual:m,areOwnPropsEqual:g,areStatePropsEqual:b,areMergedPropsEqual:_},x))}}var q=B();function W(){return(0,r.useContext)(o)}function U(e){void 0===e&&(e=o);var t=e===o?W:function(){return(0,r.useContext)(e)};return function(){return t().store}}var V=U();function H(e){void 0===e&&(e=o);var t=e===o?V:U(e);return function(){return t().dispatch}}var K=H(),G=function(e,t){return e===t};function Q(e){void 0===e&&(e=o);var t=e===o?W:function(){return(0,r.useContext)(e)};return function(e,n){void 0===n&&(n=G);var o=t(),i=function(e,t,n,o){var i,a=(0,r.useReducer)((function(e){return e+1}),0)[1],s=(0,r.useMemo)((function(){return l(n,o)}),[n,o]),c=(0,r.useRef)(),f=(0,r.useRef)(),d=(0,r.useRef)(),p=(0,r.useRef)(),h=n.getState();try{if(e!==f.current||h!==d.current||c.current){var m=e(h);i=void 0!==p.current&&t(m,p.current)?p.current:m}else i=p.current}catch(e){throw c.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+c.current.stack+"\n\n"),e}return u((function(){f.current=e,d.current=h,p.current=i,c.current=void 0})),u((function(){function e(){try{var e=n.getState();if(e===d.current)return;var r=f.current(e);if(t(r,p.current))return;p.current=r,d.current=e}catch(e){c.current=e}a()}return s.onStateChange=e,s.trySubscribe(),e(),function(){return s.tryUnsubscribe()}}),[n,s]),i}(e,n,o.store,o.subscription);return(0,r.useDebugValue)(i),i}}var Y,X=Q(),J=n(3935);Y=J.unstable_batchedUpdates,i=Y},8359:function(e,t){"use strict";var n=60103,r=60106,o=60107,i=60108,a=60114,s=60109,l=60110,u=60112,c=60113,f=60120,d=60115,p=60116;if("function"==typeof Symbol&&Symbol.for){var h=Symbol.for;n=h("react.element"),r=h("react.portal"),o=h("react.fragment"),i=h("react.strict_mode"),a=h("react.profiler"),s=h("react.provider"),l=h("react.context"),u=h("react.forward_ref"),c=h("react.suspense"),f=h("react.suspense_list"),d=h("react.memo"),p=h("react.lazy"),h("react.block"),h("react.server.block"),h("react.fundamental"),h("react.debug_trace_mode"),h("react.legacy_hidden")}t.isContextConsumer=function(e){return function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case a:case i:case c:case f:return e;default:switch(e=e&&e.$$typeof){case l:case u:case p:case d:case s:return e;default:return t}}case r:return t}}}(e)===l}},2973:function(e,t,n){"use strict";e.exports=n(8359)},6585:function(e){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},9658:function(e,t,n){var r=n(6585);e.exports=function e(t,n,o){return r(n)||(o=n||o,n=[]),o=o||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var o=[],i=0;i<t.length;i++)o.push(e(t[i],n,r).source);return c(new RegExp("(?:"+o.join("|")+")",f(r)),n)}(t,n,o):function(e,t,n){return d(i(e,n),t,n)}(t,n,o)},e.exports.parse=i,e.exports.compile=function(e,t){return s(i(e,t),t)},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,s="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(s+=e.slice(a,p),a=p+f.length,d)s+=d[1];else{var h=e[a],m=n[2],v=n[3],g=n[4],y=n[5],b=n[6],w=n[7];s&&(r.push(s),s="");var _=null!=m&&null!=h&&h!==m,x="+"===b||"*"===b,k="?"===b||"*"===b,S=n[2]||c,E=g||y;r.push({name:v||i++,prefix:m||"",delimiter:S,optional:k,repeat:x,partial:_,asterisk:!!w,pattern:E?u(E):w?".*":"[^"+l(S)+"]+?"})}}return a<e.length&&(s+=e.substr(a)),s&&r.push(s),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",s=t||{},l=(o||{}).pretty?a:encodeURIComponent,u=0;u<e.length;u++){var c=e[u];if("string"!=typeof c){var f,d=s[c.name];if(null==d){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!n[u].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(d),!n[u].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",s=0;s<e.length;s++){var u=e[s];if("string"==typeof u)a+=l(u);else{var d=l(u.prefix),p="(?:"+u.pattern+")";t.push(u),u.repeat&&(p+="(?:"+d+p+")*"),a+=p=u.optional?u.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=l(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+a,f(n)),t)}},86:function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for;n&&Symbol.for("react.element"),n&&Symbol.for("react.portal"),n&&Symbol.for("react.fragment"),n&&Symbol.for("react.strict_mode"),n&&Symbol.for("react.profiler"),n&&Symbol.for("react.provider"),n&&Symbol.for("react.context"),n&&Symbol.for("react.async_mode"),n&&Symbol.for("react.concurrent_mode"),n&&Symbol.for("react.forward_ref"),n&&Symbol.for("react.suspense"),n&&Symbol.for("react.suspense_list"),n&&Symbol.for("react.memo"),n&&Symbol.for("react.lazy"),n&&Symbol.for("react.block"),n&&Symbol.for("react.fundamental"),n&&Symbol.for("react.responder"),n&&Symbol.for("react.scope")},663:function(e,t,n){"use strict";n(86)},5251:function(e,t,n){"use strict";n(7418);var r=n(7294),o=60103;if(t.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var i=Symbol.for;o=i("react.element"),t.Fragment=i("react.fragment")}var a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s=Object.prototype.hasOwnProperty,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,i={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)s.call(t,r)&&!l.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===i[r]&&(i[r]=t[r]);return{$$typeof:o,type:e,key:u,ref:c,props:i,_owner:a.current}}t.jsx=u,t.jsxs=u},2408:function(e,t,n){"use strict";var r=n(7418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,l=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),s=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),u=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},_=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,i={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)_.call(t,r)&&!x.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:s,props:i,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var E=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,n,r,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case i:l=!0}}if(l)return a=a(l=e),e=""===r?"."+P(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(E,"$&/")+"/"),O(a,t,n,"",(function(e){return e}))):null!=a&&(S(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(E,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+P(s=e[u],u);l+=O(s,t,n,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=O(s=s.value,t,n,c=r+P(s,u++),a);else if("object"===s)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function C(e,t,n){if(null==e)return e;var r=[],o=0;return O(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function j(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function R(){var e=T.current;if(null===e)throw Error(p(321));return e}var A={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:C,forEach:function(e,t,n){C(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return C(e,(function(){t++})),t},toArray:function(e){return C(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)_.call(t,c)&&!x.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){u=Array(c);for(var f=0;f<c;f++)u[f]=arguments[f+2];i.children=u}return{$$typeof:o,type:e.type,key:a,ref:s,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:j}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return R().useCallback(e,t)},t.useContext=function(e,t){return R().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return R().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return R().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return R().useLayoutEffect(e,t)},t.useMemo=function(e,t){return R().useMemo(e,t)},t.useReducer=function(e,t,n){return R().useReducer(e,t,n)},t.useRef=function(e){return R().useRef(e)},t.useState=function(e){return R().useState(e)},t.version="17.0.2"},7294:function(e,t,n){"use strict";e.exports=n(2408)},5893:function(e,t,n){"use strict";e.exports=n(5251)},4500:function(e,t,n){!function(e){"use strict";function t(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0})}function o(e,t,n){o.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function i(e,t){i.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0})}function a(e,t){a.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0})}function s(e,t,n){s.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function l(e,t,n){var r=e.slice((n||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,r),e}function u(e){var t=void 0===e?"undefined":E(e);return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function c(e,t,n,r,f,d,p){p=p||[];var h=(f=f||[]).slice(0);if(void 0!==d){if(r){if("function"==typeof r&&r(h,d))return;if("object"===(void 0===r?"undefined":E(r))){if(r.prefilter&&r.prefilter(h,d))return;if(r.normalize){var m=r.normalize(h,d,e,t);m&&(e=m[0],t=m[1])}}}h.push(d)}"regexp"===u(e)&&"regexp"===u(t)&&(e=e.toString(),t=t.toString());var v=void 0===e?"undefined":E(e),g=void 0===t?"undefined":E(t),y="undefined"!==v||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(d),b="undefined"!==g||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(d);if(!y&&b)n(new i(h,t));else if(!b&&y)n(new a(h,e));else if(u(e)!==u(t))n(new o(h,e,t));else if("date"===u(e)&&e-t!=0)n(new o(h,e,t));else if("object"===v&&null!==e&&null!==t)if(p.filter((function(t){return t.lhs===e})).length)e!==t&&n(new o(h,e,t));else{if(p.push({lhs:e,rhs:t}),Array.isArray(e)){var w;for(e.length,w=0;w<e.length;w++)w>=t.length?n(new s(h,w,new a(void 0,e[w]))):c(e[w],t[w],n,r,h,w,p);for(;w<t.length;)n(new s(h,w,new i(void 0,t[w++])))}else{var _=Object.keys(e),x=Object.keys(t);_.forEach((function(o,i){var a=x.indexOf(o);a>=0?(c(e[o],t[o],n,r,h,o,p),x=l(x,a)):c(e[o],void 0,n,r,h,o,p)})),x.forEach((function(e){c(void 0,t[e],n,r,h,e,p)}))}p.length=p.length-1}else e!==t&&("number"===v&&isNaN(e)&&isNaN(t)||n(new o(h,e,t)))}function f(e,t,n,r){return r=r||[],c(e,t,(function(e){e&&r.push(e)}),n),r.length?r:void 0}function d(e,t,n){if(n.path&&n.path.length){var r,o=e[t],i=n.path.length-1;for(r=0;r<i;r++)o=o[n.path[r]];switch(n.kind){case"A":d(o[n.path[r]],n.index,n.item);break;case"D":delete o[n.path[r]];break;case"E":case"N":o[n.path[r]]=n.rhs}}else switch(n.kind){case"A":d(e[t],n.index,n.item);break;case"D":e=l(e,t);break;case"E":case"N":e[t]=n.rhs}return e}function p(e,t,n){if(e&&t&&n&&n.kind){for(var r=e,o=-1,i=n.path?n.path.length-1:0;++o<i;)void 0===r[n.path[o]]&&(r[n.path[o]]="number"==typeof n.path[o]?[]:{}),r=r[n.path[o]];switch(n.kind){case"A":d(n.path?r[n.path[o]]:r,n.index,n.item);break;case"D":delete r[n.path[o]];break;case"E":case"N":r[n.path[o]]=n.rhs}}}function h(e,t,n){if(n.path&&n.path.length){var r,o=e[t],i=n.path.length-1;for(r=0;r<i;r++)o=o[n.path[r]];switch(n.kind){case"A":h(o[n.path[r]],n.index,n.item);break;case"D":case"E":o[n.path[r]]=n.lhs;break;case"N":delete o[n.path[r]]}}else switch(n.kind){case"A":h(e[t],n.index,n.item);break;case"D":case"E":e[t]=n.lhs;break;case"N":e=l(e,t)}return e}function m(e){return"color: "+C[e].color+"; font-weight: bold"}function v(e,t,n,r){var o=f(e,t);try{r?n.groupCollapsed("diff"):n.group("diff")}catch(e){n.log("diff")}o?o.forEach((function(e){var t=e.kind,r=function(e){var t=e.kind,n=e.path,r=e.lhs,o=e.rhs,i=e.index,a=e.item;switch(t){case"E":return[n.join("."),r,"→",o];case"N":return[n.join("."),o];case"D":return[n.join(".")];case"A":return[n.join(".")+"["+i+"]",a];default:return[]}}(e);n.log.apply(n,["%c "+C[t].text,m(t)].concat(P(r)))})):n.log("—— no diff ——");try{n.groupEnd()}catch(e){n.log("—— diff end —— ")}}function g(e,t,n,r){switch(void 0===e?"undefined":E(e)){case"object":return"function"==typeof e[r]?e[r].apply(e,P(n)):e[r];case"function":return e(t);default:return e}}function y(e,t){var n=t.logger,r=t.actionTransformer,o=t.titleFormatter,i=void 0===o?function(e){var t=e.timestamp,n=e.duration;return function(e,r,o){var i=["action"];return i.push("%c"+String(e.type)),t&&i.push("%c@ "+r),n&&i.push("%c(in "+o.toFixed(2)+" ms)"),i.join(" ")}}(t):o,a=t.collapsed,s=t.colors,l=t.level,u=t.diff,c=void 0===t.titleFormatter;e.forEach((function(o,f){var d=o.started,p=o.startedTime,h=o.action,m=o.prevState,y=o.error,b=o.took,w=o.nextState,_=e[f+1];_&&(w=_.prevState,b=_.started-d);var x=r(h),S="function"==typeof a?a((function(){return w}),h,o):a,E=k(p),P=s.title?"color: "+s.title(x)+";":"",O=["color: gray; font-weight: lighter;"];O.push(P),t.timestamp&&O.push("color: gray; font-weight: lighter;"),t.duration&&O.push("color: gray; font-weight: lighter;");var C=i(x,E,b);try{S?s.title&&c?n.groupCollapsed.apply(n,["%c "+C].concat(O)):n.groupCollapsed(C):s.title&&c?n.group.apply(n,["%c "+C].concat(O)):n.group(C)}catch(e){n.log(C)}var j=g(l,x,[m],"prevState"),T=g(l,x,[x],"action"),R=g(l,x,[y,m],"error"),A=g(l,x,[w],"nextState");if(j)if(s.prevState){var Z="color: "+s.prevState(m)+"; font-weight: bold";n[j]("%c prev state",Z,m)}else n[j]("prev state",m);if(T)if(s.action){var M="color: "+s.action(x)+"; font-weight: bold";n[T]("%c action    ",M,x)}else n[T]("action    ",x);if(y&&R)if(s.error){var N="color: "+s.error(y,m)+"; font-weight: bold;";n[R]("%c error     ",N,y)}else n[R]("error     ",y);if(A)if(s.nextState){var I="color: "+s.nextState(w)+"; font-weight: bold";n[A]("%c next state",I,w)}else n[A]("next state",w);u&&v(m,w,n,S);try{n.groupEnd()}catch(e){n.log("—— log end ——")}}))}function b(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},j,e),n=t.logger,r=t.stateTransformer,o=t.errorTransformer,i=t.predicate,a=t.logErrors,s=t.diffPredicate;if(void 0===n)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var l=[];return function(e){var n=e.getState;return function(e){return function(u){if("function"==typeof i&&!i(n,u))return e(u);var c={};l.push(c),c.started=S.now(),c.startedTime=new Date,c.prevState=r(n()),c.action=u;var f=void 0;if(a)try{f=e(u)}catch(e){c.error=o(e)}else f=e(u);c.took=S.now()-c.started,c.nextState=r(n());var d=t.diff&&"function"==typeof s?s(n,u):t.diff;if(y(l,Object.assign({},t,{diff:d})),l.length=0,c.error)throw c.error;return f}}}}var w,_,x=function(e,t){return function(e,t){return new Array(t+1).join(e)}("0",t-e.toString().length)+e},k=function(e){return x(e.getHours(),2)+":"+x(e.getMinutes(),2)+":"+x(e.getSeconds(),2)+"."+x(e.getMilliseconds(),3)},S="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},P=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},O=[];w="object"===(void 0===n.g?"undefined":E(n.g))&&n.g?n.g:"undefined"!=typeof window?window:{},(_=w.DeepDiff)&&O.push((function(){void 0!==_&&w.DeepDiff===f&&(w.DeepDiff=_,_=void 0)})),t(o,r),t(i,r),t(a,r),t(s,r),Object.defineProperties(f,{diff:{value:f,enumerable:!0},observableDiff:{value:c,enumerable:!0},applyDiff:{value:function(e,t,n){e&&t&&c(e,t,(function(r){n&&!n(e,t,r)||p(e,t,r)}))},enumerable:!0},applyChange:{value:p,enumerable:!0},revertChange:{value:function(e,t,n){if(e&&t&&n&&n.kind){var r,o,i=e;for(o=n.path.length-1,r=0;r<o;r++)void 0===i[n.path[r]]&&(i[n.path[r]]={}),i=i[n.path[r]];switch(n.kind){case"A":h(i[n.path[r]],n.index,n.item);break;case"D":case"E":i[n.path[r]]=n.lhs;break;case"N":delete i[n.path[r]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==_},enumerable:!0},noConflict:{value:function(){return O&&(O.forEach((function(e){e()})),O=null),f},enumerable:!0}});var C={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},j={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,n=e.getState;return"function"==typeof t||"function"==typeof n?b()({dispatch:t,getState:n}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};e.defaults=j,e.createLogger=b,e.logger=T,e.default=T,Object.defineProperty(e,"__esModule",{value:!0})}(t)},53:function(e,t){"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,f=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,_=w.port2;w.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+y;try{v(!0,e)?_.postMessage(null):(m=!1,v=null)}catch(e){throw _.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,_.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<E(o,t)))break e;e[r]=t,e[n]=o,n=r}}function k(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],s=i+1,l=e[s];if(void 0!==a&&0>E(a,n))void 0!==l&&0>E(l,a)?(e[r]=l,e[s]=n,r=s):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>E(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function E(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],O=[],C=1,j=null,T=3,R=!1,A=!1,Z=!1;function M(e){for(var t=k(O);null!==t;){if(null===t.callback)S(O);else{if(!(t.startTime<=e))break;S(O),t.sortIndex=t.expirationTime,x(P,t)}t=k(O)}}function N(e){if(Z=!1,M(e),!A)if(null!==k(P))A=!0,n(I);else{var t=k(O);null!==t&&r(N,t.startTime-e)}}function I(e,n){A=!1,Z&&(Z=!1,o()),R=!0;var i=T;try{for(M(n),j=k(P);null!==j&&(!(j.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=j.callback;if("function"==typeof a){j.callback=null,T=j.priorityLevel;var s=a(j.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?j.callback=s:j===k(P)&&S(P),M(n)}else S(P);j=k(P)}if(null!==j)var l=!0;else{var u=k(O);null!==u&&r(N,u.startTime-n),l=!1}return l}finally{j=null,T=i,R=!1}}var L=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||R||(A=!0,n(I))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return k(P)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=L,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,i,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:C++,callback:i,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(e.sortIndex=a,x(O,e),null===k(P)&&e===k(O)&&(Z?o():Z=!0,r(N,a-s))):(e.sortIndex=l,x(P,e),A||R||(A=!0,n(I))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},3840:function(e,t,n){"use strict";e.exports=n(53)},8322:function(e){e.exports=function(e){"use strict";var t=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];function n(e,t){var n=e[0],r=e[1],o=e[2],i=e[3];r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&o|~r&i)+t[0]-680876936|0)<<7|n>>>25)+r|0)&r|~n&o)+t[1]-389564586|0)<<12|i>>>20)+n|0)&n|~i&r)+t[2]+606105819|0)<<17|o>>>15)+i|0)&i|~o&n)+t[3]-1044525330|0)<<22|r>>>10)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&o|~r&i)+t[4]-176418897|0)<<7|n>>>25)+r|0)&r|~n&o)+t[5]+1200080426|0)<<12|i>>>20)+n|0)&n|~i&r)+t[6]-1473231341|0)<<17|o>>>15)+i|0)&i|~o&n)+t[7]-45705983|0)<<22|r>>>10)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&o|~r&i)+t[8]+1770035416|0)<<7|n>>>25)+r|0)&r|~n&o)+t[9]-1958414417|0)<<12|i>>>20)+n|0)&n|~i&r)+t[10]-42063|0)<<17|o>>>15)+i|0)&i|~o&n)+t[11]-1990404162|0)<<22|r>>>10)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&o|~r&i)+t[12]+1804603682|0)<<7|n>>>25)+r|0)&r|~n&o)+t[13]-40341101|0)<<12|i>>>20)+n|0)&n|~i&r)+t[14]-1502002290|0)<<17|o>>>15)+i|0)&i|~o&n)+t[15]+1236535329|0)<<22|r>>>10)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&i|o&~i)+t[1]-165796510|0)<<5|n>>>27)+r|0)&o|r&~o)+t[6]-1069501632|0)<<9|i>>>23)+n|0)&r|n&~r)+t[11]+643717713|0)<<14|o>>>18)+i|0)&n|i&~n)+t[0]-373897302|0)<<20|r>>>12)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&i|o&~i)+t[5]-701558691|0)<<5|n>>>27)+r|0)&o|r&~o)+t[10]+38016083|0)<<9|i>>>23)+n|0)&r|n&~r)+t[15]-660478335|0)<<14|o>>>18)+i|0)&n|i&~n)+t[4]-405537848|0)<<20|r>>>12)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&i|o&~i)+t[9]+568446438|0)<<5|n>>>27)+r|0)&o|r&~o)+t[14]-1019803690|0)<<9|i>>>23)+n|0)&r|n&~r)+t[3]-187363961|0)<<14|o>>>18)+i|0)&n|i&~n)+t[8]+1163531501|0)<<20|r>>>12)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&i|o&~i)+t[13]-1444681467|0)<<5|n>>>27)+r|0)&o|r&~o)+t[2]-51403784|0)<<9|i>>>23)+n|0)&r|n&~r)+t[7]+1735328473|0)<<14|o>>>18)+i|0)&n|i&~n)+t[12]-1926607734|0)<<20|r>>>12)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r^o^i)+t[5]-378558|0)<<4|n>>>28)+r|0)^r^o)+t[8]-2022574463|0)<<11|i>>>21)+n|0)^n^r)+t[11]+1839030562|0)<<16|o>>>16)+i|0)^i^n)+t[14]-35309556|0)<<23|r>>>9)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r^o^i)+t[1]-1530992060|0)<<4|n>>>28)+r|0)^r^o)+t[4]+1272893353|0)<<11|i>>>21)+n|0)^n^r)+t[7]-155497632|0)<<16|o>>>16)+i|0)^i^n)+t[10]-1094730640|0)<<23|r>>>9)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r^o^i)+t[13]+681279174|0)<<4|n>>>28)+r|0)^r^o)+t[0]-358537222|0)<<11|i>>>21)+n|0)^n^r)+t[3]-722521979|0)<<16|o>>>16)+i|0)^i^n)+t[6]+76029189|0)<<23|r>>>9)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r^o^i)+t[9]-640364487|0)<<4|n>>>28)+r|0)^r^o)+t[12]-421815835|0)<<11|i>>>21)+n|0)^n^r)+t[15]+530742520|0)<<16|o>>>16)+i|0)^i^n)+t[2]-995338651|0)<<23|r>>>9)+o|0,r=((r+=((i=((i+=(r^((n=((n+=(o^(r|~i))+t[0]-198630844|0)<<6|n>>>26)+r|0)|~o))+t[7]+1126891415|0)<<10|i>>>22)+n|0)^((o=((o+=(n^(i|~r))+t[14]-1416354905|0)<<15|o>>>17)+i|0)|~n))+t[5]-57434055|0)<<21|r>>>11)+o|0,r=((r+=((i=((i+=(r^((n=((n+=(o^(r|~i))+t[12]+1700485571|0)<<6|n>>>26)+r|0)|~o))+t[3]-1894986606|0)<<10|i>>>22)+n|0)^((o=((o+=(n^(i|~r))+t[10]-1051523|0)<<15|o>>>17)+i|0)|~n))+t[1]-2054922799|0)<<21|r>>>11)+o|0,r=((r+=((i=((i+=(r^((n=((n+=(o^(r|~i))+t[8]+1873313359|0)<<6|n>>>26)+r|0)|~o))+t[15]-30611744|0)<<10|i>>>22)+n|0)^((o=((o+=(n^(i|~r))+t[6]-1560198380|0)<<15|o>>>17)+i|0)|~n))+t[13]+1309151649|0)<<21|r>>>11)+o|0,r=((r+=((i=((i+=(r^((n=((n+=(o^(r|~i))+t[4]-145523070|0)<<6|n>>>26)+r|0)|~o))+t[11]-1120210379|0)<<10|i>>>22)+n|0)^((o=((o+=(n^(i|~r))+t[2]+718787259|0)<<15|o>>>17)+i|0)|~n))+t[9]-343485551|0)<<21|r>>>11)+o|0,e[0]=n+e[0]|0,e[1]=r+e[1]|0,e[2]=o+e[2]|0,e[3]=i+e[3]|0}function r(e){var t,n=[];for(t=0;t<64;t+=4)n[t>>2]=e.charCodeAt(t)+(e.charCodeAt(t+1)<<8)+(e.charCodeAt(t+2)<<16)+(e.charCodeAt(t+3)<<24);return n}function o(e){var t,n=[];for(t=0;t<64;t+=4)n[t>>2]=e[t]+(e[t+1]<<8)+(e[t+2]<<16)+(e[t+3]<<24);return n}function i(e){var t,o,i,a,s,l,u=e.length,c=[1732584193,-271733879,-1732584194,271733878];for(t=64;t<=u;t+=64)n(c,r(e.substring(t-64,t)));for(o=(e=e.substring(t-64)).length,i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t=0;t<o;t+=1)i[t>>2]|=e.charCodeAt(t)<<(t%4<<3);if(i[t>>2]|=128<<(t%4<<3),t>55)for(n(c,i),t=0;t<16;t+=1)i[t]=0;return a=(a=8*u).toString(16).match(/(.*?)(.{0,8})$/),s=parseInt(a[2],16),l=parseInt(a[1],16)||0,i[14]=s,i[15]=l,n(c,i),c}function a(e){var n,r="";for(n=0;n<4;n+=1)r+=t[e>>8*n+4&15]+t[e>>8*n&15];return r}function s(e){var t;for(t=0;t<e.length;t+=1)e[t]=a(e[t]);return e.join("")}function l(e){return/[\u0080-\uFFFF]/.test(e)&&(e=unescape(encodeURIComponent(e))),e}function u(e){var t,n=[],r=e.length;for(t=0;t<r-1;t+=2)n.push(parseInt(e.substr(t,2),16));return String.fromCharCode.apply(String,n)}function c(){this.reset()}return s(i("hello")),"undefined"==typeof ArrayBuffer||ArrayBuffer.prototype.slice||function(){function e(e,t){return(e=0|e||0)<0?Math.max(e+t,0):Math.min(e,t)}ArrayBuffer.prototype.slice=function(t,n){var r,o,i,a,s=this.byteLength,l=e(t,s),u=s;return undefined!==n&&(u=e(n,s)),l>u?new ArrayBuffer(0):(r=u-l,o=new ArrayBuffer(r),i=new Uint8Array(o),a=new Uint8Array(this,l,r),i.set(a),o)}}(),c.prototype.append=function(e){return this.appendBinary(l(e)),this},c.prototype.appendBinary=function(e){this._buff+=e,this._length+=e.length;var t,o=this._buff.length;for(t=64;t<=o;t+=64)n(this._hash,r(this._buff.substring(t-64,t)));return this._buff=this._buff.substring(t-64),this},c.prototype.end=function(e){var t,n,r=this._buff,o=r.length,i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(t=0;t<o;t+=1)i[t>>2]|=r.charCodeAt(t)<<(t%4<<3);return this._finish(i,o),n=s(this._hash),e&&(n=u(n)),this.reset(),n},c.prototype.reset=function(){return this._buff="",this._length=0,this._hash=[1732584193,-271733879,-1732584194,271733878],this},c.prototype.getState=function(){return{buff:this._buff,length:this._length,hash:this._hash.slice()}},c.prototype.setState=function(e){return this._buff=e.buff,this._length=e.length,this._hash=e.hash,this},c.prototype.destroy=function(){delete this._hash,delete this._buff,delete this._length},c.prototype._finish=function(e,t){var r,o,i,a=t;if(e[a>>2]|=128<<(a%4<<3),a>55)for(n(this._hash,e),a=0;a<16;a+=1)e[a]=0;r=(r=8*this._length).toString(16).match(/(.*?)(.{0,8})$/),o=parseInt(r[2],16),i=parseInt(r[1],16)||0,e[14]=o,e[15]=i,n(this._hash,e)},c.hash=function(e,t){return c.hashBinary(l(e),t)},c.hashBinary=function(e,t){var n=s(i(e));return t?u(n):n},c.ArrayBuffer=function(){this.reset()},c.ArrayBuffer.prototype.append=function(e){var t,r,i,a,s,l=(r=this._buff.buffer,i=e,a=!0,(s=new Uint8Array(r.byteLength+i.byteLength)).set(new Uint8Array(r)),s.set(new Uint8Array(i),r.byteLength),a?s:s.buffer),u=l.length;for(this._length+=e.byteLength,t=64;t<=u;t+=64)n(this._hash,o(l.subarray(t-64,t)));return this._buff=t-64<u?new Uint8Array(l.buffer.slice(t-64)):new Uint8Array(0),this},c.ArrayBuffer.prototype.end=function(e){var t,n,r=this._buff,o=r.length,i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(t=0;t<o;t+=1)i[t>>2]|=r[t]<<(t%4<<3);return this._finish(i,o),n=s(this._hash),e&&(n=u(n)),this.reset(),n},c.ArrayBuffer.prototype.reset=function(){return this._buff=new Uint8Array(0),this._length=0,this._hash=[1732584193,-271733879,-1732584194,271733878],this},c.ArrayBuffer.prototype.getState=function(){var e,t=c.prototype.getState.call(this);return t.buff=(e=t.buff,String.fromCharCode.apply(null,new Uint8Array(e))),t},c.ArrayBuffer.prototype.setState=function(e){return e.buff=function(e,t){var n,r=e.length,o=new ArrayBuffer(r),i=new Uint8Array(o);for(n=0;n<r;n+=1)i[n]=e.charCodeAt(n);return t?i:o}(e.buff,!0),c.prototype.setState.call(this,e)},c.ArrayBuffer.prototype.destroy=c.prototype.destroy,c.ArrayBuffer.prototype._finish=c.prototype._finish,c.ArrayBuffer.hash=function(e,t){var r=s(function(e){var t,r,i,a,s,l,u=e.length,c=[1732584193,-271733879,-1732584194,271733878];for(t=64;t<=u;t+=64)n(c,o(e.subarray(t-64,t)));for(r=(e=t-64<u?e.subarray(t-64):new Uint8Array(0)).length,i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t=0;t<r;t+=1)i[t>>2]|=e[t]<<(t%4<<3);if(i[t>>2]|=128<<(t%4<<3),t>55)for(n(c,i),t=0;t<16;t+=1)i[t]=0;return a=(a=8*u).toString(16).match(/(.*?)(.{0,8})$/),s=parseInt(a[2],16),l=parseInt(a[1],16)||0,i[14]=s,i[15]=l,n(c,i),c}(new Uint8Array(e)));return t?u(r):r},c}()},7961:function(e,t,n){var r=n(3379),o=n(2955);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,""]]);r(o,{insert:"head",singleton:!1}),e.exports=o.locals||{}},3379:function(e,t,n){"use strict";var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function a(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var s=e[o],l=t.base?s[0]+t.base:s[0],u=n[l]||0,c="".concat(l," ").concat(u);n[l]=u+1;var f=a(c),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:c,updater:m(d,t),references:1}),r.push(c)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,c=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=c(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,h=0;function m(e,t){var n,r,o;if(t.singleton){var i=h++;n=p||(p=l(t)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=l(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var l=s(e,t),u=0;u<n.length;u++){var c=a(n[u]);0===i[c].references&&(i[c].updater(),i.splice(c,1))}n=l}}}},3684:function(e,t){"use strict";function n(e,t,n){var r=n[n.length-1];e===r.element&&(n.pop(),r=n[n.length-1]);var o=r.element,i=r.index;Array.isArray(o)?o.push(e):i===t.length-2?o[t.pop()]=e:t.push(e)}t.stringify=function(e){var t=[];t.push({obj:e});for(var n,r,o,i,a,s,l,u,c,f,d="";n=t.pop();)if(r=n.obj,d+=n.prefix||"",o=n.val||"")d+=o;else if("object"!=typeof r)d+=void 0===r?null:JSON.stringify(r);else if(null===r)d+="null";else if(Array.isArray(r)){for(t.push({val:"]"}),i=r.length-1;i>=0;i--)a=0===i?"":",",t.push({obj:r[i],prefix:a});t.push({val:"["})}else{for(l in s=[],r)r.hasOwnProperty(l)&&s.push(l);for(t.push({val:"}"}),i=s.length-1;i>=0;i--)c=r[u=s[i]],f=i>0?",":"",f+=JSON.stringify(u)+":",t.push({obj:c,prefix:f});t.push({val:"{"})}return d},t.parse=function(e){for(var t,r,o,i,a,s,l,u,c,f=[],d=[],p=0;;)if("}"!==(t=e[p++])&&"]"!==t&&void 0!==t)switch(t){case" ":case"\t":case"\n":case":":case",":break;case"n":p+=3,n(null,f,d);break;case"t":p+=3,n(!0,f,d);break;case"f":p+=4,n(!1,f,d);break;case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case"-":for(r="",p--;;){if(o=e[p++],!/[\d\.\-e\+]/.test(o)){p--;break}r+=o}n(parseFloat(r),f,d);break;case'"':for(i="",a=void 0,s=0;'"'!==(l=e[p++])||"\\"===a&&s%2==1;)i+=l,"\\"===(a=l)?s++:s=0;n(JSON.parse('"'+i+'"'),f,d);break;case"[":u={element:[],index:f.length},f.push(u.element),d.push(u);break;case"{":c={element:{},index:f.length},f.push(c.element),d.push(c);break;default:throw new Error("unexpectedly reached end of input: "+t)}else{if(1===f.length)return f.pop();n(f.pop(),f,d)}}},5961:function(){},4836:function(e){e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},7462:function(e,t,n){"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:function(){return r}})},3366:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:function(){return r}})}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e].call(i.exports,i,i.exports,o),i.exports}o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,{a:t}),t},t=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var a={};e=e||[null,t({}),t([]),t(t)];for(var s=2&r&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((function(e){a[e]=function(){return n[e]}}));return a.default=function(){return n},o.d(i,a),i},o.d=function(e,t){for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.p="",o.nc=void 0,function(){"use strict";var e=o(7294),t=o(3935);function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(e){var t=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===r(t)?t:String(t)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,i(r.key),r)}}function s(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e,t){return u=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},u(e,t)}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&u(e,t)}function f(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return l(e)}function d(e){return d=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},d(e)}function p(e,t,n){return(t=i(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=o(8216);function m(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,u(e,t)}var v=o(5697),g=o.n(v),y=o(7462);function b(e){return"/"===e.charAt(0)}function w(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var _=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&b(e),a=t&&b(t),s=i||a;if(e&&b(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var l=o[o.length-1];n="."===l||".."===l||""===l}else n=!1;for(var u=0,c=o.length;c>=0;c--){var f=o[c];"."===f?w(o,c):".."===f?(w(o,c),u++):u&&(w(o,c),u--)}if(!s)for(;u--;u)o.unshift("..");!s||""===o[0]||o[0]&&b(o[0])||o.unshift("");var d=o.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d};function x(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var k=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=x(t),o=x(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1},S=!0,E="Invariant failed";function P(e,t){if(!e){if(S)throw new Error(E);var n="function"==typeof t?t():t,r=n?"".concat(E,": ").concat(n):E;throw new Error(r)}}function O(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function C(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e),o.state=t):(void 0===(o=(0,y.Z)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=_(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}var j=!("undefined"==typeof window||!window.document||!window.document.createElement);function T(e,t){t(window.confirm(e))}var R="popstate",A="hashchange";function Z(){try{return window.history.state||{}}catch(e){return{}}}var M=o(9658),N=o.n(M),I=(o(663),o(3366)),L=(o(8679),1073741823),$="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==o.g?o.g:{},D=e.createContext||function(t,n){var r,o,i,a="__create-react-context-"+(($[i="__global_unique_id__"]=($[i]||0)+1)+"__"),s=function(e){function t(){for(var t,n,r,o=arguments.length,i=new Array(o),a=0;a<o;a++)i[a]=arguments[a];return(t=e.call.apply(e,[this].concat(i))||this).emitter=(n=t.props.value,r=[],{on:function(e){r.push(e)},off:function(e){r=r.filter((function(t){return t!==e}))},get:function(){return n},set:function(e,t){n=e,r.forEach((function(e){return e(n,t)}))}}),t}m(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[a]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?t=0:(t="function"==typeof n?n(r,o):L,0!=(t|=0)&&this.emitter.set(e.value,t))}var i,a},r.render=function(){return this.props.children},t}(e.Component);s.childContextTypes=((r={})[a]=g().object.isRequired,r);var l=function(e){function n(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).observedBits=void 0,t.state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}m(n,e);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?L:t},r.componentDidMount=function(){this.context[a]&&this.context[a].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?L:e},r.componentWillUnmount=function(){this.context[a]&&this.context[a].off(this.onUpdate)},r.getValue=function(){return this.context[a]?this.context[a].get():t},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(e.Component);return l.contextTypes=((o={})[a]=g().object,o),{Provider:s,Consumer:l}},z=function(e){var t=D();return t.displayName=e,t},F=z("Router-History"),B=z("Router"),q=function(t){function n(e){var n;return(n=t.call(this,e)||this).state={location:e.history.location},n._isMounted=!1,n._pendingLocation=null,e.staticContext||(n.unlisten=e.history.listen((function(e){n._pendingLocation=e}))),n}m(n,t),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=n.prototype;return r.componentDidMount=function(){var e=this;this._isMounted=!0,this.unlisten&&this.unlisten(),this.props.staticContext||(this.unlisten=this.props.history.listen((function(t){e._isMounted&&e.setState({location:t})}))),this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},r.render=function(){return e.createElement(B.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(F.Provider,{children:this.props.children||null,value:this.props.history}))},n}(e.Component);e.Component;var W=function(e){function t(){return e.apply(this,arguments)||this}m(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(e.Component),U={},V=1e4,H=0;function K(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(U[e])return U[e];var t=N().compile(e);return H<V&&(U[e]=t,H++),t}(e)(t,{pretty:!0})}function G(t){var n=t.computedMatch,r=t.to,o=t.push,i=void 0!==o&&o;return e.createElement(B.Consumer,null,(function(t){t||P(!1);var o=t.history,a=t.staticContext,s=i?o.push:o.replace,l=C(n?"string"==typeof r?K(r,n.params):(0,y.Z)({},r,{pathname:K(r.pathname,n.params)}):r);return a?(s(l),null):e.createElement(W,{onMount:function(){s(l)},onUpdate:function(e,t){var n=C(t.to);(function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&k(e.state,t.state)})(n,(0,y.Z)({},l,{key:n.key}))||s(l)},to:r})}))}var Q={},Y=1e4,X=0;function J(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,s=void 0!==a&&a,l=n.sensitive,u=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=Q[n]||(Q[n]={});if(r[e])return r[e];var o=[],i={regexp:N()(e,o,t),keys:o};return X<Y&&(r[e]=i,X++),i}(n,{end:i,strict:s,sensitive:u}),o=r.regexp,a=r.keys,l=o.exec(e);if(!l)return null;var c=l[0],f=l.slice(1),d=e===c;return i&&!d?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var ee=function(t){function n(){return t.apply(this,arguments)||this}return m(n,t),n.prototype.render=function(){var t=this;return e.createElement(B.Consumer,null,(function(n){n||P(!1);var r=t.props.location||n.location,o=t.props.computedMatch?t.props.computedMatch:t.props.path?J(r.pathname,t.props):n.match,i=(0,y.Z)({},n,{location:r,match:o}),a=t.props,s=a.children,l=a.component,u=a.render;return Array.isArray(s)&&function(t){return 0===e.Children.count(t)}(s)&&(s=null),e.createElement(B.Provider,{value:i},i.match?s?"function"==typeof s?s(i):s:l?e.createElement(l,i):u?u(i):null:"function"==typeof s?s(i):null)}))},n}(e.Component);e.Component;var te=function(t){function n(){return t.apply(this,arguments)||this}return m(n,t),n.prototype.render=function(){var t=this;return e.createElement(B.Consumer,null,(function(n){n||P(!1);var r,o,i=t.props.location||n.location;return e.Children.forEach(t.props.children,(function(t){if(null==o&&e.isValidElement(t)){r=t;var a=t.props.path||t.props.from;o=a?J(i.pathname,(0,y.Z)({},t.props,{path:a})):n.match}})),o?e.cloneElement(r,{location:i,computedMatch:o}):null}))},n}(e.Component);e.useContext;var ne=o(6784),re=(o(3619),o(6010)),oe=o(5408),ie=o(9766),ae=o(8010);const se=["sx"],le=e=>{var t,n;const r={systemProps:{},otherProps:{}},o=null!=(t=null==e||null==(n=e.theme)?void 0:n.unstable_sxConfig)?t:ae.Z;return Object.keys(e).forEach((t=>{o[t]?r.systemProps[t]=e[t]:r.otherProps[t]=e[t]})),r};function ue(e){const{sx:t}=e,n=(0,I.Z)(e,se),{systemProps:r,otherProps:o}=le(n);let i;return i=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return(0,ie.P)(n)?(0,y.Z)({},r,n):r}:(0,y.Z)({},r,t),(0,y.Z)({},o,{sx:i})}var ce=o(4780),fe=o(2077),de=o(6122),pe=o(7878),he=o(8794);function me(){return(0,pe.Z)(he.Z)}var ve=e.createContext(),ge=o(1588),ye=o(4867);function be(e){return(0,ye.Z)("MuiGrid",e)}const we=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];var _e=(0,ge.Z)("MuiGrid",["root","container","item","zeroMinWidth",...[0,1,2,3,4,5,6,7,8,9,10].map((e=>`spacing-xs-${e}`)),...["column-reverse","column","row-reverse","row"].map((e=>`direction-xs-${e}`)),...["nowrap","wrap-reverse","wrap"].map((e=>`wrap-xs-${e}`)),...we.map((e=>`grid-xs-${e}`)),...we.map((e=>`grid-sm-${e}`)),...we.map((e=>`grid-md-${e}`)),...we.map((e=>`grid-lg-${e}`)),...we.map((e=>`grid-xl-${e}`))]),xe=o(5893);const ke=["className","columns","columnSpacing","component","container","direction","item","rowSpacing","spacing","wrap","zeroMinWidth"];function Se(e){const t=parseFloat(e);return`${t}${String(e).replace(String(t),"")||"px"}`}function Ee({breakpoints:e,values:t}){let n="";Object.keys(t).forEach((e=>{""===n&&0!==t[e]&&(n=e)}));const r=Object.keys(e).sort(((t,n)=>e[t]-e[n]));return r.slice(0,r.indexOf(n))}const Pe=(0,fe.ZP)("div",{name:"MuiGrid",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e,{container:r,direction:o,item:i,spacing:a,wrap:s,zeroMinWidth:l,breakpoints:u}=n;let c=[];r&&(c=function(e,t,n={}){if(!e||e<=0)return[];if("string"==typeof e&&!Number.isNaN(Number(e))||"number"==typeof e)return[n[`spacing-xs-${String(e)}`]];const r=[];return t.forEach((t=>{const o=e[t];Number(o)>0&&r.push(n[`spacing-${t}-${String(o)}`])})),r}(a,u,t));const f=[];return u.forEach((e=>{const r=n[e];r&&f.push(t[`grid-${e}-${String(r)}`])})),[t.root,r&&t.container,i&&t.item,l&&t.zeroMinWidth,...c,"row"!==o&&t[`direction-xs-${String(o)}`],"wrap"!==s&&t[`wrap-xs-${String(s)}`],...f]}})((({ownerState:e})=>(0,y.Z)({boxSizing:"border-box"},e.container&&{display:"flex",flexWrap:"wrap",width:"100%"},e.item&&{margin:0},e.zeroMinWidth&&{minWidth:0},"wrap"!==e.wrap&&{flexWrap:e.wrap})),(function({theme:e,ownerState:t}){const n=(0,oe.P$)({values:t.direction,breakpoints:e.breakpoints.values});return(0,oe.k9)({theme:e},n,(e=>{const t={flexDirection:e};return 0===e.indexOf("column")&&(t[`& > .${_e.item}`]={maxWidth:"none"}),t}))}),(function({theme:e,ownerState:t}){const{container:n,rowSpacing:r}=t;let o={};if(n&&0!==r){const t=(0,oe.P$)({values:r,breakpoints:e.breakpoints.values});let n;"object"==typeof t&&(n=Ee({breakpoints:e.breakpoints.values,values:t})),o=(0,oe.k9)({theme:e},t,((t,r)=>{var o;const i=e.spacing(t);return"0px"!==i?{marginTop:`-${Se(i)}`,[`& > .${_e.item}`]:{paddingTop:Se(i)}}:null!=(o=n)&&o.includes(r)?{}:{marginTop:0,[`& > .${_e.item}`]:{paddingTop:0}}}))}return o}),(function({theme:e,ownerState:t}){const{container:n,columnSpacing:r}=t;let o={};if(n&&0!==r){const t=(0,oe.P$)({values:r,breakpoints:e.breakpoints.values});let n;"object"==typeof t&&(n=Ee({breakpoints:e.breakpoints.values,values:t})),o=(0,oe.k9)({theme:e},t,((t,r)=>{var o;const i=e.spacing(t);return"0px"!==i?{width:`calc(100% + ${Se(i)})`,marginLeft:`-${Se(i)}`,[`& > .${_e.item}`]:{paddingLeft:Se(i)}}:null!=(o=n)&&o.includes(r)?{}:{width:"100%",marginLeft:0,[`& > .${_e.item}`]:{paddingLeft:0}}}))}return o}),(function({theme:e,ownerState:t}){let n;return e.breakpoints.keys.reduce(((r,o)=>{let i={};if(t[o]&&(n=t[o]),!n)return r;if(!0===n)i={flexBasis:0,flexGrow:1,maxWidth:"100%"};else if("auto"===n)i={flexBasis:"auto",flexGrow:0,flexShrink:0,maxWidth:"none",width:"auto"};else{const a=(0,oe.P$)({values:t.columns,breakpoints:e.breakpoints.values}),s="object"==typeof a?a[o]:a;if(null==s)return r;const l=Math.round(n/s*1e8)/1e6+"%";let u={};if(t.container&&t.item&&0!==t.columnSpacing){const n=e.spacing(t.columnSpacing);if("0px"!==n){const e=`calc(${l} + ${Se(n)})`;u={flexBasis:e,maxWidth:e}}}i=(0,y.Z)({flexBasis:l,flexGrow:0,maxWidth:l},u)}return 0===e.breakpoints.values[o]?Object.assign(r,i):r[e.breakpoints.up(o)]=i,r}),{})})),Oe=e.forwardRef((function(t,n){const r=(0,de.Z)({props:t,name:"MuiGrid"}),{breakpoints:o}=me(),i=ue(r),{className:a,columns:s,columnSpacing:l,component:u="div",container:c=!1,direction:f="row",item:d=!1,rowSpacing:p,spacing:h=0,wrap:m="wrap",zeroMinWidth:v=!1}=i,g=(0,I.Z)(i,ke),b=p||h,w=l||h,_=e.useContext(ve),x=c?s||12:_,k={},S=(0,y.Z)({},g);o.keys.forEach((e=>{null!=g[e]&&(k[e]=g[e],delete S[e])}));const E=(0,y.Z)({},i,{columns:x,container:c,direction:f,item:d,rowSpacing:b,columnSpacing:w,wrap:m,zeroMinWidth:v,spacing:h},k,{breakpoints:o.keys}),P=(e=>{const{classes:t,container:n,direction:r,item:o,spacing:i,wrap:a,zeroMinWidth:s,breakpoints:l}=e;let u=[];n&&(u=function(e,t){if(!e||e<=0)return[];if("string"==typeof e&&!Number.isNaN(Number(e))||"number"==typeof e)return[`spacing-xs-${String(e)}`];const n=[];return t.forEach((t=>{const r=e[t];if(Number(r)>0){const e=`spacing-${t}-${String(r)}`;n.push(e)}})),n}(i,l));const c=[];l.forEach((t=>{const n=e[t];n&&c.push(`grid-${t}-${String(n)}`)}));const f={root:["root",n&&"container",o&&"item",s&&"zeroMinWidth",...u,"row"!==r&&`direction-xs-${String(r)}`,"wrap"!==a&&`wrap-xs-${String(a)}`,...c]};return(0,ce.Z)(f,be,t)})(E);return(0,xe.jsx)(ve.Provider,{value:x,children:(0,xe.jsx)(Pe,(0,y.Z)({ownerState:E,className:(0,re.Z)(P.root,a),as:u,ref:n},S))})}));var Ce=Oe,je=o(7925),Te=o(1796),Re=o(1705),Ae=o(2068),Ze=o(3511),Me=e.createContext(null);function Ne(t,n){var r=Object.create(null);return t&&e.Children.map(t,(function(e){return e})).forEach((function(t){r[t.key]=function(t){return n&&(0,e.isValidElement)(t)?n(t):t}(t)})),r}function Ie(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Le(t,n,r){var o=Ne(t.children),i=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var s={};for(var l in t){if(o[l])for(r=0;r<o[l].length;r++){var u=o[l][r];s[o[l][r]]=n(u)}s[l]=n(l)}for(r=0;r<i.length;r++)s[i[r]]=n(i[r]);return s}(n,o);return Object.keys(i).forEach((function(a){var s=i[a];if((0,e.isValidElement)(s)){var l=a in n,u=a in o,c=n[a],f=(0,e.isValidElement)(c)&&!c.props.in;!u||l&&!f?u||!l||f?u&&l&&(0,e.isValidElement)(c)&&(i[a]=(0,e.cloneElement)(s,{onExited:r.bind(null,s),in:c.props.in,exit:Ie(s,"exit",t),enter:Ie(s,"enter",t)})):i[a]=(0,e.cloneElement)(s,{in:!1}):i[a]=(0,e.cloneElement)(s,{onExited:r.bind(null,s),in:!0,exit:Ie(s,"exit",t),enter:Ie(s,"enter",t)})}})),i}var $e=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},De=function(t){function n(e,n){var r,o=(r=t.call(this,e,n)||this).handleExited.bind(l(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}m(n,t);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(t,n){var r,o,i=n.children,a=n.handleExited;return{children:n.firstRender?(r=t,o=a,Ne(r.children,(function(t){return(0,e.cloneElement)(t,{onExited:o.bind(null,t),in:!0,appear:Ie(t,"appear",r),enter:Ie(t,"enter",r),exit:Ie(t,"exit",r)})}))):Le(t,i,a),firstRender:!1}},r.handleExited=function(e,t){var n=Ne(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,y.Z)({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var t=this.props,n=t.component,r=t.childFactory,o=(0,I.Z)(t,["component","childFactory"]),i=this.state.contextValue,a=$e(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?e.createElement(Me.Provider,{value:i},a):e.createElement(Me.Provider,{value:i},e.createElement(n,o,a))},n}(e.Component);De.propTypes={},De.defaultProps={component:"div",childFactory:function(e){return e}};var ze=De,Fe=(o(6751),o(2443)),Be=o(444),qe=o(6797),We=o(7278),Ue=(0,Fe.w)((function(t,n){var r=t.styles,o=(0,qe.O)([r],void 0,(0,e.useContext)(Fe.T)),i=(0,e.useRef)();return(0,We.j)((function(){var e=n.key+"-global",t=new n.sheet.constructor({key:e,nonce:n.sheet.nonce,container:n.sheet.container,speedy:n.sheet.isSpeedy}),r=!1,a=document.querySelector('style[data-emotion="'+e+" "+o.name+'"]');return n.sheet.tags.length&&(t.before=n.sheet.tags[0]),null!==a&&(r=!0,a.setAttribute("data-emotion",e),t.hydrate([a])),i.current=[t,r],function(){t.flush()}}),[n]),(0,We.j)((function(){var e=i.current,t=e[0];if(e[1])e[1]=!1;else{if(void 0!==o.next&&(0,Be.My)(n,o.next,!0),t.tags.length){var r=t.tags[t.tags.length-1].nextElementSibling;t.before=r,t.flush()}n.insert("",o,t,!1)}}),[n,o.name]),null}));function Ve(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,qe.O)(t)}var He=function(){var e=Ve.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}},Ke=(0,ge.Z)("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]);const Ge=["center","classes","className"];let Qe,Ye,Xe,Je,et=e=>e;const tt=He(Qe||(Qe=et`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),nt=He(Ye||(Ye=et`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),rt=He(Xe||(Xe=et`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),ot=(0,fe.ZP)("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),it=(0,fe.ZP)((function(t){const{className:n,classes:r,pulsate:o=!1,rippleX:i,rippleY:a,rippleSize:s,in:l,onExited:u,timeout:c}=t,[f,d]=e.useState(!1),p=(0,re.Z)(n,r.ripple,r.rippleVisible,o&&r.ripplePulsate),h={width:s,height:s,top:-s/2+a,left:-s/2+i},m=(0,re.Z)(r.child,f&&r.childLeaving,o&&r.childPulsate);return l||f||d(!0),e.useEffect((()=>{if(!l&&null!=u){const e=setTimeout(u,c);return()=>{clearTimeout(e)}}}),[u,l,c]),(0,xe.jsx)("span",{className:p,style:h,children:(0,xe.jsx)("span",{className:m})})}),{name:"MuiTouchRipple",slot:"Ripple"})(Je||(Je=et`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),Ke.rippleVisible,tt,550,(({theme:e})=>e.transitions.easing.easeInOut),Ke.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),Ke.child,Ke.childLeaving,nt,550,(({theme:e})=>e.transitions.easing.easeInOut),Ke.childPulsate,rt,(({theme:e})=>e.transitions.easing.easeInOut));var at=e.forwardRef((function(t,n){const r=(0,de.Z)({props:t,name:"MuiTouchRipple"}),{center:o=!1,classes:i={},className:a}=r,s=(0,I.Z)(r,Ge),[l,u]=e.useState([]),c=e.useRef(0),f=e.useRef(null);e.useEffect((()=>{f.current&&(f.current(),f.current=null)}),[l]);const d=e.useRef(!1),p=e.useRef(null),h=e.useRef(null),m=e.useRef(null);e.useEffect((()=>()=>{clearTimeout(p.current)}),[]);const v=e.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:o,cb:a}=e;u((e=>[...e,(0,xe.jsx)(it,{classes:{ripple:(0,re.Z)(i.ripple,Ke.ripple),rippleVisible:(0,re.Z)(i.rippleVisible,Ke.rippleVisible),ripplePulsate:(0,re.Z)(i.ripplePulsate,Ke.ripplePulsate),child:(0,re.Z)(i.child,Ke.child),childLeaving:(0,re.Z)(i.childLeaving,Ke.childLeaving),childPulsate:(0,re.Z)(i.childPulsate,Ke.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o},c.current)])),c.current+=1,f.current=a}),[i]),g=e.useCallback(((e={},t={},n=(()=>{}))=>{const{pulsate:r=!1,center:i=o||t.pulsate,fakeElement:a=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&d.current)return void(d.current=!1);"touchstart"===(null==e?void 0:e.type)&&(d.current=!0);const s=a?null:m.current,l=s?s.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,c,f;if(i||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(l.width/2),c=Math.round(l.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;u=Math.round(t-l.left),c=Math.round(n-l.top)}if(i)f=Math.sqrt((2*l.width**2+l.height**2)/3),f%2==0&&(f+=1);else{const e=2*Math.max(Math.abs((s?s.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((s?s.clientHeight:0)-c),c)+2;f=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===h.current&&(h.current=()=>{v({pulsate:r,rippleX:u,rippleY:c,rippleSize:f,cb:n})},p.current=setTimeout((()=>{h.current&&(h.current(),h.current=null)}),80)):v({pulsate:r,rippleX:u,rippleY:c,rippleSize:f,cb:n})}),[o,v]),b=e.useCallback((()=>{g({},{pulsate:!0})}),[g]),w=e.useCallback(((e,t)=>{if(clearTimeout(p.current),"touchend"===(null==e?void 0:e.type)&&h.current)return h.current(),h.current=null,void(p.current=setTimeout((()=>{w(e,t)})));h.current=null,u((e=>e.length>0?e.slice(1):e)),f.current=t}),[]);return e.useImperativeHandle(n,(()=>({pulsate:b,start:g,stop:w})),[b,g,w]),(0,xe.jsx)(ot,(0,y.Z)({className:(0,re.Z)(Ke.root,i.root,a),ref:m},s,{children:(0,xe.jsx)(ze,{component:null,exit:!0,children:l})}))}));function st(e){return(0,ye.Z)("MuiButtonBase",e)}var lt=(0,ge.Z)("MuiButtonBase",["root","disabled","focusVisible"]);const ut=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],ct=(0,fe.ZP)("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${lt.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}});var ft=e.forwardRef((function(t,n){const r=(0,de.Z)({props:t,name:"MuiButtonBase"}),{action:o,centerRipple:i=!1,children:a,className:s,component:l="button",disabled:u=!1,disableRipple:c=!1,disableTouchRipple:f=!1,focusRipple:d=!1,LinkComponent:p="a",onBlur:h,onClick:m,onContextMenu:v,onDragLeave:g,onFocus:b,onFocusVisible:w,onKeyDown:_,onKeyUp:x,onMouseDown:k,onMouseLeave:S,onMouseUp:E,onTouchEnd:P,onTouchMove:O,onTouchStart:C,tabIndex:j=0,TouchRippleProps:T,touchRippleRef:R,type:A}=r,Z=(0,I.Z)(r,ut),M=e.useRef(null),N=e.useRef(null),L=(0,Re.Z)(N,R),{isFocusVisibleRef:$,onFocus:D,onBlur:z,ref:F}=(0,Ze.Z)(),[B,q]=e.useState(!1);u&&B&&q(!1),e.useImperativeHandle(o,(()=>({focusVisible:()=>{q(!0),M.current.focus()}})),[]);const[W,U]=e.useState(!1);e.useEffect((()=>{U(!0)}),[]);const V=W&&!c&&!u;function H(e,t,n=f){return(0,Ae.Z)((r=>(t&&t(r),!n&&N.current&&N.current[e](r),!0)))}e.useEffect((()=>{B&&d&&!c&&W&&N.current.pulsate()}),[c,d,B,W]);const K=H("start",k),G=H("stop",v),Q=H("stop",g),Y=H("stop",E),X=H("stop",(e=>{B&&e.preventDefault(),S&&S(e)})),J=H("start",C),ee=H("stop",P),te=H("stop",O),ne=H("stop",(e=>{z(e),!1===$.current&&q(!1),h&&h(e)}),!1),oe=(0,Ae.Z)((e=>{M.current||(M.current=e.currentTarget),D(e),!0===$.current&&(q(!0),w&&w(e)),b&&b(e)})),ie=()=>{const e=M.current;return l&&"button"!==l&&!("A"===e.tagName&&e.href)},ae=e.useRef(!1),se=(0,Ae.Z)((e=>{d&&!ae.current&&B&&N.current&&" "===e.key&&(ae.current=!0,N.current.stop(e,(()=>{N.current.start(e)}))),e.target===e.currentTarget&&ie()&&" "===e.key&&e.preventDefault(),_&&_(e),e.target===e.currentTarget&&ie()&&"Enter"===e.key&&!u&&(e.preventDefault(),m&&m(e))})),le=(0,Ae.Z)((e=>{d&&" "===e.key&&N.current&&B&&!e.defaultPrevented&&(ae.current=!1,N.current.stop(e,(()=>{N.current.pulsate(e)}))),x&&x(e),m&&e.target===e.currentTarget&&ie()&&" "===e.key&&!e.defaultPrevented&&m(e)}));let ue=l;"button"===ue&&(Z.href||Z.to)&&(ue=p);const fe={};"button"===ue?(fe.type=void 0===A?"button":A,fe.disabled=u):(Z.href||Z.to||(fe.role="button"),u&&(fe["aria-disabled"]=u));const pe=(0,Re.Z)(n,F,M),he=(0,y.Z)({},r,{centerRipple:i,component:l,disabled:u,disableRipple:c,disableTouchRipple:f,focusRipple:d,tabIndex:j,focusVisible:B}),me=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,i={root:["root",t&&"disabled",n&&"focusVisible"]},a=(0,ce.Z)(i,st,o);return n&&r&&(a.root+=` ${r}`),a})(he);return(0,xe.jsxs)(ct,(0,y.Z)({as:ue,className:(0,re.Z)(me.root,s),ownerState:he,onBlur:ne,onClick:m,onContextMenu:G,onFocus:oe,onKeyDown:se,onKeyUp:le,onMouseDown:K,onMouseLeave:X,onMouseUp:Y,onDragLeave:Q,onTouchEnd:ee,onTouchMove:te,onTouchStart:J,ref:pe,tabIndex:u?-1:j,type:A},fe,Z,{children:[a,V?(0,xe.jsx)(at,(0,y.Z)({ref:L,center:i},T)):null]}))})),dt=o(1220);function pt(e){return(0,ye.Z)("MuiButton",e)}var ht=(0,ge.Z)("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]),mt=e.createContext({});const vt=["children","color","component","className","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"],gt=e=>(0,y.Z)({},"small"===e.size&&{"& > *:nth-of-type(1)":{fontSize:18}},"medium"===e.size&&{"& > *:nth-of-type(1)":{fontSize:20}},"large"===e.size&&{"& > *:nth-of-type(1)":{fontSize:22}}),yt=(0,fe.ZP)(ft,{shouldForwardProp:e=>(0,fe.FO)(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${(0,dt.Z)(n.color)}`],t[`size${(0,dt.Z)(n.size)}`],t[`${n.variant}Size${(0,dt.Z)(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth]}})((({theme:e,ownerState:t})=>{var n,r;return(0,y.Z)({},e.typography.button,{minWidth:64,padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":(0,y.Z)({textDecoration:"none",backgroundColor:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,Te.Fq)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"text"===t.variant&&"inherit"!==t.color&&{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,Te.Fq)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"outlined"===t.variant&&"inherit"!==t.color&&{border:`1px solid ${(e.vars||e).palette[t.color].main}`,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,Te.Fq)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"contained"===t.variant&&{backgroundColor:(e.vars||e).palette.grey.A100,boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2],backgroundColor:(e.vars||e).palette.grey[300]}},"contained"===t.variant&&"inherit"!==t.color&&{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}}),"&:active":(0,y.Z)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[8]}),[`&.${ht.focusVisible}`]:(0,y.Z)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[6]}),[`&.${ht.disabled}`]:(0,y.Z)({color:(e.vars||e).palette.action.disabled},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`},"contained"===t.variant&&{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground})},"text"===t.variant&&{padding:"6px 8px"},"text"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main},"outlined"===t.variant&&{padding:"5px 15px",border:"1px solid currentColor"},"outlined"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:e.vars?`1px solid rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:`1px solid ${(0,Te.Fq)(e.palette[t.color].main,.5)}`},"contained"===t.variant&&{color:e.vars?e.vars.palette.text.primary:null==(n=(r=e.palette).getContrastText)?void 0:n.call(r,e.palette.grey[300]),backgroundColor:(e.vars||e).palette.grey[300],boxShadow:(e.vars||e).shadows[2]},"contained"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main},"inherit"===t.color&&{color:"inherit",borderColor:"currentColor"},"small"===t.size&&"text"===t.variant&&{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"text"===t.variant&&{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"outlined"===t.variant&&{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"outlined"===t.variant&&{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"contained"===t.variant&&{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"contained"===t.variant&&{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},t.fullWidth&&{width:"100%"})}),(({ownerState:e})=>e.disableElevation&&{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${ht.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${ht.disabled}`]:{boxShadow:"none"}})),bt=(0,fe.ZP)("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,t[`iconSize${(0,dt.Z)(n.size)}`]]}})((({ownerState:e})=>(0,y.Z)({display:"inherit",marginRight:8,marginLeft:-4},"small"===e.size&&{marginLeft:-2},gt(e)))),wt=(0,fe.ZP)("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,t[`iconSize${(0,dt.Z)(n.size)}`]]}})((({ownerState:e})=>(0,y.Z)({display:"inherit",marginRight:-4,marginLeft:8},"small"===e.size&&{marginRight:-2},gt(e))));var _t=e.forwardRef((function(t,n){const r=e.useContext(mt),o=(0,je.Z)(r,t),i=(0,de.Z)({props:o,name:"MuiButton"}),{children:a,color:s="primary",component:l="button",className:u,disabled:c=!1,disableElevation:f=!1,disableFocusRipple:d=!1,endIcon:p,focusVisibleClassName:h,fullWidth:m=!1,size:v="medium",startIcon:g,type:b,variant:w="text"}=i,_=(0,I.Z)(i,vt),x=(0,y.Z)({},i,{color:s,component:l,disabled:c,disableElevation:f,disableFocusRipple:d,fullWidth:m,size:v,type:b,variant:w}),k=(e=>{const{color:t,disableElevation:n,fullWidth:r,size:o,variant:i,classes:a}=e,s={root:["root",i,`${i}${(0,dt.Z)(t)}`,`size${(0,dt.Z)(o)}`,`${i}Size${(0,dt.Z)(o)}`,"inherit"===t&&"colorInherit",n&&"disableElevation",r&&"fullWidth"],label:["label"],startIcon:["startIcon",`iconSize${(0,dt.Z)(o)}`],endIcon:["endIcon",`iconSize${(0,dt.Z)(o)}`]},l=(0,ce.Z)(s,pt,a);return(0,y.Z)({},a,l)})(x),S=g&&(0,xe.jsx)(bt,{className:k.startIcon,ownerState:x,children:g}),E=p&&(0,xe.jsx)(wt,{className:k.endIcon,ownerState:x,children:p});return(0,xe.jsxs)(yt,(0,y.Z)({ownerState:x,className:(0,re.Z)(r.className,k.root,u),component:l,disabled:c,focusRipple:!d,focusVisibleClassName:(0,re.Z)(k.focusVisible,h),ref:n,type:b},_,{classes:k,children:[S,a,E]}))}));function xt(e){return(0,ye.Z)("MuiTypography",e)}(0,ge.Z)("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]);const kt=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],St=(0,fe.ZP)("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.variant&&t[n.variant],"inherit"!==n.align&&t[`align${(0,dt.Z)(n.align)}`],n.noWrap&&t.noWrap,n.gutterBottom&&t.gutterBottom,n.paragraph&&t.paragraph]}})((({theme:e,ownerState:t})=>(0,y.Z)({margin:0},t.variant&&e.typography[t.variant],"inherit"!==t.align&&{textAlign:t.align},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.paragraph&&{marginBottom:16}))),Et={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},Pt={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"};var Ot=e.forwardRef((function(e,t){const n=(0,de.Z)({props:e,name:"MuiTypography"}),r=(e=>Pt[e]||e)(n.color),o=ue((0,y.Z)({},n,{color:r})),{align:i="inherit",className:a,component:s,gutterBottom:l=!1,noWrap:u=!1,paragraph:c=!1,variant:f="body1",variantMapping:d=Et}=o,p=(0,I.Z)(o,kt),h=(0,y.Z)({},o,{align:i,color:r,className:a,component:s,gutterBottom:l,noWrap:u,paragraph:c,variant:f,variantMapping:d}),m=s||(c?"p":d[f]||Et[f])||"span",v=(e=>{const{align:t,gutterBottom:n,noWrap:r,paragraph:o,variant:i,classes:a}=e,s={root:["root",i,"inherit"!==e.align&&`align${(0,dt.Z)(t)}`,n&&"gutterBottom",r&&"noWrap",o&&"paragraph"]};return(0,ce.Z)(s,xt,a)})(h);return(0,xe.jsx)(St,(0,y.Z)({as:m,ref:t,ownerState:h,className:(0,re.Z)(v.root,a)},p))}));o(1897);e.Component;var Ct=o(7579),jt=o(1387),Tt=o(67),Rt=o(8290),At=o(7596),Zt=o(6600);const Mt=["onChange","maxRows","minRows","style","value"];function Nt(e){return parseInt(e,10)||0}const It={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};function Lt(e){return null==e||0===Object.keys(e).length||0===e.outerHeightStyle&&!e.overflow}var $t=e.forwardRef((function(n,r){const{onChange:o,maxRows:i,minRows:a=1,style:s,value:l}=n,u=(0,I.Z)(n,Mt),{current:c}=e.useRef(null!=l),f=e.useRef(null),d=(0,Tt.Z)(r,f),p=e.useRef(null),h=e.useRef(0),[m,v]=e.useState({outerHeightStyle:0}),g=e.useCallback((()=>{const e=f.current,t=(0,Rt.Z)(e).getComputedStyle(e);if("0px"===t.width)return{outerHeightStyle:0};const r=p.current;r.style.width=t.width,r.value=e.value||n.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");const o=t.boxSizing,s=Nt(t.paddingBottom)+Nt(t.paddingTop),l=Nt(t.borderBottomWidth)+Nt(t.borderTopWidth),u=r.scrollHeight;r.value="x";const c=r.scrollHeight;let d=u;return a&&(d=Math.max(Number(a)*c,d)),i&&(d=Math.min(Number(i)*c,d)),d=Math.max(d,c),{outerHeightStyle:d+("border-box"===o?s+l:0),overflow:Math.abs(d-u)<=1}}),[i,a,n.placeholder]),b=(e,t)=>{const{outerHeightStyle:n,overflow:r}=t;return h.current<20&&(n>0&&Math.abs((e.outerHeightStyle||0)-n)>1||e.overflow!==r)?(h.current+=1,{overflow:r,outerHeightStyle:n}):e},w=e.useCallback((()=>{const e=g();Lt(e)||v((t=>b(t,e)))}),[g]);return e.useEffect((()=>{const e=(0,At.Z)((()=>{h.current=0,f.current&&(()=>{const e=g();Lt(e)||t.flushSync((()=>{v((t=>b(t,e)))}))})()}));let n;const r=f.current,o=(0,Rt.Z)(r);return o.addEventListener("resize",e),"undefined"!=typeof ResizeObserver&&(n=new ResizeObserver(e),n.observe(r)),()=>{e.clear(),o.removeEventListener("resize",e),n&&n.disconnect()}})),(0,Zt.Z)((()=>{w()})),e.useEffect((()=>{h.current=0}),[l]),(0,xe.jsxs)(e.Fragment,{children:[(0,xe.jsx)("textarea",(0,y.Z)({value:l,onChange:e=>{h.current=0,c||w(),o&&o(e)},ref:d,rows:a,style:(0,y.Z)({height:m.outerHeightStyle,overflow:m.overflow?"hidden":void 0},s)},u)),(0,xe.jsx)("textarea",{"aria-hidden":!0,className:n.className,readOnly:!0,ref:p,tabIndex:-1,style:(0,y.Z)({},It,s,{padding:0})})]})}));function Dt(e){return"string"==typeof e}function zt({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}var Ft=e.createContext(void 0);function Bt(){return e.useContext(Ft)}var qt=o(8974);function Wt(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,xe.jsx)(Ue,{styles:r})}var Ut=function(e){return(0,xe.jsx)(Wt,(0,y.Z)({},e,{defaultTheme:he.Z}))};function Vt(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function Ht(e,t=!1){return e&&(Vt(e.value)&&""!==e.value||t&&Vt(e.defaultValue)&&""!==e.defaultValue)}function Kt(e){return(0,ye.Z)("MuiInputBase",e)}var Gt=(0,ge.Z)("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]);const Qt=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],Yt=(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${(0,dt.Z)(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]},Xt=(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]},Jt=(0,fe.ZP)("div",{name:"MuiInputBase",slot:"Root",overridesResolver:Yt})((({theme:e,ownerState:t})=>(0,y.Z)({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${Gt.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&(0,y.Z)({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),en=(0,fe.ZP)("input",{name:"MuiInputBase",slot:"Input",overridesResolver:Xt})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=(0,y.Z)({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),o={opacity:"0 !important"},i=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5};return(0,y.Z)({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${Gt.formControl} &`]:{"&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus::-webkit-input-placeholder":i,"&:focus::-moz-placeholder":i,"&:focus:-ms-input-placeholder":i,"&:focus::-ms-input-placeholder":i},[`&.${Gt.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),tn=(0,xe.jsx)(Ut,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),nn=e.forwardRef((function(t,n){var r;const o=(0,de.Z)({props:t,name:"MuiInputBase"}),{"aria-describedby":i,autoComplete:a,autoFocus:s,className:l,components:u={},componentsProps:c={},defaultValue:f,disabled:d,disableInjectingGlobalStyles:p,endAdornment:h,fullWidth:m=!1,id:v,inputComponent:g="input",inputProps:b={},inputRef:w,maxRows:_,minRows:x,multiline:k=!1,name:S,onBlur:E,onChange:P,onClick:O,onFocus:C,onKeyDown:j,onKeyUp:T,placeholder:R,readOnly:A,renderSuffix:Z,rows:M,slotProps:N={},slots:L={},startAdornment:$,type:D="text",value:z}=o,F=(0,I.Z)(o,Qt),B=null!=b.value?b.value:z,{current:q}=e.useRef(null!=B),W=e.useRef(),U=e.useCallback((e=>{}),[]),V=(0,Re.Z)(W,w,b.ref,U),[H,K]=e.useState(!1),G=Bt(),Q=zt({props:o,muiFormControl:G,states:["color","disabled","error","hiddenLabel","size","required","filled"]});Q.focused=G?G.focused:H,e.useEffect((()=>{!G&&d&&H&&(K(!1),E&&E())}),[G,d,H,E]);const Y=G&&G.onFilled,X=G&&G.onEmpty,J=e.useCallback((e=>{Ht(e)?Y&&Y():X&&X()}),[Y,X]);(0,qt.Z)((()=>{q&&J({value:B})}),[B,J,q]),e.useEffect((()=>{J(W.current)}),[]);let ee=g,te=b;k&&"input"===ee&&(te=M?(0,y.Z)({type:void 0,minRows:M,maxRows:M},te):(0,y.Z)({type:void 0,maxRows:_,minRows:x},te),ee=$t),e.useEffect((()=>{G&&G.setAdornedStart(Boolean($))}),[G,$]);const ne=(0,y.Z)({},o,{color:Q.color||"primary",disabled:Q.disabled,endAdornment:h,error:Q.error,focused:Q.focused,formControl:G,fullWidth:m,hiddenLabel:Q.hiddenLabel,multiline:k,size:Q.size,startAdornment:$,type:D}),oe=(e=>{const{classes:t,color:n,disabled:r,error:o,endAdornment:i,focused:a,formControl:s,fullWidth:l,hiddenLabel:u,multiline:c,readOnly:f,size:d,startAdornment:p,type:h}=e,m={root:["root",`color${(0,dt.Z)(n)}`,r&&"disabled",o&&"error",l&&"fullWidth",a&&"focused",s&&"formControl","small"===d&&"sizeSmall",c&&"multiline",p&&"adornedStart",i&&"adornedEnd",u&&"hiddenLabel",f&&"readOnly"],input:["input",r&&"disabled","search"===h&&"inputTypeSearch",c&&"inputMultiline","small"===d&&"inputSizeSmall",u&&"inputHiddenLabel",p&&"inputAdornedStart",i&&"inputAdornedEnd",f&&"readOnly"]};return(0,ce.Z)(m,Kt,t)})(ne),ie=L.root||u.Root||Jt,ae=N.root||c.root||{},se=L.input||u.Input||en;return te=(0,y.Z)({},te,null!=(r=N.input)?r:c.input),(0,xe.jsxs)(e.Fragment,{children:[!p&&tn,(0,xe.jsxs)(ie,(0,y.Z)({},ae,!Dt(ie)&&{ownerState:(0,y.Z)({},ne,ae.ownerState)},{ref:n,onClick:e=>{W.current&&e.currentTarget===e.target&&W.current.focus(),O&&O(e)}},F,{className:(0,re.Z)(oe.root,ae.className,l,A&&"MuiInputBase-readOnly"),children:[$,(0,xe.jsx)(Ft.Provider,{value:null,children:(0,xe.jsx)(se,(0,y.Z)({ownerState:ne,"aria-invalid":Q.error,"aria-describedby":i,autoComplete:a,autoFocus:s,defaultValue:f,disabled:Q.disabled,id:v,onAnimationStart:e=>{J("mui-auto-fill-cancel"===e.animationName?W.current:{value:"x"})},name:S,placeholder:R,readOnly:A,required:Q.required,rows:M,value:B,onKeyDown:j,onKeyUp:T,type:D},te,!Dt(se)&&{as:ee,ownerState:(0,y.Z)({},ne,te.ownerState)},{ref:V,className:(0,re.Z)(oe.input,te.className,A&&"MuiInputBase-readOnly"),onBlur:e=>{E&&E(e),b.onBlur&&b.onBlur(e),G&&G.onBlur?G.onBlur(e):K(!1)},onChange:(e,...t)=>{if(!q){const t=e.target||W.current;if(null==t)throw new Error((0,jt.Z)(1));J({value:t.value})}b.onChange&&b.onChange(e,...t),P&&P(e,...t)},onFocus:e=>{Q.disabled?e.stopPropagation():(C&&C(e),b.onFocus&&b.onFocus(e),G&&G.onFocus?G.onFocus(e):K(!0))}}))}),h,Z?Z((0,y.Z)({},Q,{startAdornment:$})):null]}))]})}));var rn=nn;function on(e){return(0,ye.Z)("MuiInput",e)}var an=(0,y.Z)({},Gt,(0,ge.Z)("MuiInput",["root","underline","input"]));const sn=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","slotProps","slots","type"],ln=(0,fe.ZP)(Jt,{shouldForwardProp:e=>(0,fe.FO)(e)||"classes"===e,name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...Yt(e,t),!n.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{let n="light"===e.palette.mode?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return e.vars&&(n=`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`),(0,y.Z)({position:"relative"},t.formControl&&{"label + &":{marginTop:16}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${(e.vars||e).palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${an.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${an.error}`]:{"&:before, &:after":{borderBottomColor:(e.vars||e).palette.error.main}},"&:before":{borderBottom:`1px solid ${n}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${an.disabled}, .${an.error}):before`]:{borderBottom:`2px solid ${(e.vars||e).palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${n}`}},[`&.${an.disabled}:before`]:{borderBottomStyle:"dotted"}})})),un=(0,fe.ZP)(en,{name:"MuiInput",slot:"Input",overridesResolver:Xt})({}),cn=e.forwardRef((function(e,t){var n,r,o,i;const a=(0,de.Z)({props:e,name:"MuiInput"}),{disableUnderline:s,components:l={},componentsProps:u,fullWidth:c=!1,inputComponent:f="input",multiline:d=!1,slotProps:p,slots:h={},type:m="text"}=a,v=(0,I.Z)(a,sn),g=(e=>{const{classes:t,disableUnderline:n}=e,r={root:["root",!n&&"underline"],input:["input"]},o=(0,ce.Z)(r,on,t);return(0,y.Z)({},t,o)})(a),b={root:{ownerState:{disableUnderline:s}}},w=(null!=p?p:u)?(0,ie.Z)(null!=p?p:u,b):b,_=null!=(n=null!=(r=h.root)?r:l.Root)?n:ln,x=null!=(o=null!=(i=h.input)?i:l.Input)?o:un;return(0,xe.jsx)(rn,(0,y.Z)({slots:{root:_,input:x},slotProps:w,fullWidth:c,inputComponent:f,multiline:d,ref:t,type:m},v,{classes:g}))}));cn.muiName="Input";var fn=cn;function dn(e){return(0,ye.Z)("MuiFilledInput",e)}var pn=(0,y.Z)({},Gt,(0,ge.Z)("MuiFilledInput",["root","underline","input"]));const hn=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","slotProps","slots","type"],mn=(0,fe.ZP)(Jt,{shouldForwardProp:e=>(0,fe.FO)(e)||"classes"===e,name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...Yt(e,t),!n.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{var n;const r="light"===e.palette.mode,o=r?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",i=r?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)",a=r?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)",s=r?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)";return(0,y.Z)({position:"relative",backgroundColor:e.vars?e.vars.palette.FilledInput.bg:i,borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:e.vars?e.vars.palette.FilledInput.hoverBg:a,"@media (hover: none)":{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:i}},[`&.${pn.focused}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:i},[`&.${pn.disabled}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.disabledBg:s}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${null==(n=(e.vars||e).palette[t.color||"primary"])?void 0:n.main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${pn.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${pn.error}`]:{"&:before, &:after":{borderBottomColor:(e.vars||e).palette.error.main}},"&:before":{borderBottom:`1px solid ${e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`:o}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${pn.disabled}, .${pn.error}):before`]:{borderBottom:`1px solid ${(e.vars||e).palette.text.primary}`},[`&.${pn.disabled}:before`]:{borderBottomStyle:"dotted"}},t.startAdornment&&{paddingLeft:12},t.endAdornment&&{paddingRight:12},t.multiline&&(0,y.Z)({padding:"25px 12px 8px"},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17}))})),vn=(0,fe.ZP)(en,{name:"MuiFilledInput",slot:"Input",overridesResolver:Xt})((({theme:e,ownerState:t})=>(0,y.Z)({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0},t.hiddenLabel&&"small"===t.size&&{paddingTop:8,paddingBottom:9}))),gn=e.forwardRef((function(e,t){var n,r,o,i;const a=(0,de.Z)({props:e,name:"MuiFilledInput"}),{components:s={},componentsProps:l,fullWidth:u=!1,inputComponent:c="input",multiline:f=!1,slotProps:d,slots:p={},type:h="text"}=a,m=(0,I.Z)(a,hn),v=(0,y.Z)({},a,{fullWidth:u,inputComponent:c,multiline:f,type:h}),g=(e=>{const{classes:t,disableUnderline:n}=e,r={root:["root",!n&&"underline"],input:["input"]},o=(0,ce.Z)(r,dn,t);return(0,y.Z)({},t,o)})(a),b={root:{ownerState:v},input:{ownerState:v}},w=(null!=d?d:l)?(0,ie.Z)(null!=d?d:l,b):b,_=null!=(n=null!=(r=p.root)?r:s.Root)?n:mn,x=null!=(o=null!=(i=p.input)?i:s.Input)?o:vn;return(0,xe.jsx)(rn,(0,y.Z)({slots:{root:_,input:x},componentsProps:w,fullWidth:u,inputComponent:c,multiline:f,ref:t,type:h},m,{classes:g}))}));gn.muiName="Input";var yn,bn=gn;const wn=["children","classes","className","label","notched"],_n=(0,fe.ZP)("fieldset")({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),xn=(0,fe.ZP)("legend")((({ownerState:e,theme:t})=>(0,y.Z)({float:"unset",width:"auto",overflow:"hidden"},!e.withLabel&&{padding:0,lineHeight:"11px",transition:t.transitions.create("width",{duration:150,easing:t.transitions.easing.easeOut})},e.withLabel&&(0,y.Z)({display:"block",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:t.transitions.create("max-width",{duration:50,easing:t.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block",opacity:0,visibility:"visible"}},e.notched&&{maxWidth:"100%",transition:t.transitions.create("max-width",{duration:100,easing:t.transitions.easing.easeOut,delay:50})}))));function kn(e){return(0,ye.Z)("MuiOutlinedInput",e)}var Sn=(0,y.Z)({},Gt,(0,ge.Z)("MuiOutlinedInput",["root","notchedOutline","input"]));const En=["components","fullWidth","inputComponent","label","multiline","notched","slots","type"],Pn=(0,fe.ZP)(Jt,{shouldForwardProp:e=>(0,fe.FO)(e)||"classes"===e,name:"MuiOutlinedInput",slot:"Root",overridesResolver:Yt})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return(0,y.Z)({position:"relative",borderRadius:(e.vars||e).shape.borderRadius,[`&:hover .${Sn.notchedOutline}`]:{borderColor:(e.vars||e).palette.text.primary},"@media (hover: none)":{[`&:hover .${Sn.notchedOutline}`]:{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:n}},[`&.${Sn.focused} .${Sn.notchedOutline}`]:{borderColor:(e.vars||e).palette[t.color].main,borderWidth:2},[`&.${Sn.error} .${Sn.notchedOutline}`]:{borderColor:(e.vars||e).palette.error.main},[`&.${Sn.disabled} .${Sn.notchedOutline}`]:{borderColor:(e.vars||e).palette.action.disabled}},t.startAdornment&&{paddingLeft:14},t.endAdornment&&{paddingRight:14},t.multiline&&(0,y.Z)({padding:"16.5px 14px"},"small"===t.size&&{padding:"8.5px 14px"}))})),On=(0,fe.ZP)((function(e){const{className:t,label:n,notched:r}=e,o=(0,I.Z)(e,wn),i=null!=n&&""!==n,a=(0,y.Z)({},e,{notched:r,withLabel:i});return(0,xe.jsx)(_n,(0,y.Z)({"aria-hidden":!0,className:t,ownerState:a},o,{children:(0,xe.jsx)(xn,{ownerState:a,children:i?(0,xe.jsx)("span",{children:n}):yn||(yn=(0,xe.jsx)("span",{className:"notranslate",children:"​"}))})}))}),{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(e,t)=>t.notchedOutline})((({theme:e})=>{const t="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}})),Cn=(0,fe.ZP)(en,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:Xt})((({theme:e,ownerState:t})=>(0,y.Z)({padding:"16.5px 14px"},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},"small"===t.size&&{padding:"8.5px 14px"},t.multiline&&{padding:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0}))),jn=e.forwardRef((function(t,n){var r,o,i,a,s;const l=(0,de.Z)({props:t,name:"MuiOutlinedInput"}),{components:u={},fullWidth:c=!1,inputComponent:f="input",label:d,multiline:p=!1,notched:h,slots:m={},type:v="text"}=l,g=(0,I.Z)(l,En),b=(e=>{const{classes:t}=e,n=(0,ce.Z)({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},kn,t);return(0,y.Z)({},t,n)})(l),w=Bt(),_=zt({props:l,muiFormControl:w,states:["required"]}),x=(0,y.Z)({},l,{color:_.color||"primary",disabled:_.disabled,error:_.error,focused:_.focused,formControl:w,fullWidth:c,hiddenLabel:_.hiddenLabel,multiline:p,size:_.size,type:v}),k=null!=(r=null!=(o=m.root)?o:u.Root)?r:Pn,S=null!=(i=null!=(a=m.input)?a:u.Input)?i:Cn;return(0,xe.jsx)(rn,(0,y.Z)({slots:{root:k,input:S},renderSuffix:t=>(0,xe.jsx)(On,{ownerState:x,className:b.notchedOutline,label:null!=d&&""!==d&&_.required?s||(s=(0,xe.jsxs)(e.Fragment,{children:[d," ","*"]})):d,notched:void 0!==h?h:Boolean(t.startAdornment||t.filled||t.focused)}),fullWidth:c,inputComponent:f,multiline:p,ref:n,type:v},g,{classes:(0,y.Z)({},b,{notchedOutline:null})}))}));jn.muiName="Input";var Tn=jn;function Rn(e){return(0,ye.Z)("MuiFormLabel",e)}var An=(0,ge.Z)("MuiFormLabel",["root","colorSecondary","focused","disabled","error","filled","required","asterisk"]);const Zn=["children","className","color","component","disabled","error","filled","focused","required"],Mn=(0,fe.ZP)("label",{name:"MuiFormLabel",slot:"Root",overridesResolver:({ownerState:e},t)=>(0,y.Z)({},t.root,"secondary"===e.color&&t.colorSecondary,e.filled&&t.filled)})((({theme:e,ownerState:t})=>(0,y.Z)({color:(e.vars||e).palette.text.secondary},e.typography.body1,{lineHeight:"1.4375em",padding:0,position:"relative",[`&.${An.focused}`]:{color:(e.vars||e).palette[t.color].main},[`&.${An.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${An.error}`]:{color:(e.vars||e).palette.error.main}}))),Nn=(0,fe.ZP)("span",{name:"MuiFormLabel",slot:"Asterisk",overridesResolver:(e,t)=>t.asterisk})((({theme:e})=>({[`&.${An.error}`]:{color:(e.vars||e).palette.error.main}})));var In=e.forwardRef((function(e,t){const n=(0,de.Z)({props:e,name:"MuiFormLabel"}),{children:r,className:o,component:i="label"}=n,a=(0,I.Z)(n,Zn),s=zt({props:n,muiFormControl:Bt(),states:["color","required","focused","disabled","error","filled"]}),l=(0,y.Z)({},n,{color:s.color||"primary",component:i,disabled:s.disabled,error:s.error,filled:s.filled,focused:s.focused,required:s.required}),u=(e=>{const{classes:t,color:n,focused:r,disabled:o,error:i,filled:a,required:s}=e,l={root:["root",`color${(0,dt.Z)(n)}`,o&&"disabled",i&&"error",a&&"filled",r&&"focused",s&&"required"],asterisk:["asterisk",i&&"error"]};return(0,ce.Z)(l,Rn,t)})(l);return(0,xe.jsxs)(Mn,(0,y.Z)({as:i,ownerState:l,className:(0,re.Z)(u.root,o),ref:t},a,{children:[r,s.required&&(0,xe.jsxs)(Nn,{ownerState:l,"aria-hidden":!0,className:u.asterisk,children:[" ","*"]})]}))}));function Ln(e){return(0,ye.Z)("MuiInputLabel",e)}(0,ge.Z)("MuiInputLabel",["root","focused","disabled","error","required","asterisk","formControl","sizeSmall","shrink","animated","standard","filled","outlined"]);const $n=["disableAnimation","margin","shrink","variant","className"],Dn=(0,fe.ZP)(In,{shouldForwardProp:e=>(0,fe.FO)(e)||"classes"===e,name:"MuiInputLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`& .${An.asterisk}`]:t.asterisk},t.root,n.formControl&&t.formControl,"small"===n.size&&t.sizeSmall,n.shrink&&t.shrink,!n.disableAnimation&&t.animated,t[n.variant]]}})((({theme:e,ownerState:t})=>(0,y.Z)({display:"block",transformOrigin:"top left",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",maxWidth:"100%"},t.formControl&&{position:"absolute",left:0,top:0,transform:"translate(0, 20px) scale(1)"},"small"===t.size&&{transform:"translate(0, 17px) scale(1)"},t.shrink&&{transform:"translate(0, -1.5px) scale(0.75)",transformOrigin:"top left",maxWidth:"133%"},!t.disableAnimation&&{transition:e.transitions.create(["color","transform","max-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},"filled"===t.variant&&(0,y.Z)({zIndex:1,pointerEvents:"none",transform:"translate(12px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},"small"===t.size&&{transform:"translate(12px, 13px) scale(1)"},t.shrink&&(0,y.Z)({userSelect:"none",pointerEvents:"auto",transform:"translate(12px, 7px) scale(0.75)",maxWidth:"calc(133% - 24px)"},"small"===t.size&&{transform:"translate(12px, 4px) scale(0.75)"})),"outlined"===t.variant&&(0,y.Z)({zIndex:1,pointerEvents:"none",transform:"translate(14px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},"small"===t.size&&{transform:"translate(14px, 9px) scale(1)"},t.shrink&&{userSelect:"none",pointerEvents:"auto",maxWidth:"calc(133% - 32px)",transform:"translate(14px, -9px) scale(0.75)"}))));var zn=e.forwardRef((function(e,t){const n=(0,de.Z)({name:"MuiInputLabel",props:e}),{disableAnimation:r=!1,shrink:o,className:i}=n,a=(0,I.Z)(n,$n),s=Bt();let l=o;void 0===l&&s&&(l=s.filled||s.focused||s.adornedStart);const u=zt({props:n,muiFormControl:s,states:["size","variant","required"]}),c=(0,y.Z)({},n,{disableAnimation:r,formControl:s,shrink:l,size:u.size,variant:u.variant,required:u.required}),f=(e=>{const{classes:t,formControl:n,size:r,shrink:o,disableAnimation:i,variant:a,required:s}=e,l={root:["root",n&&"formControl",!i&&"animated",o&&"shrink","small"===r&&"sizeSmall",a],asterisk:[s&&"asterisk"]},u=(0,ce.Z)(l,Ln,t);return(0,y.Z)({},t,u)})(c);return(0,xe.jsx)(Dn,(0,y.Z)({"data-shrink":l,ownerState:c,ref:t,className:(0,re.Z)(f.root,i)},a,{classes:f}))})),Fn=o(8502);function Bn(e){return(0,ye.Z)("MuiFormControl",e)}(0,ge.Z)("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const qn=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],Wn=(0,fe.ZP)("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:e},t)=>(0,y.Z)({},t.root,t[`margin${(0,dt.Z)(e.margin)}`],e.fullWidth&&t.fullWidth)})((({ownerState:e})=>(0,y.Z)({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},"normal"===e.margin&&{marginTop:16,marginBottom:8},"dense"===e.margin&&{marginTop:8,marginBottom:4},e.fullWidth&&{width:"100%"})));var Un=e.forwardRef((function(t,n){const r=(0,de.Z)({props:t,name:"MuiFormControl"}),{children:o,className:i,color:a="primary",component:s="div",disabled:l=!1,error:u=!1,focused:c,fullWidth:f=!1,hiddenLabel:d=!1,margin:p="none",required:h=!1,size:m="medium",variant:v="outlined"}=r,g=(0,I.Z)(r,qn),b=(0,y.Z)({},r,{color:a,component:s,disabled:l,error:u,fullWidth:f,hiddenLabel:d,margin:p,required:h,size:m,variant:v}),w=(e=>{const{classes:t,margin:n,fullWidth:r}=e,o={root:["root","none"!==n&&`margin${(0,dt.Z)(n)}`,r&&"fullWidth"]};return(0,ce.Z)(o,Bn,t)})(b),[_,x]=e.useState((()=>{let t=!1;return o&&e.Children.forEach(o,(e=>{if(!(0,Fn.Z)(e,["Input","Select"]))return;const n=(0,Fn.Z)(e,["Select"])?e.props.input:e;n&&n.props.startAdornment&&(t=!0)})),t})),[k,S]=e.useState((()=>{let t=!1;return o&&e.Children.forEach(o,(e=>{(0,Fn.Z)(e,["Input","Select"])&&Ht(e.props,!0)&&(t=!0)})),t})),[E,P]=e.useState(!1);l&&E&&P(!1);const O=void 0===c||l?E:c;let C;const j=e.useMemo((()=>({adornedStart:_,setAdornedStart:x,color:a,disabled:l,error:u,filled:k,focused:O,fullWidth:f,hiddenLabel:d,size:m,onBlur:()=>{P(!1)},onEmpty:()=>{S(!1)},onFilled:()=>{S(!0)},onFocus:()=>{P(!0)},registerEffect:C,required:h,variant:v})),[_,a,l,u,k,O,f,d,C,h,m,v]);return(0,xe.jsx)(Ft.Provider,{value:j,children:(0,xe.jsx)(Wn,(0,y.Z)({as:s,ownerState:b,className:(0,re.Z)(w.root,i),ref:n},g,{children:o}))})}));function Vn(e){return(0,ye.Z)("MuiFormHelperText",e)}var Hn,Kn=(0,ge.Z)("MuiFormHelperText",["root","error","disabled","sizeSmall","sizeMedium","contained","focused","filled","required"]);const Gn=["children","className","component","disabled","error","filled","focused","margin","required","variant"],Qn=(0,fe.ZP)("p",{name:"MuiFormHelperText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.size&&t[`size${(0,dt.Z)(n.size)}`],n.contained&&t.contained,n.filled&&t.filled]}})((({theme:e,ownerState:t})=>(0,y.Z)({color:(e.vars||e).palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:3,marginRight:0,marginBottom:0,marginLeft:0,[`&.${Kn.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${Kn.error}`]:{color:(e.vars||e).palette.error.main}},"small"===t.size&&{marginTop:4},t.contained&&{marginLeft:14,marginRight:14})));var Yn=e.forwardRef((function(e,t){const n=(0,de.Z)({props:e,name:"MuiFormHelperText"}),{children:r,className:o,component:i="p"}=n,a=(0,I.Z)(n,Gn),s=zt({props:n,muiFormControl:Bt(),states:["variant","size","disabled","error","filled","focused","required"]}),l=(0,y.Z)({},n,{component:i,contained:"filled"===s.variant||"outlined"===s.variant,variant:s.variant,size:s.size,disabled:s.disabled,error:s.error,filled:s.filled,focused:s.focused,required:s.required}),u=(e=>{const{classes:t,contained:n,size:r,disabled:o,error:i,filled:a,focused:s,required:l}=e,u={root:["root",o&&"disabled",i&&"error",r&&`size${(0,dt.Z)(r)}`,n&&"contained",s&&"focused",a&&"filled",l&&"required"]};return(0,ce.Z)(u,Vn,t)})(l);return(0,xe.jsx)(Qn,(0,y.Z)({as:i,ownerState:l,className:(0,re.Z)(u.root,o),ref:t},a,{children:" "===r?Hn||(Hn=(0,xe.jsx)("span",{className:"notranslate",children:"​"})):r}))})),Xn=(o(9864),o(8038)),Jn=e.createContext({});function er(e){return(0,ye.Z)("MuiList",e)}(0,ge.Z)("MuiList",["root","padding","dense","subheader"]);const tr=["children","className","component","dense","disablePadding","subheader"],nr=(0,fe.ZP)("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disablePadding&&t.padding,n.dense&&t.dense,n.subheader&&t.subheader]}})((({ownerState:e})=>(0,y.Z)({listStyle:"none",margin:0,padding:0,position:"relative"},!e.disablePadding&&{paddingTop:8,paddingBottom:8},e.subheader&&{paddingTop:0}))),rr=e.forwardRef((function(t,n){const r=(0,de.Z)({props:t,name:"MuiList"}),{children:o,className:i,component:a="ul",dense:s=!1,disablePadding:l=!1,subheader:u}=r,c=(0,I.Z)(r,tr),f=e.useMemo((()=>({dense:s})),[s]),d=(0,y.Z)({},r,{component:a,dense:s,disablePadding:l}),p=(e=>{const{classes:t,disablePadding:n,dense:r,subheader:o}=e,i={root:["root",!n&&"padding",r&&"dense",o&&"subheader"]};return(0,ce.Z)(i,er,t)})(d);return(0,xe.jsx)(Jn.Provider,{value:f,children:(0,xe.jsxs)(nr,(0,y.Z)({as:a,className:(0,re.Z)(p.root,i),ref:n,ownerState:d},c,{children:[u,o]}))})}));var or=rr;function ir(e){const t=e.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}var ar=ir;const sr=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function lr(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function ur(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function cr(e,t){if(void 0===t)return!0;let n=e.innerText;return void 0===n&&(n=e.textContent),n=n.trim().toLowerCase(),0!==n.length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function fr(e,t,n,r,o,i){let a=!1,s=o(e,t,!!t&&n);for(;s;){if(s===e.firstChild){if(a)return!1;a=!0}const t=!r&&(s.disabled||"true"===s.getAttribute("aria-disabled"));if(s.hasAttribute("tabindex")&&cr(s,i)&&!t)return s.focus(),!0;s=o(e,s,n)}return!1}var dr=e.forwardRef((function(t,n){const{actions:r,autoFocus:o=!1,autoFocusItem:i=!1,children:a,className:s,disabledItemsFocusable:l=!1,disableListWrap:u=!1,onKeyDown:c,variant:f="selectedMenu"}=t,d=(0,I.Z)(t,sr),p=e.useRef(null),h=e.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});(0,qt.Z)((()=>{o&&p.current.focus()}),[o]),e.useImperativeHandle(r,(()=>({adjustStyleForScrollbar:(e,t)=>{const n=!p.current.style.width;if(e.clientHeight<p.current.clientHeight&&n){const n=`${ar((0,Xn.Z)(e))}px`;p.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=n,p.current.style.width=`calc(100% + ${n})`}return p.current}})),[]);const m=(0,Re.Z)(p,n);let v=-1;e.Children.forEach(a,((t,n)=>{e.isValidElement(t)&&(t.props.disabled||("selectedMenu"===f&&t.props.selected||-1===v)&&(v=n),v===n&&(t.props.disabled||t.props.muiSkipListHighlight||t.type.muiSkipListHighlight)&&(v+=1,v>=a.length&&(v=-1)))}));const g=e.Children.map(a,((t,n)=>{if(n===v){const n={};return i&&(n.autoFocus=!0),void 0===t.props.tabIndex&&"selectedMenu"===f&&(n.tabIndex=0),e.cloneElement(t,n)}return t}));return(0,xe.jsx)(or,(0,y.Z)({role:"menu",ref:m,className:s,onKeyDown:e=>{const t=p.current,n=e.key,r=(0,Xn.Z)(t).activeElement;if("ArrowDown"===n)e.preventDefault(),fr(t,r,u,l,lr);else if("ArrowUp"===n)e.preventDefault(),fr(t,r,u,l,ur);else if("Home"===n)e.preventDefault(),fr(t,null,u,l,lr);else if("End"===n)e.preventDefault(),fr(t,null,u,l,ur);else if(1===n.length){const o=h.current,i=n.toLowerCase(),a=performance.now();o.keys.length>0&&(a-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&i!==o.keys[0]&&(o.repeating=!1)),o.lastTime=a,o.keys.push(i);const s=r&&!o.repeating&&cr(r,o);o.previousKeyMatched&&(s||fr(t,r,!1,l,lr,o))?e.preventDefault():o.previousKeyMatched=!1}c&&c(e)},tabIndex:o?0:-1},d,{children:g}))})),pr=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)};function hr(e){return(0,ye.Z)("MuiPaper",e)}(0,ge.Z)("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const mr=["className","component","elevation","square","variant"],vr=(0,fe.ZP)("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((({theme:e,ownerState:t})=>{var n;return(0,y.Z)({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.divider}`},"elevation"===t.variant&&(0,y.Z)({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${(0,Te.Fq)("#fff",pr(t.elevation))}, ${(0,Te.Fq)("#fff",pr(t.elevation))})`},e.vars&&{backgroundImage:null==(n=e.vars.overlays)?void 0:n[t.elevation]}))}));var gr=e.forwardRef((function(e,t){const n=(0,de.Z)({props:e,name:"MuiPaper"}),{className:r,component:o="div",elevation:i=1,square:a=!1,variant:s="elevation"}=n,l=(0,I.Z)(n,mr),u=(0,y.Z)({},n,{component:o,elevation:i,square:a,variant:s}),c=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e,i={root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]};return(0,ce.Z)(i,hr,o)})(u);return(0,xe.jsx)(vr,(0,y.Z)({as:o,ownerState:u,className:(0,re.Z)(c.root,r),ref:t},l))})),yr=o(7144),br=o(5340),wr="unmounted",_r="exited",xr="entering",kr="entered",Sr="exiting",Er=function(n){function r(e,t){var r;r=n.call(this,e,t)||this;var o,i=t&&!t.isMounting?e.enter:e.appear;return r.appearStatus=null,e.in?i?(o=_r,r.appearStatus=xr):o=kr:o=e.unmountOnExit||e.mountOnEnter?wr:_r,r.state={status:o},r.nextCallback=null,r}m(r,n),r.getDerivedStateFromProps=function(e,t){return e.in&&t.status===wr?{status:_r}:null};var o=r.prototype;return o.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},o.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==xr&&n!==kr&&(t=xr):n!==xr&&n!==kr||(t=Sr)}this.updateStatus(!1,t)},o.componentWillUnmount=function(){this.cancelNextCallback()},o.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},o.updateStatus=function(e,n){if(void 0===e&&(e=!1),null!==n)if(this.cancelNextCallback(),n===xr){if(this.props.unmountOnExit||this.props.mountOnEnter){var r=this.props.nodeRef?this.props.nodeRef.current:t.findDOMNode(this);r&&function(e){e.scrollTop}(r)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===_r&&this.setState({status:wr})},o.performEnter=function(e){var n=this,r=this.props.enter,o=this.context?this.context.isMounting:e,i=this.props.nodeRef?[o]:[t.findDOMNode(this),o],a=i[0],s=i[1],l=this.getTimeouts(),u=o?l.appear:l.enter;e||r?(this.props.onEnter(a,s),this.safeSetState({status:xr},(function(){n.props.onEntering(a,s),n.onTransitionEnd(u,(function(){n.safeSetState({status:kr},(function(){n.props.onEntered(a,s)}))}))}))):this.safeSetState({status:kr},(function(){n.props.onEntered(a)}))},o.performExit=function(){var e=this,n=this.props.exit,r=this.getTimeouts(),o=this.props.nodeRef?void 0:t.findDOMNode(this);n?(this.props.onExit(o),this.safeSetState({status:Sr},(function(){e.props.onExiting(o),e.onTransitionEnd(r.exit,(function(){e.safeSetState({status:_r},(function(){e.props.onExited(o)}))}))}))):this.safeSetState({status:_r},(function(){e.props.onExited(o)}))},o.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},o.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},o.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},o.onTransitionEnd=function(e,n){this.setNextCallback(n);var r=this.props.nodeRef?this.props.nodeRef.current:t.findDOMNode(this),o=null==e&&!this.props.addEndListener;if(r&&!o){if(this.props.addEndListener){var i=this.props.nodeRef?[this.nextCallback]:[r,this.nextCallback],a=i[0],s=i[1];this.props.addEndListener(a,s)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},o.render=function(){var t=this.state.status;if(t===wr)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,(0,I.Z)(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return e.createElement(Me.Provider,{value:null},"function"==typeof r?r(t,o):e.cloneElement(e.Children.only(r),o))},r}(e.Component);function Pr(){}Er.contextType=Me,Er.propTypes={},Er.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Pr,onEntering:Pr,onEntered:Pr,onExit:Pr,onExiting:Pr,onExited:Pr},Er.UNMOUNTED=wr,Er.EXITED=_r,Er.ENTERING=xr,Er.ENTERED=kr,Er.EXITING=Sr;var Or=Er;const Cr=e=>e.scrollTop;function jr(e,t){var n,r;const{timeout:o,easing:i,style:a={}}=e;return{duration:null!=(n=a.transitionDuration)?n:"number"==typeof o?o:o[t.mode]||0,easing:null!=(r=a.transitionTimingFunction)?r:"object"==typeof i?i[t.mode]:i,delay:a.transitionDelay}}const Tr=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function Rr(e){return`scale(${e}, ${e**2})`}const Ar={entering:{opacity:1,transform:Rr(1)},entered:{opacity:1,transform:"none"}},Zr="undefined"!=typeof navigator&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),Mr=e.forwardRef((function(t,n){const{addEndListener:r,appear:o=!0,children:i,easing:a,in:s,onEnter:l,onEntered:u,onEntering:c,onExit:f,onExited:d,onExiting:p,style:h,timeout:m="auto",TransitionComponent:v=Or}=t,g=(0,I.Z)(t,Tr),b=e.useRef(),w=e.useRef(),_=me(),x=e.useRef(null),k=(0,Re.Z)(x,i.ref,n),S=e=>t=>{if(e){const n=x.current;void 0===t?e(n):e(n,t)}},E=S(c),P=S(((e,t)=>{Cr(e);const{duration:n,delay:r,easing:o}=jr({style:h,timeout:m,easing:a},{mode:"enter"});let i;"auto"===m?(i=_.transitions.getAutoHeightDuration(e.clientHeight),w.current=i):i=n,e.style.transition=[_.transitions.create("opacity",{duration:i,delay:r}),_.transitions.create("transform",{duration:Zr?i:.666*i,delay:r,easing:o})].join(","),l&&l(e,t)})),O=S(u),C=S(p),j=S((e=>{const{duration:t,delay:n,easing:r}=jr({style:h,timeout:m,easing:a},{mode:"exit"});let o;"auto"===m?(o=_.transitions.getAutoHeightDuration(e.clientHeight),w.current=o):o=t,e.style.transition=[_.transitions.create("opacity",{duration:o,delay:n}),_.transitions.create("transform",{duration:Zr?o:.666*o,delay:Zr?n:n||.333*o,easing:r})].join(","),e.style.opacity=0,e.style.transform=Rr(.75),f&&f(e)})),T=S(d);return e.useEffect((()=>()=>{clearTimeout(b.current)}),[]),(0,xe.jsx)(v,(0,y.Z)({appear:o,in:s,nodeRef:x,onEnter:P,onEntered:O,onEntering:E,onExit:j,onExited:T,onExiting:C,addEndListener:e=>{"auto"===m&&(b.current=setTimeout(e,w.current||0)),r&&r(x.current,e)},timeout:"auto"===m?null:m},g,{children:(t,n)=>e.cloneElement(i,(0,y.Z)({style:(0,y.Z)({opacity:0,transform:Rr(.75),visibility:"exited"!==t||s?void 0:"hidden"},Ar[t],h,i.props.style),ref:k},n))}))}));Mr.muiSupportAuto=!0;var Nr=Mr,Ir=o(7094),Lr=o(3633),$r=o(9064),Dr=o(7960),zr=e.forwardRef((function(n,r){const{children:o,container:i,disablePortal:a=!1}=n,[s,l]=e.useState(null),u=(0,Tt.Z)(e.isValidElement(o)?o.ref:null,r);if((0,Zt.Z)((()=>{a||l(function(e){return"function"==typeof e?e():e}(i)||document.body)}),[i,a]),(0,Zt.Z)((()=>{if(s&&!a)return(0,Dr.Z)(r,s),()=>{(0,Dr.Z)(r,null)}}),[r,s,a]),a){if(e.isValidElement(o)){const t={ref:u};return e.cloneElement(o,t)}return(0,xe.jsx)(e.Fragment,{children:o})}return(0,xe.jsx)(e.Fragment,{children:s?t.createPortal(o,s):s})}));function Fr(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Br(e){return parseInt((0,Rt.Z)(e).getComputedStyle(e).paddingRight,10)||0}function qr(e,t,n,r,o){const i=[t,n,...r];[].forEach.call(e.children,(e=>{const t=-1===i.indexOf(e),n=!function(e){const t=-1!==["TEMPLATE","SCRIPT","STYLE","LINK","MAP","META","NOSCRIPT","PICTURE","COL","COLGROUP","PARAM","SLOT","SOURCE","TRACK"].indexOf(e.tagName),n="INPUT"===e.tagName&&"hidden"===e.getAttribute("type");return t||n}(e);t&&n&&Fr(e,o)}))}function Wr(e,t){let n=-1;return e.some(((e,r)=>!!t(e)&&(n=r,!0))),n}const Ur=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function Vr(e){const t=[],n=[];return Array.from(e.querySelectorAll(Ur)).forEach(((e,r)=>{const o=function(e){const t=parseInt(e.getAttribute("tabindex")||"",10);return Number.isNaN(t)?"true"===e.contentEditable||("AUDIO"===e.nodeName||"VIDEO"===e.nodeName||"DETAILS"===e.nodeName)&&null===e.getAttribute("tabindex")?0:e.tabIndex:t}(e);-1!==o&&function(e){return!(e.disabled||"INPUT"===e.tagName&&"hidden"===e.type||function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return!1;if(!e.name)return!1;const t=t=>e.ownerDocument.querySelector(`input[type="radio"]${t}`);let n=t(`[name="${e.name}"]:checked`);return n||(n=t(`[name="${e.name}"]`)),n!==e}(e))}(e)&&(0===o?t.push(e):n.push({documentOrder:r,tabIndex:o,node:e}))})),n.sort(((e,t)=>e.tabIndex===t.tabIndex?e.documentOrder-t.documentOrder:e.tabIndex-t.tabIndex)).map((e=>e.node)).concat(t)}function Hr(){return!0}var Kr=function(t){const{children:n,disableAutoFocus:r=!1,disableEnforceFocus:o=!1,disableRestoreFocus:i=!1,getTabbable:a=Vr,isEnabled:s=Hr,open:l}=t,u=e.useRef(!1),c=e.useRef(null),f=e.useRef(null),d=e.useRef(null),p=e.useRef(null),h=e.useRef(!1),m=e.useRef(null),v=(0,Tt.Z)(n.ref,m),g=e.useRef(null);e.useEffect((()=>{l&&m.current&&(h.current=!r)}),[r,l]),e.useEffect((()=>{if(!l||!m.current)return;const e=(0,Ir.Z)(m.current);return m.current.contains(e.activeElement)||(m.current.hasAttribute("tabIndex")||m.current.setAttribute("tabIndex","-1"),h.current&&m.current.focus()),()=>{i||(d.current&&d.current.focus&&(u.current=!0,d.current.focus()),d.current=null)}}),[l]),e.useEffect((()=>{if(!l||!m.current)return;const e=(0,Ir.Z)(m.current),t=t=>{const{current:n}=m;if(null!==n)if(e.hasFocus()&&!o&&s()&&!u.current){if(!n.contains(e.activeElement)){if(t&&p.current!==t.target||e.activeElement!==p.current)p.current=null;else if(null!==p.current)return;if(!h.current)return;let o=[];if(e.activeElement!==c.current&&e.activeElement!==f.current||(o=a(m.current)),o.length>0){var r,i;const e=Boolean((null==(r=g.current)?void 0:r.shiftKey)&&"Tab"===(null==(i=g.current)?void 0:i.key)),t=o[0],n=o[o.length-1];"string"!=typeof t&&"string"!=typeof n&&(e?n.focus():t.focus())}else n.focus()}}else u.current=!1},n=t=>{g.current=t,!o&&s()&&"Tab"===t.key&&e.activeElement===m.current&&t.shiftKey&&(u.current=!0,f.current&&f.current.focus())};e.addEventListener("focusin",t),e.addEventListener("keydown",n,!0);const r=setInterval((()=>{e.activeElement&&"BODY"===e.activeElement.tagName&&t(null)}),50);return()=>{clearInterval(r),e.removeEventListener("focusin",t),e.removeEventListener("keydown",n,!0)}}),[r,o,i,s,l,a]);const y=e=>{null===d.current&&(d.current=e.relatedTarget),h.current=!0};return(0,xe.jsxs)(e.Fragment,{children:[(0,xe.jsx)("div",{tabIndex:l?0:-1,onFocus:y,ref:c,"data-testid":"sentinelStart"}),e.cloneElement(n,{ref:v,onFocus:e=>{null===d.current&&(d.current=e.relatedTarget),h.current=!0,p.current=e.target;const t=n.props.onFocus;t&&t(e)}}),(0,xe.jsx)("div",{tabIndex:l?0:-1,onFocus:y,ref:f,"data-testid":"sentinelEnd"})]})};function Gr(e){return(0,ye.Z)("MuiModal",e)}function Qr(e){if(void 0===e)return{};const t={};return Object.keys(e).filter((t=>!(t.match(/^on[A-Z]/)&&"function"==typeof e[t]))).forEach((n=>{t[n]=e[n]})),t}function Yr(e,t){return"function"==typeof e?e(t):e}(0,ge.Z)("MuiModal",["root","hidden","backdrop"]);const Xr=["elementType","externalSlotProps","ownerState"];function Jr(e){var t;const{elementType:n,externalSlotProps:r,ownerState:o}=e,i=(0,I.Z)(e,Xr),a=Yr(r,o),{props:s,internalRef:l}=function(e){const{getSlotProps:t,additionalProps:n,externalSlotProps:r,externalForwardedProps:o,className:i}=e;if(!t){const e=(0,re.Z)(null==o?void 0:o.className,null==r?void 0:r.className,i,null==n?void 0:n.className),t=(0,y.Z)({},null==n?void 0:n.style,null==o?void 0:o.style,null==r?void 0:r.style),a=(0,y.Z)({},n,o,r);return e.length>0&&(a.className=e),Object.keys(t).length>0&&(a.style=t),{props:a,internalRef:void 0}}const a=function(e,t=[]){if(void 0===e)return{};const n={};return Object.keys(e).filter((n=>n.match(/^on[A-Z]/)&&"function"==typeof e[n]&&!t.includes(n))).forEach((t=>{n[t]=e[t]})),n}((0,y.Z)({},o,r)),s=Qr(r),l=Qr(o),u=t(a),c=(0,re.Z)(null==u?void 0:u.className,null==n?void 0:n.className,i,null==o?void 0:o.className,null==r?void 0:r.className),f=(0,y.Z)({},null==u?void 0:u.style,null==n?void 0:n.style,null==o?void 0:o.style,null==r?void 0:r.style),d=(0,y.Z)({},u,n,l,s);return c.length>0&&(d.className=c),Object.keys(f).length>0&&(d.style=f),{props:d,internalRef:u.ref}}((0,y.Z)({},i,{externalSlotProps:a})),u=(0,Tt.Z)(l,null==a?void 0:a.ref,null==(t=e.additionalProps)?void 0:t.ref),c=function(e,t,n){return void 0===e||Dt(e)?t:(0,y.Z)({},t,{ownerState:(0,y.Z)({},t.ownerState,n)})}(n,(0,y.Z)({},s,{ref:u}),o);return c}const eo=["children","closeAfterTransition","component","container","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onKeyDown","open","onTransitionEnter","onTransitionExited","slotProps","slots"],to=new class{constructor(){this.containers=void 0,this.modals=void 0,this.modals=[],this.containers=[]}add(e,t){let n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Fr(e.modalRef,!1);const r=function(e){const t=[];return[].forEach.call(e.children,(e=>{"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);qr(t,e.mount,e.modalRef,r,!0);const o=Wr(this.containers,(e=>e.container===t));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblings:r}),n)}mount(e,t){const n=Wr(this.containers,(t=>-1!==t.modals.indexOf(e))),r=this.containers[n];r.restore||(r.restore=function(e,t){const n=[],r=e.container;if(!t.disableScrollLock){if(function(e){const t=(0,Ir.Z)(e);return t.body===e?(0,Rt.Z)(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(r)){const e=ir((0,Ir.Z)(r));n.push({value:r.style.paddingRight,property:"padding-right",el:r}),r.style.paddingRight=`${Br(r)+e}px`;const t=(0,Ir.Z)(r).querySelectorAll(".mui-fixed");[].forEach.call(t,(t=>{n.push({value:t.style.paddingRight,property:"padding-right",el:t}),t.style.paddingRight=`${Br(t)+e}px`}))}let e;if(r.parentNode instanceof DocumentFragment)e=(0,Ir.Z)(r).body;else{const t=r.parentElement,n=(0,Rt.Z)(r);e="HTML"===(null==t?void 0:t.nodeName)&&"scroll"===n.getComputedStyle(t).overflowY?t:r}n.push({value:e.style.overflow,property:"overflow",el:e},{value:e.style.overflowX,property:"overflow-x",el:e},{value:e.style.overflowY,property:"overflow-y",el:e}),e.style.overflow="hidden"}return()=>{n.forEach((({value:e,el:t,property:n})=>{e?t.style.setProperty(n,e):t.style.removeProperty(n)}))}}(r,t))}remove(e,t=!0){const n=this.modals.indexOf(e);if(-1===n)return n;const r=Wr(this.containers,(t=>-1!==t.modals.indexOf(e))),o=this.containers[r];if(o.modals.splice(o.modals.indexOf(e),1),this.modals.splice(n,1),0===o.modals.length)o.restore&&o.restore(),e.modalRef&&Fr(e.modalRef,t),qr(o.container,e.mount,e.modalRef,o.hiddenSiblings,!1),this.containers.splice(r,1);else{const e=o.modals[o.modals.length-1];e.modalRef&&Fr(e.modalRef,!1)}return n}isTopModal(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}};var no=e.forwardRef((function(t,n){var r,o;const{children:i,closeAfterTransition:a=!1,component:s,container:l,disableAutoFocus:u=!1,disableEnforceFocus:c=!1,disableEscapeKeyDown:f=!1,disablePortal:d=!1,disableRestoreFocus:p=!1,disableScrollLock:h=!1,hideBackdrop:m=!1,keepMounted:v=!1,manager:g=to,onBackdropClick:b,onClose:w,onKeyDown:_,open:x,onTransitionEnter:k,onTransitionExited:S,slotProps:E={},slots:P={}}=t,O=(0,I.Z)(t,eo),[C,j]=e.useState(!x),T=e.useRef({}),R=e.useRef(null),A=e.useRef(null),Z=(0,Tt.Z)(A,n),M=function(e){return!!e&&e.props.hasOwnProperty("in")}(i),N=null==(r=t["aria-hidden"])||r,L=()=>(T.current.modalRef=A.current,T.current.mountNode=R.current,T.current),$=()=>{g.mount(L(),{disableScrollLock:h}),A.current&&(A.current.scrollTop=0)},D=(0,Lr.Z)((()=>{const e=function(e){return"function"==typeof e?e():e}(l)||(0,Ir.Z)(R.current).body;g.add(L(),e),A.current&&$()})),z=e.useCallback((()=>g.isTopModal(L())),[g]),F=(0,Lr.Z)((e=>{R.current=e,e&&A.current&&(x&&z()?$():Fr(A.current,N))})),B=e.useCallback((()=>{g.remove(L(),N)}),[g,N]);e.useEffect((()=>()=>{B()}),[B]),e.useEffect((()=>{x?D():M&&a||B()}),[x,B,M,a,D]);const q=(0,y.Z)({},t,{closeAfterTransition:a,disableAutoFocus:u,disableEnforceFocus:c,disableEscapeKeyDown:f,disablePortal:d,disableRestoreFocus:p,disableScrollLock:h,exited:C,hideBackdrop:m,keepMounted:v}),W=(e=>{const{open:t,exited:n}=e,r={root:["root",!t&&n&&"hidden"],backdrop:["backdrop"]};return(0,ce.Z)(r,Gr,void 0)})(q),U={};void 0===i.props.tabIndex&&(U.tabIndex="-1"),M&&(U.onEnter=(0,$r.Z)((()=>{j(!1),k&&k()}),i.props.onEnter),U.onExited=(0,$r.Z)((()=>{j(!0),S&&S(),a&&B()}),i.props.onExited));const V=null!=(o=null!=s?s:P.root)?o:"div",H=Jr({elementType:V,externalSlotProps:E.root,externalForwardedProps:O,additionalProps:{ref:Z,role:"presentation",onKeyDown:e=>{_&&_(e),"Escape"===e.key&&z()&&(f||(e.stopPropagation(),w&&w(e,"escapeKeyDown")))}},className:W.root,ownerState:q}),K=P.backdrop,G=Jr({elementType:K,externalSlotProps:E.backdrop,additionalProps:{"aria-hidden":!0,onClick:e=>{e.target===e.currentTarget&&(b&&b(e),w&&w(e,"backdropClick"))},open:x},className:W.backdrop,ownerState:q});return v||x||M&&!C?(0,xe.jsx)(zr,{ref:F,container:l,disablePortal:d,children:(0,xe.jsxs)(V,(0,y.Z)({},H,{children:[!m&&K?(0,xe.jsx)(K,(0,y.Z)({},G)):null,(0,xe.jsx)(Kr,{disableEnforceFocus:c,disableAutoFocus:u,disableRestoreFocus:p,isEnabled:z,open:x,children:e.cloneElement(i,U)})]}))}):null}));const ro=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],oo={entering:{opacity:1},entered:{opacity:1}};var io=e.forwardRef((function(t,n){const r=me(),o={enter:r.transitions.duration.enteringScreen,exit:r.transitions.duration.leavingScreen},{addEndListener:i,appear:a=!0,children:s,easing:l,in:u,onEnter:c,onEntered:f,onEntering:d,onExit:p,onExited:h,onExiting:m,style:v,timeout:g=o,TransitionComponent:b=Or}=t,w=(0,I.Z)(t,ro),_=e.useRef(null),x=(0,Re.Z)(_,s.ref,n),k=e=>t=>{if(e){const n=_.current;void 0===t?e(n):e(n,t)}},S=k(d),E=k(((e,t)=>{Cr(e);const n=jr({style:v,timeout:g,easing:l},{mode:"enter"});e.style.webkitTransition=r.transitions.create("opacity",n),e.style.transition=r.transitions.create("opacity",n),c&&c(e,t)})),P=k(f),O=k(m),C=k((e=>{const t=jr({style:v,timeout:g,easing:l},{mode:"exit"});e.style.webkitTransition=r.transitions.create("opacity",t),e.style.transition=r.transitions.create("opacity",t),p&&p(e)})),j=k(h);return(0,xe.jsx)(b,(0,y.Z)({appear:a,in:u,nodeRef:_,onEnter:E,onEntered:P,onEntering:S,onExit:C,onExited:j,onExiting:O,addEndListener:e=>{i&&i(_.current,e)},timeout:g},w,{children:(t,n)=>e.cloneElement(s,(0,y.Z)({style:(0,y.Z)({opacity:0,visibility:"exited"!==t||u?void 0:"hidden"},oo[t],v,s.props.style),ref:x},n))}))}));function ao(e){return(0,ye.Z)("MuiBackdrop",e)}(0,ge.Z)("MuiBackdrop",["root","invisible"]);const so=["children","className","component","components","componentsProps","invisible","open","slotProps","slots","TransitionComponent","transitionDuration"],lo=(0,fe.ZP)("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.invisible&&t.invisible]}})((({ownerState:e})=>(0,y.Z)({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},e.invisible&&{backgroundColor:"transparent"})));var uo=e.forwardRef((function(e,t){var n,r,o;const i=(0,de.Z)({props:e,name:"MuiBackdrop"}),{children:a,className:s,component:l="div",components:u={},componentsProps:c={},invisible:f=!1,open:d,slotProps:p={},slots:h={},TransitionComponent:m=io,transitionDuration:v}=i,g=(0,I.Z)(i,so),b=(0,y.Z)({},i,{component:l,invisible:f}),w=(e=>{const{classes:t,invisible:n}=e,r={root:["root",n&&"invisible"]};return(0,ce.Z)(r,ao,t)})(b),_=null!=(n=p.root)?n:c.root;return(0,xe.jsx)(m,(0,y.Z)({in:d,timeout:v},g,{children:(0,xe.jsx)(lo,(0,y.Z)({"aria-hidden":!0},_,{as:null!=(r=null!=(o=h.root)?o:u.Root)?r:l,className:(0,re.Z)(w.root,s,null==_?void 0:_.className),ownerState:(0,y.Z)({},b,null==_?void 0:_.ownerState),classes:w,ref:t,children:a}))}))}));const co=["BackdropComponent","BackdropProps","classes","className","closeAfterTransition","children","component","components","componentsProps","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","slotProps","slots","theme"],fo=(0,fe.ZP)("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.open&&n.exited&&t.hidden]}})((({theme:e,ownerState:t})=>(0,y.Z)({position:"fixed",zIndex:(e.vars||e).zIndex.modal,right:0,bottom:0,top:0,left:0},!t.open&&t.exited&&{visibility:"hidden"}))),po=(0,fe.ZP)(uo,{name:"MuiModal",slot:"Backdrop",overridesResolver:(e,t)=>t.backdrop})({zIndex:-1});var ho=e.forwardRef((function(t,n){var r,o,i,a,s,l;const u=(0,de.Z)({name:"MuiModal",props:t}),{BackdropComponent:c=po,BackdropProps:f,classes:d,className:p,closeAfterTransition:h=!1,children:m,component:v,components:g={},componentsProps:b={},disableAutoFocus:w=!1,disableEnforceFocus:_=!1,disableEscapeKeyDown:x=!1,disablePortal:k=!1,disableRestoreFocus:S=!1,disableScrollLock:E=!1,hideBackdrop:P=!1,keepMounted:O=!1,slotProps:C,slots:j,theme:T}=u,R=(0,I.Z)(u,co),[A,Z]=e.useState(!0),M={closeAfterTransition:h,disableAutoFocus:w,disableEnforceFocus:_,disableEscapeKeyDown:x,disablePortal:k,disableRestoreFocus:S,disableScrollLock:E,hideBackdrop:P,keepMounted:O},N=(0,y.Z)({},u,M,{exited:A}),L=null!=(r=null!=(o=null==j?void 0:j.root)?o:g.Root)?r:fo,$=null!=(i=null!=(a=null==j?void 0:j.backdrop)?a:g.Backdrop)?i:c,D=null!=(s=null==C?void 0:C.root)?s:b.root,z=null!=(l=null==C?void 0:C.backdrop)?l:b.backdrop;return(0,xe.jsx)(no,(0,y.Z)({slots:{root:L,backdrop:$},slotProps:{root:()=>(0,y.Z)({},Yr(D,N),!Dt(L)&&{as:v,theme:T},{className:(0,re.Z)(p,null==D?void 0:D.className,null==d?void 0:d.root,!N.open&&N.exited&&(null==d?void 0:d.hidden))}),backdrop:()=>(0,y.Z)({},f,Yr(z,N),{className:(0,re.Z)(null==z?void 0:z.className,null==d?void 0:d.backdrop)})},onTransitionEnter:()=>Z(!1),onTransitionExited:()=>Z(!0),ref:n},R,M,{children:m}))}));function mo(e){return(0,ye.Z)("MuiPopover",e)}(0,ge.Z)("MuiPopover",["root","paper"]);const vo=["onEntering"],go=["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","className","container","elevation","marginThreshold","open","PaperProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"];function yo(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function bo(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function wo(e){return[e.horizontal,e.vertical].map((e=>"number"==typeof e?`${e}px`:e)).join(" ")}function _o(e){return"function"==typeof e?e():e}const xo=(0,fe.ZP)(ho,{name:"MuiPopover",slot:"Root",overridesResolver:(e,t)=>t.root})({}),ko=(0,fe.ZP)(gr,{name:"MuiPopover",slot:"Paper",overridesResolver:(e,t)=>t.paper})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0});var So=e.forwardRef((function(t,n){const r=(0,de.Z)({props:t,name:"MuiPopover"}),{action:o,anchorEl:i,anchorOrigin:a={vertical:"top",horizontal:"left"},anchorPosition:s,anchorReference:l="anchorEl",children:u,className:c,container:f,elevation:d=8,marginThreshold:p=16,open:h,PaperProps:m={},transformOrigin:v={vertical:"top",horizontal:"left"},TransitionComponent:g=Nr,transitionDuration:b="auto",TransitionProps:{onEntering:w}={}}=r,_=(0,I.Z)(r.TransitionProps,vo),x=(0,I.Z)(r,go),k=e.useRef(),S=(0,Re.Z)(k,m.ref),E=(0,y.Z)({},r,{anchorOrigin:a,anchorReference:l,elevation:d,marginThreshold:p,PaperProps:m,transformOrigin:v,TransitionComponent:g,transitionDuration:b,TransitionProps:_}),P=(e=>{const{classes:t}=e;return(0,ce.Z)({root:["root"],paper:["paper"]},mo,t)})(E),O=e.useCallback((()=>{if("anchorPosition"===l)return s;const e=_o(i),t=(e&&1===e.nodeType?e:(0,Xn.Z)(k.current).body).getBoundingClientRect();return{top:t.top+yo(t,a.vertical),left:t.left+bo(t,a.horizontal)}}),[i,a.horizontal,a.vertical,s,l]),C=e.useCallback((e=>({vertical:yo(e,v.vertical),horizontal:bo(e,v.horizontal)})),[v.horizontal,v.vertical]),j=e.useCallback((e=>{const t={width:e.offsetWidth,height:e.offsetHeight},n=C(t);if("none"===l)return{top:null,left:null,transformOrigin:wo(n)};const r=O();let o=r.top-n.vertical,a=r.left-n.horizontal;const s=o+t.height,u=a+t.width,c=(0,br.Z)(_o(i)),f=c.innerHeight-p,d=c.innerWidth-p;if(o<p){const e=o-p;o-=e,n.vertical+=e}else if(s>f){const e=s-f;o-=e,n.vertical+=e}if(a<p){const e=a-p;a-=e,n.horizontal+=e}else if(u>d){const e=u-d;a-=e,n.horizontal+=e}return{top:`${Math.round(o)}px`,left:`${Math.round(a)}px`,transformOrigin:wo(n)}}),[i,l,O,C,p]),[T,R]=e.useState(h),A=e.useCallback((()=>{const e=k.current;if(!e)return;const t=j(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin,R(!0)}),[j]);e.useEffect((()=>{h&&A()})),e.useImperativeHandle(o,(()=>h?{updatePosition:()=>{A()}}:null),[h,A]),e.useEffect((()=>{if(!h)return;const e=(0,yr.Z)((()=>{A()})),t=(0,br.Z)(i);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}}),[i,h,A]);let Z=b;"auto"!==b||g.muiSupportAuto||(Z=void 0);const M=f||(i?(0,Xn.Z)(_o(i)).body:void 0);return(0,xe.jsx)(xo,(0,y.Z)({BackdropProps:{invisible:!0},className:(0,re.Z)(P.root,c),container:M,open:h,ref:n,ownerState:E},x,{children:(0,xe.jsx)(g,(0,y.Z)({appear:!0,in:h,onEntering:(e,t)=>{w&&w(e,t),A()},onExited:()=>{R(!1)},timeout:Z},_,{children:(0,xe.jsx)(ko,(0,y.Z)({elevation:d},m,{ref:S,className:(0,re.Z)(P.paper,m.className)},T?void 0:{style:(0,y.Z)({},m.style,{opacity:0})},{ownerState:E,children:u}))}))}))}));function Eo(e){return(0,ye.Z)("MuiMenu",e)}(0,ge.Z)("MuiMenu",["root","paper","list"]);const Po=["onEntering"],Oo=["autoFocus","children","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant"],Co={vertical:"top",horizontal:"right"},jo={vertical:"top",horizontal:"left"},To=(0,fe.ZP)(So,{shouldForwardProp:e=>(0,fe.FO)(e)||"classes"===e,name:"MuiMenu",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Ro=(0,fe.ZP)(gr,{name:"MuiMenu",slot:"Paper",overridesResolver:(e,t)=>t.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),Ao=(0,fe.ZP)(dr,{name:"MuiMenu",slot:"List",overridesResolver:(e,t)=>t.list})({outline:0});var Zo=e.forwardRef((function(t,n){const r=(0,de.Z)({props:t,name:"MuiMenu"}),{autoFocus:o=!0,children:i,disableAutoFocusItem:a=!1,MenuListProps:s={},onClose:l,open:u,PaperProps:c={},PopoverClasses:f,transitionDuration:d="auto",TransitionProps:{onEntering:p}={},variant:h="selectedMenu"}=r,m=(0,I.Z)(r.TransitionProps,Po),v=(0,I.Z)(r,Oo),g=me(),b="rtl"===g.direction,w=(0,y.Z)({},r,{autoFocus:o,disableAutoFocusItem:a,MenuListProps:s,onEntering:p,PaperProps:c,transitionDuration:d,TransitionProps:m,variant:h}),_=(e=>{const{classes:t}=e;return(0,ce.Z)({root:["root"],paper:["paper"],list:["list"]},Eo,t)})(w),x=o&&!a&&u,k=e.useRef(null);let S=-1;return e.Children.map(i,((t,n)=>{e.isValidElement(t)&&(t.props.disabled||("selectedMenu"===h&&t.props.selected||-1===S)&&(S=n))})),(0,xe.jsx)(To,(0,y.Z)({onClose:l,anchorOrigin:{vertical:"bottom",horizontal:b?"right":"left"},transformOrigin:b?Co:jo,PaperProps:(0,y.Z)({component:Ro},c,{classes:(0,y.Z)({},c.classes,{root:_.paper})}),className:_.root,open:u,ref:n,transitionDuration:d,TransitionProps:(0,y.Z)({onEntering:(e,t)=>{k.current&&k.current.adjustStyleForScrollbar(e,g),p&&p(e,t)}},m),ownerState:w},v,{classes:f,children:(0,xe.jsx)(Ao,(0,y.Z)({onKeyDown:e=>{"Tab"===e.key&&(e.preventDefault(),l&&l(e,"tabKeyDown"))},actions:k,autoFocus:o&&(-1===S||a),autoFocusItem:x,variant:h},s,{className:(0,re.Z)(_.list,s.className),children:i}))}))}));function Mo(e){return(0,ye.Z)("MuiNativeSelect",e)}var No=(0,ge.Z)("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput"]);const Io=["className","disabled","IconComponent","inputRef","variant"],Lo=({ownerState:e,theme:t})=>(0,y.Z)({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":(0,y.Z)({},t.vars?{backgroundColor:`rgba(${t.vars.palette.common.onBackgroundChannel} / 0.05)`}:{backgroundColor:"light"===t.palette.mode?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)"},{borderRadius:0}),"&::-ms-expand":{display:"none"},[`&.${No.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:(t.vars||t).palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},"filled"===e.variant&&{"&&&":{paddingRight:32}},"outlined"===e.variant&&{borderRadius:(t.vars||t).shape.borderRadius,"&:focus":{borderRadius:(t.vars||t).shape.borderRadius},"&&&":{paddingRight:32}}),$o=(0,fe.ZP)("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:fe.FO,overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.select,t[n.variant],{[`&.${No.multiple}`]:t.multiple}]}})(Lo),Do=({ownerState:e,theme:t})=>(0,y.Z)({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:(t.vars||t).palette.action.active,[`&.${No.disabled}`]:{color:(t.vars||t).palette.action.disabled}},e.open&&{transform:"rotate(180deg)"},"filled"===e.variant&&{right:7},"outlined"===e.variant&&{right:7}),zo=(0,fe.ZP)("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${(0,dt.Z)(n.variant)}`],n.open&&t.iconOpen]}})(Do);var Fo=e.forwardRef((function(t,n){const{className:r,disabled:o,IconComponent:i,inputRef:a,variant:s="standard"}=t,l=(0,I.Z)(t,Io),u=(0,y.Z)({},t,{disabled:o,variant:s}),c=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:i}=e,a={select:["select",n,r&&"disabled",o&&"multiple"],icon:["icon",`icon${(0,dt.Z)(n)}`,i&&"iconOpen",r&&"disabled"]};return(0,ce.Z)(a,Mo,t)})(u);return(0,xe.jsxs)(e.Fragment,{children:[(0,xe.jsx)($o,(0,y.Z)({ownerState:u,className:(0,re.Z)(c.select,r),disabled:o,ref:a||n},l)),t.multiple?null:(0,xe.jsx)(zo,{as:i,ownerState:u,className:c.icon})]})})),Bo=o(2893);function qo(e){return(0,ye.Z)("MuiSelect",e)}var Wo,Uo=(0,ge.Z)("MuiSelect",["select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput"]);const Vo=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],Ho=(0,fe.ZP)("div",{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`&.${Uo.select}`]:t.select},{[`&.${Uo.select}`]:t[n.variant]},{[`&.${Uo.multiple}`]:t.multiple}]}})(Lo,{[`&.${Uo.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),Ko=(0,fe.ZP)("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${(0,dt.Z)(n.variant)}`],n.open&&t.iconOpen]}})(Do),Go=(0,fe.ZP)("input",{shouldForwardProp:e=>(0,fe.Dz)(e)&&"classes"!==e,name:"MuiSelect",slot:"NativeInput",overridesResolver:(e,t)=>t.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function Qo(e,t){return"object"==typeof t&&null!==t?e===t:String(e)===String(t)}function Yo(e){return null==e||"string"==typeof e&&!e.trim()}var Xo,Jo,ei=e.forwardRef((function(t,n){const{"aria-describedby":r,"aria-label":o,autoFocus:i,autoWidth:a,children:s,className:l,defaultOpen:u,defaultValue:c,disabled:f,displayEmpty:d,IconComponent:p,inputRef:h,labelId:m,MenuProps:v={},multiple:g,name:b,onBlur:w,onChange:_,onClose:x,onFocus:k,onOpen:S,open:E,readOnly:P,renderValue:O,SelectDisplayProps:C={},tabIndex:j,value:T,variant:R="standard"}=t,A=(0,I.Z)(t,Vo),[Z,M]=(0,Bo.Z)({controlled:T,default:c,name:"Select"}),[N,L]=(0,Bo.Z)({controlled:E,default:u,name:"Select"}),$=e.useRef(null),D=e.useRef(null),[z,F]=e.useState(null),{current:B}=e.useRef(null!=E),[q,W]=e.useState(),U=(0,Re.Z)(n,h),V=e.useCallback((e=>{D.current=e,e&&F(e)}),[]),H=null==z?void 0:z.parentNode;e.useImperativeHandle(U,(()=>({focus:()=>{D.current.focus()},node:$.current,value:Z})),[Z]),e.useEffect((()=>{u&&N&&z&&!B&&(W(a?null:H.clientWidth),D.current.focus())}),[z,a]),e.useEffect((()=>{i&&D.current.focus()}),[i]),e.useEffect((()=>{if(!m)return;const e=(0,Xn.Z)(D.current).getElementById(m);if(e){const t=()=>{getSelection().isCollapsed&&D.current.focus()};return e.addEventListener("click",t),()=>{e.removeEventListener("click",t)}}}),[m]);const K=(e,t)=>{e?S&&S(t):x&&x(t),B||(W(a?null:H.clientWidth),L(e))},G=e.Children.toArray(s),Q=e=>t=>{let n;if(t.currentTarget.hasAttribute("tabindex")){if(g){n=Array.isArray(Z)?Z.slice():[];const t=Z.indexOf(e.props.value);-1===t?n.push(e.props.value):n.splice(t,1)}else n=e.props.value;if(e.props.onClick&&e.props.onClick(t),Z!==n&&(M(n),_)){const r=t.nativeEvent||t,o=new r.constructor(r.type,r);Object.defineProperty(o,"target",{writable:!0,value:{value:n,name:b}}),_(o,e)}g||K(!1,t)}},Y=null!==z&&N;let X,J;delete A["aria-invalid"];const ee=[];let te=!1,ne=!1;(Ht({value:Z})||d)&&(O?X=O(Z):te=!0);const oe=G.map((t=>{if(!e.isValidElement(t))return null;let n;if(g){if(!Array.isArray(Z))throw new Error((0,jt.Z)(2));n=Z.some((e=>Qo(e,t.props.value))),n&&te&&ee.push(t.props.children)}else n=Qo(Z,t.props.value),n&&te&&(J=t.props.children);return n&&(ne=!0),e.cloneElement(t,{"aria-selected":n?"true":"false",onClick:Q(t),onKeyUp:e=>{" "===e.key&&e.preventDefault(),t.props.onKeyUp&&t.props.onKeyUp(e)},role:"option",selected:n,value:void 0,"data-value":t.props.value})}));te&&(X=g?0===ee.length?null:ee.reduce(((e,t,n)=>(e.push(t),n<ee.length-1&&e.push(", "),e)),[]):J);let ie,ae=q;!a&&B&&z&&(ae=H.clientWidth),ie=void 0!==j?j:f?null:0;const se=C.id||(b?`mui-component-select-${b}`:void 0),le=(0,y.Z)({},t,{variant:R,value:Z,open:Y}),ue=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:i}=e,a={select:["select",n,r&&"disabled",o&&"multiple"],icon:["icon",`icon${(0,dt.Z)(n)}`,i&&"iconOpen",r&&"disabled"],nativeInput:["nativeInput"]};return(0,ce.Z)(a,qo,t)})(le);return(0,xe.jsxs)(e.Fragment,{children:[(0,xe.jsx)(Ho,(0,y.Z)({ref:V,tabIndex:ie,role:"button","aria-disabled":f?"true":void 0,"aria-expanded":Y?"true":"false","aria-haspopup":"listbox","aria-label":o,"aria-labelledby":[m,se].filter(Boolean).join(" ")||void 0,"aria-describedby":r,onKeyDown:e=>{P||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),K(!0,e))},onMouseDown:f||P?null:e=>{0===e.button&&(e.preventDefault(),D.current.focus(),K(!0,e))},onBlur:e=>{!Y&&w&&(Object.defineProperty(e,"target",{writable:!0,value:{value:Z,name:b}}),w(e))},onFocus:k},C,{ownerState:le,className:(0,re.Z)(C.className,ue.select,l),id:se,children:Yo(X)?Wo||(Wo=(0,xe.jsx)("span",{className:"notranslate",children:"​"})):X})),(0,xe.jsx)(Go,(0,y.Z)({value:Array.isArray(Z)?Z.join(","):Z,name:b,ref:$,"aria-hidden":!0,onChange:e=>{const t=G.map((e=>e.props.value)).indexOf(e.target.value);if(-1===t)return;const n=G[t];M(n.props.value),_&&_(e,n)},tabIndex:-1,disabled:f,className:ue.nativeInput,autoFocus:i,ownerState:le},A)),(0,xe.jsx)(Ko,{as:p,className:ue.icon,ownerState:le}),(0,xe.jsx)(Zo,(0,y.Z)({id:`menu-${b||""}`,anchorEl:H,open:Y,onClose:e=>{K(!1,e)},anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},v,{MenuListProps:(0,y.Z)({"aria-labelledby":m,role:"listbox",disableListWrap:!0},v.MenuListProps),PaperProps:(0,y.Z)({},v.PaperProps,{style:(0,y.Z)({minWidth:ae},null!=v.PaperProps?v.PaperProps.style:null)}),children:oe}))]})})),ti=(0,o(5949).Z)((0,xe.jsx)("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown");const ni=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],ri={name:"MuiSelect",overridesResolver:(e,t)=>t.root,shouldForwardProp:e=>(0,fe.FO)(e)&&"variant"!==e,slot:"Root"},oi=(0,fe.ZP)(fn,ri)(""),ii=(0,fe.ZP)(Tn,ri)(""),ai=(0,fe.ZP)(bn,ri)(""),si=e.forwardRef((function(t,n){const r=(0,de.Z)({name:"MuiSelect",props:t}),{autoWidth:o=!1,children:i,classes:a={},className:s,defaultOpen:l=!1,displayEmpty:u=!1,IconComponent:c=ti,id:f,input:d,inputProps:p,label:h,labelId:m,MenuProps:v,multiple:g=!1,native:b=!1,onClose:w,onOpen:_,open:x,renderValue:k,SelectDisplayProps:S,variant:E="outlined"}=r,P=(0,I.Z)(r,ni),O=b?Fo:ei,C=zt({props:r,muiFormControl:Bt(),states:["variant"]}).variant||E,j=d||{standard:Xo||(Xo=(0,xe.jsx)(oi,{})),outlined:(0,xe.jsx)(ii,{label:h}),filled:Jo||(Jo=(0,xe.jsx)(ai,{}))}[C],T=(e=>{const{classes:t}=e;return t})((0,y.Z)({},r,{variant:C,classes:a})),R=(0,Re.Z)(n,j.ref);return(0,xe.jsx)(e.Fragment,{children:e.cloneElement(j,(0,y.Z)({inputComponent:O,inputProps:(0,y.Z)({children:i,IconComponent:c,variant:C,type:void 0,multiple:g},b?{id:f}:{autoWidth:o,defaultOpen:l,displayEmpty:u,labelId:m,MenuProps:v,onClose:w,onOpen:_,open:x,renderValue:k,SelectDisplayProps:(0,y.Z)({id:f},S)},p,{classes:p?(0,ie.Z)(T,p.classes):T},d?d.props.inputProps:{})},g&&b&&"outlined"===C?{notched:!0}:{},{ref:R,className:(0,re.Z)(j.props.className,s)},!d&&{variant:C},P))})}));si.muiName="Select";var li=si;function ui(e){return(0,ye.Z)("MuiTextField",e)}(0,ge.Z)("MuiTextField",["root"]);const ci=["autoComplete","autoFocus","children","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","id","InputLabelProps","inputProps","InputProps","inputRef","label","maxRows","minRows","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","select","SelectProps","type","value","variant"],fi={standard:fn,filled:bn,outlined:Tn},di=(0,fe.ZP)(Un,{name:"MuiTextField",slot:"Root",overridesResolver:(e,t)=>t.root})({});var pi,hi=e.forwardRef((function(e,t){const n=(0,de.Z)({props:e,name:"MuiTextField"}),{autoComplete:r,autoFocus:o=!1,children:i,className:a,color:s="primary",defaultValue:l,disabled:u=!1,error:c=!1,FormHelperTextProps:f,fullWidth:d=!1,helperText:p,id:h,InputLabelProps:m,inputProps:v,InputProps:g,inputRef:b,label:w,maxRows:_,minRows:x,multiline:k=!1,name:S,onBlur:E,onChange:P,onFocus:O,placeholder:C,required:j=!1,rows:T,select:R=!1,SelectProps:A,type:Z,value:M,variant:N="outlined"}=n,L=(0,I.Z)(n,ci),$=(0,y.Z)({},n,{autoFocus:o,color:s,disabled:u,error:c,fullWidth:d,multiline:k,required:j,select:R,variant:N}),D=(e=>{const{classes:t}=e;return(0,ce.Z)({root:["root"]},ui,t)})($),z={};"outlined"===N&&(m&&void 0!==m.shrink&&(z.notched=m.shrink),z.label=w),R&&(A&&A.native||(z.id=void 0),z["aria-describedby"]=void 0);const F=(0,Ct.Z)(h),B=p&&F?`${F}-helper-text`:void 0,q=w&&F?`${F}-label`:void 0,W=fi[N],U=(0,xe.jsx)(W,(0,y.Z)({"aria-describedby":B,autoComplete:r,autoFocus:o,defaultValue:l,fullWidth:d,multiline:k,name:S,rows:T,maxRows:_,minRows:x,type:Z,value:M,id:F,inputRef:b,onBlur:E,onChange:P,onFocus:O,placeholder:C,inputProps:v},z,g));return(0,xe.jsxs)(di,(0,y.Z)({className:(0,re.Z)(D.root,a),disabled:u,error:c,fullWidth:d,ref:t,required:j,color:s,variant:N,ownerState:$},L,{children:[null!=w&&""!==w&&(0,xe.jsx)(zn,(0,y.Z)({htmlFor:F,id:q},m,{children:w})),R?(0,xe.jsx)(li,(0,y.Z)({"aria-describedby":B,id:F,labelId:q,value:M,input:U},A,{children:i})):U,p&&(0,xe.jsx)(Yn,(0,y.Z)({id:B},f,{children:p}))]}))})),mi=o(2982),vi=o.n(mi),gi=o(8322),yi=o.n(gi),bi=new Uint8Array(16);function wi(){if(!pi&&!(pi="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return pi(bi)}for(var _i=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,xi=function(e){return"string"==typeof e&&_i.test(e)},ki=[],Si=0;Si<256;++Si)ki.push((Si+256).toString(16).substr(1));var Ei,Pi,Oi=function(e,t,n){var r=(e=e||{}).random||(e.rng||wi)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var o=0;o<16;++o)t[n+o]=r[o];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(ki[e[t+0]]+ki[e[t+1]]+ki[e[t+2]]+ki[e[t+3]]+"-"+ki[e[t+4]]+ki[e[t+5]]+"-"+ki[e[t+6]]+ki[e[t+7]]+"-"+ki[e[t+8]]+ki[e[t+9]]+"-"+ki[e[t+10]]+ki[e[t+11]]+ki[e[t+12]]+ki[e[t+13]]+ki[e[t+14]]+ki[e[t+15]]).toLowerCase();if(!xi(n))throw TypeError("Stringified UUID is invalid");return n}(r)},Ci=o(3684),ji=o(7187),Ti=o.n(ji);function Ri(e){return"$"+e}function Ai(e){return e.substring(1)}function Zi(){this._store={}}function Mi(e){if(this._store=new Zi,e&&Array.isArray(e))for(var t=0,n=e.length;t<n;t++)this.add(e[t])}Zi.prototype.get=function(e){var t=Ri(e);return this._store[t]},Zi.prototype.set=function(e,t){var n=Ri(e);return this._store[n]=t,!0},Zi.prototype.has=function(e){return Ri(e)in this._store},Zi.prototype.keys=function(){return Object.keys(this._store).map((e=>Ai(e)))},Zi.prototype.delete=function(e){var t=Ri(e),n=t in this._store;return delete this._store[t],n},Zi.prototype.forEach=function(e){for(var t=Object.keys(this._store),n=0,r=t.length;n<r;n++){var o=t[n];e(this._store[o],o=Ai(o))}},Object.defineProperty(Zi.prototype,"size",{get:function(){return Object.keys(this._store).length}}),Mi.prototype.add=function(e){return this._store.set(e,!0)},Mi.prototype.has=function(e){return this._store.has(e)},Mi.prototype.forEach=function(e){this._store.forEach((function(t,n){e(n)}))},Object.defineProperty(Mi.prototype,"size",{get:function(){return this._store.size}}),function(){if("undefined"==typeof Symbol||"undefined"==typeof Map||"undefined"==typeof Set)return!1;var e=Object.getOwnPropertyDescriptor(Map,Symbol.species);return e&&"get"in e&&Map[Symbol.species]===Map}()?(Ei=Set,Pi=Map):(Ei=Mi,Pi=Zi);var Ni=Function.prototype.toString,Ii=Ni.call(Object);function Li(e){var t,n,r;if(!e||"object"!=typeof e)return e;if(Array.isArray(e)){for(t=[],n=0,r=e.length;n<r;n++)t[n]=Li(e[n]);return t}if(e instanceof Date&&isFinite(e))return e.toISOString();if(function(e){return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer||"undefined"!=typeof Blob&&e instanceof Blob}(e))return function(e){if(e instanceof ArrayBuffer)return function(e){if("function"==typeof e.slice)return e.slice(0);var t=new ArrayBuffer(e.byteLength),n=new Uint8Array(t),r=new Uint8Array(e);return n.set(r),t}(e);var t=e.size,n=e.type;return"function"==typeof e.slice?e.slice(0,t,n):e.webkitSlice(0,t,n)}(e);if(!function(e){var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=t.constructor;return"function"==typeof n&&n instanceof n&&Ni.call(n)==Ii}(e))return e;for(n in t={},e)if(Object.prototype.hasOwnProperty.call(e,n)){var o=Li(e[n]);void 0!==o&&(t[n]=o)}return t}function $i(e){var t=!1;return function(...n){if(t)throw new Error("once called more than once");t=!0,e.apply(this,n)}}function Di(e){return function(...t){t=Li(t);var n=this,r="function"==typeof t[t.length-1]&&t.pop(),o=new Promise((function(r,o){var i;try{var a=$i((function(e,t){e?o(e):r(t)}));t.push(a),(i=e.apply(n,t))&&"function"==typeof i.then&&r(i)}catch(e){o(e)}}));return r&&o.then((function(e){r(null,e)}),r),o}}function zi(e,t){return Di((function(...n){if(this._closed)return Promise.reject(new Error("database is closed"));if(this._destroyed)return Promise.reject(new Error("database is destroyed"));var r=this;return function(e,t,n){if(e.constructor.listeners("debug").length){for(var r=["api",e.name,t],o=0;o<n.length-1;o++)r.push(n[o]);e.constructor.emit("debug",r);var i=n[n.length-1];n[n.length-1]=function(n,r){var o=["api",e.name,t];o=o.concat(n?["error",n]:["success",r]),e.constructor.emit("debug",o),i(n,r)}}}(r,e,n),this.taskqueue.isReady?t.apply(this,n):new Promise((function(t,o){r.taskqueue.addTask((function(i){i?o(i):t(r[e].apply(r,n))}))}))}))}function Fi(e,t){for(var n={},r=0,o=t.length;r<o;r++){var i=t[r];i in e&&(n[i]=e[i])}return n}var Bi,qi,Wi=6;function Ui(e){return e}function Vi(e){return[{ok:e}]}function Hi(e,t,n){var r=t.docs,o=new Pi;r.forEach((function(e){o.has(e.id)?o.get(e.id).push(e):o.set(e.id,[e])}));var i=o.size,a=0,s=new Array(i);var l=[];o.forEach((function(e,t){l.push(t)}));var u=0;!function r(){if(!(u>=l.length)){var c=Math.min(u+Wi,l.length),f=l.slice(u,c);!function(l,u){l.forEach((function(l,c){var f=u+c,d=o.get(l),p=Fi(d[0],["atts_since","attachments"]);p.open_revs=d.map((function(e){return e.rev})),p.open_revs=p.open_revs.filter(Ui);var h=Ui;0===p.open_revs.length&&(delete p.open_revs,h=Vi),["revs","attachments","binary","ajax","latest"].forEach((function(e){e in t&&(p[e]=t[e])})),e.get(l,p,(function(e,t){var o,u,c,d;o=e?[{error:e}]:h(t),u=l,c=o,s[f]={id:u,docs:c},++a===i&&(d=[],s.forEach((function(e){e.docs.forEach((function(t){d.push({id:e.id,docs:[t]})}))})),n(null,{results:d})),r()}))}))}(f,u),u+=f.length}}()}try{localStorage.setItem("_pouch_check_localstorage",1),Bi=!!localStorage.getItem("_pouch_check_localstorage")}catch(e){Bi=!1}function Ki(){return Bi}class Gi extends(Ti()){constructor(){super(),this._listeners={},Ki()&&addEventListener("storage",(e=>{this.emit(e.key)}))}addListener(e,t,n,r){if(!this._listeners[t]){var o=!1,i=this;this._listeners[t]=a,this.on(e,a)}function a(){if(i._listeners[t])if(o)o="waiting";else{o=!0;var e=Fi(r,["style","include_docs","attachments","conflicts","filter","doc_ids","view","since","query_params","binary","return_docs"]);n.changes(e).on("change",(function(e){e.seq>r.since&&!r.cancelled&&(r.since=e.seq,r.onChange(e))})).on("complete",(function(){"waiting"===o&&vi()(a),o=!1})).on("error",(function(){o=!1}))}}}removeListener(e,t){t in this._listeners&&(super.removeListener(e,this._listeners[t]),delete this._listeners[t])}notifyLocalWindows(e){Ki()&&(localStorage[e]="a"===localStorage[e]?"b":"a")}notify(e){this.emit(e),this.notifyLocalWindows(e)}}function Qi(e){if("undefined"!=typeof console&&"function"==typeof console[e]){var t=Array.prototype.slice.call(arguments,1);console[e].apply(console,t)}}function Yi(e){var t=0;return e||(t=2e3),function(e,t){var n=6e5;return e=parseInt(e,10)||0,(t=parseInt(t,10))!=t||t<=e?t=(e||1)<<1:t+=1,t>n&&(e=3e5,t=n),~~((t-e)*Math.random()+e)}(e,t)}function Xi(e,t){Qi("info","The above "+e+" is totally normal. "+t)}qi="function"==typeof Object.assign?Object.assign:function(e){for(var t=Object(e),n=1;n<arguments.length;n++){var r=arguments[n];if(null!=r)for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(t[o]=r[o])}return t};var Ji=qi;class ea extends Error{constructor(e,t,n){super(),this.status=e,this.name=t,this.message=n,this.error=!0}toString(){return JSON.stringify({status:this.status,name:this.name,message:this.message,reason:this.reason})}}new ea(401,"unauthorized","Name or password is incorrect.");var ta=new ea(400,"bad_request","Missing JSON list of 'docs'"),na=new ea(404,"not_found","missing"),ra=new ea(409,"conflict","Document update conflict"),oa=new ea(400,"bad_request","_id field must contain a string"),ia=new ea(412,"missing_id","_id is required for puts"),aa=new ea(400,"bad_request","Only reserved document ids may start with underscore."),sa=(new ea(412,"precondition_failed","Database not open"),new ea(500,"unknown_error","Database encountered an unknown error")),la=new ea(500,"badarg","Some query argument is invalid"),ua=(new ea(400,"invalid_request","Request was invalid"),new ea(400,"query_parse_error","Some query parameter is invalid")),ca=new ea(500,"doc_validation","Bad special document member"),fa=new ea(400,"bad_request","Something wrong with the request"),da=new ea(400,"bad_request","Document must be a JSON object"),pa=(new ea(404,"not_found","Database not found"),new ea(500,"indexed_db_went_bad","unknown")),ha=(new ea(500,"web_sql_went_bad","unknown"),new ea(500,"levelDB_went_went_bad","unknown"),new ea(403,"forbidden","Forbidden by design doc validate_doc_update function"),new ea(400,"bad_request","Invalid rev format")),ma=(new ea(412,"file_exists","The database could not be created, the file already exists."),new ea(412,"missing_stub","A pre-existing attachment stub wasn't found"));function va(e,t){function n(t){for(var n=Object.getOwnPropertyNames(e),r=0,o=n.length;r<o;r++)"function"!=typeof e[n[r]]&&(this[n[r]]=e[n[r]]);void 0===this.stack&&(this.stack=(new Error).stack),void 0!==t&&(this.reason=t)}return n.prototype=ea.prototype,new n(t)}function ga(e){if("object"!=typeof e){var t=e;(e=sa).data=t}return"error"in e&&"conflict"===e.error&&(e.name="conflict",e.status=409),"name"in e||(e.name=e.error||"unknown"),"status"in e||(e.status=500),"message"in e||(e.message=e.message||e.reason),"stack"in e||(e.stack=(new Error).stack),e}function ya(e){var t={},n=e.filter&&"function"==typeof e.filter;return t.query=e.query_params,function(r){r.doc||(r.doc={});var o=n&&function(e,t,n){try{return!e(t,n)}catch(e){var r="Filter function threw: "+e.toString();return va(fa,r)}}(e.filter,r.doc,t);if("object"==typeof o)return o;if(o)return!1;if(e.include_docs){if(!e.attachments)for(var i in r.doc._attachments)Object.prototype.hasOwnProperty.call(r.doc._attachments,i)&&(r.doc._attachments[i].stub=!0)}else delete r.doc;return!0}}function ba(e){for(var t=[],n=0,r=e.length;n<r;n++)t=t.concat(e[n]);return t}function wa(e){var t;if(e?"string"!=typeof e?t=va(oa):/^_/.test(e)&&!/^_(design|local)/.test(e)&&(t=va(aa)):t=va(ia),t)throw t}function _a(e){return"boolean"==typeof e._remote?e._remote:"function"==typeof e.type&&(Qi("warn","db.type() is deprecated and will be removed in a future version of PouchDB"),"http"===e.type())}function xa(e){if(!e)return null;var t=e.split("/");return 2===t.length?t:1===t.length?[e,e]:null}function ka(e){var t=xa(e);return t?t.join("/"):null}new ea(413,"invalid_url","Provided URL is invalid");var Sa=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],Ea="queryKey",Pa=/(?:^|&)([^&=]*)=?([^&]*)/g,Oa=/^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;function Ca(e){for(var t=Oa.exec(e),n={},r=14;r--;){var o=Sa[r],i=t[r]||"",a=-1!==["user","password"].indexOf(o);n[o]=a?decodeURIComponent(i):i}return n[Ea]={},n[Sa[12]].replace(Pa,(function(e,t,r){t&&(n[Ea][t]=r)})),n}function ja(e,t){var n=[],r=[];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n.push(o),r.push(t[o]));return n.push(e),Function.apply(null,n).apply(null,r)}function Ta(e,t,n){return e.get(t).catch((function(e){if(404!==e.status)throw e;return{}})).then((function(r){var o=r._rev,i=n(r);return i?(i._id=t,i._rev=o,function(e,t,n){return e.put(t).then((function(e){return{updated:!0,rev:e.rev}}),(function(r){if(409!==r.status)throw r;return Ta(e,t._id,n)}))}(e,i,n)):{updated:!1,rev:o}}))}var Ra=function(e){return atob(e)},Aa=function(e){return btoa(e)};function Za(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(o){if("TypeError"!==o.name)throw o;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),r=0;r<e.length;r+=1)n.append(e[r]);return n.getBlob(t.type)}}function Ma(e){for(var t=e.length,n=new ArrayBuffer(t),r=new Uint8Array(n),o=0;o<t;o++)r[o]=e.charCodeAt(o);return n}function Na(e,t){return Za([Ma(e)],{type:t})}function Ia(e,t){return Na(Ra(e),t)}function La(e,t){var n=new FileReader,r="function"==typeof n.readAsBinaryString;n.onloadend=function(e){var n=e.target.result||"";if(r)return t(n);t(function(e){for(var t="",n=new Uint8Array(e),r=n.byteLength,o=0;o<r;o++)t+=String.fromCharCode(n[o]);return t}(n))},r?n.readAsBinaryString(e):n.readAsArrayBuffer(e)}function $a(e,t){La(e,(function(e){t(e)}))}function Da(e,t){$a(e,(function(e){t(Aa(e))}))}var za=self.setImmediate||self.setTimeout,Fa=32768;function Ba(e,t,n,r,o){(n>0||r<t.size)&&(t=function(e,t,n){return e.webkitSlice?e.webkitSlice(t,n):e.slice(t,n)}(t,n,r)),function(e,t){var n=new FileReader;n.onloadend=function(e){var n=e.target.result||new ArrayBuffer(0);t(n)},n.readAsArrayBuffer(e)}(t,(function(t){e.append(t),o()}))}function qa(e,t,n,r,o){(n>0||r<t.length)&&(t=t.substring(n,r)),e.appendBinary(t),o()}function Wa(e,t){var n="string"==typeof e,r=n?e.length:e.size,o=Math.min(Fa,r),i=Math.ceil(r/o),a=0,s=n?new(yi()):new(yi().ArrayBuffer),l=n?qa:Ba;function u(){za(f)}function c(){var e,n=(e=s.end(!0),Aa(e));t(n),s.destroy()}function f(){var t=a*o;a++,l(s,e,t,t+o,a<i?u:c)}f()}function Ua(e){return yi().hash(e)}function Va(e,t){if(!t)return Oi().replace(/-/g,"").toLowerCase();var n=Ji({},e);return delete n._rev_tree,Ua(JSON.stringify(n))}var Ha=Oi;function Ka(e){for(var t,n,r,o,i=e.rev_tree.slice();o=i.pop();){var a=o.ids,s=a[2],l=o.pos;if(s.length)for(var u=0,c=s.length;u<c;u++)i.push({pos:l+1,ids:s[u]});else{var f=!!a[1].deleted,d=a[0];t&&!(r!==f?r:n!==l?n<l:t<d)||(t=d,n=l,r=f)}}return n+"-"+t}function Ga(e,t){for(var n,r=e.slice();n=r.pop();)for(var o=n.pos,i=n.ids,a=i[2],s=t(0===a.length,o,i[0],n.ctx,i[1]),l=0,u=a.length;l<u;l++)r.push({pos:o+1,ids:a[l],ctx:s})}function Qa(e,t){return e.pos-t.pos}function Ya(e){var t=[];Ga(e,(function(e,n,r,o,i){e&&t.push({rev:n+"-"+r,pos:n,opts:i})})),t.sort(Qa).reverse();for(var n=0,r=t.length;n<r;n++)delete t[n].pos;return t}function Xa(e){for(var t=Ka(e),n=Ya(e.rev_tree),r=[],o=0,i=n.length;o<i;o++){var a=n[o];a.rev===t||a.opts.deleted||r.push(a.rev)}return r}function Ja(e){for(var t,n=[],r=e.slice();t=r.pop();){var o=t.pos,i=t.ids,a=i[0],s=i[1],l=i[2],u=0===l.length,c=t.history?t.history.slice():[];c.push({id:a,opts:s}),u&&n.push({pos:o+1-c.length,ids:c});for(var f=0,d=l.length;f<d;f++)r.push({pos:o+1,ids:l[f],history:c})}return n.reverse()}function es(e,t){return e.pos-t.pos}function ts(e,t,n){var r=function(e,t,n){for(var r,o=0,i=e.length;o<i;)n(e[r=o+i>>>1],t)<0?o=r+1:i=r;return o}(e,t,n);e.splice(r,0,t)}function ns(e,t){for(var n,r,o=t,i=e.length;o<i;o++){var a=e[o],s=[a.id,a.opts,[]];r?(r[2].push(s),r=s):n=r=s}return n}function rs(e,t){return e[0]<t[0]?-1:1}function os(e,t){for(var n=[{tree1:e,tree2:t}],r=!1;n.length>0;){var o=n.pop(),i=o.tree1,a=o.tree2;(i[1].status||a[1].status)&&(i[1].status="available"===i[1].status||"available"===a[1].status?"available":"missing");for(var s=0;s<a[2].length;s++)if(i[2][0]){for(var l=!1,u=0;u<i[2].length;u++)i[2][u][0]===a[2][s][0]&&(n.push({tree1:i[2][u],tree2:a[2][s]}),l=!0);l||(r="new_branch",ts(i[2],a[2][s],rs))}else r="new_leaf",i[2][0]=a[2][s]}return{conflicts:r,tree:e}}function is(e,t,n){var r,o=[],i=!1,a=!1;if(!e.length)return{tree:[t],conflicts:"new_leaf"};for(var s=0,l=e.length;s<l;s++){var u=e[s];if(u.pos===t.pos&&u.ids[0]===t.ids[0])r=os(u.ids,t.ids),o.push({pos:u.pos,ids:r.tree}),i=i||r.conflicts,a=!0;else if(!0!==n){var c=u.pos<t.pos?u:t,f=u.pos<t.pos?t:u,d=f.pos-c.pos,p=[],h=[];for(h.push({ids:c.ids,diff:d,parent:null,parentIdx:null});h.length>0;){var m=h.pop();if(0!==m.diff)for(var v=m.ids[2],g=0,y=v.length;g<y;g++)h.push({ids:v[g],diff:m.diff-1,parent:m.ids,parentIdx:g});else m.ids[0]===f.ids[0]&&p.push(m)}var b=p[0];b?(r=os(b.ids,f.ids),b.parent[2][b.parentIdx]=r.tree,o.push({pos:c.pos,ids:c.ids}),i=i||r.conflicts,a=!0):o.push(u)}else o.push(u)}return a||o.push(t),o.sort(es),{tree:o,conflicts:i||"internal_node"}}function as(e,t,n){var r=is(e,t),o=function(e,t){for(var n,r,o=Ja(e),i=0,a=o.length;i<a;i++){var s,l=o[i],u=l.ids;if(u.length>t){n||(n={});var c=u.length-t;s={pos:l.pos+c,ids:ns(u,c)};for(var f=0;f<c;f++){var d=l.pos+f+"-"+u[f].id;n[d]=!0}}else s={pos:l.pos,ids:ns(u,0)};r=r?is(r,s,!0).tree:[s]}return n&&Ga(r,(function(e,t,r){delete n[t+"-"+r]})),{tree:r,revs:n?Object.keys(n):[]}}(r.tree,n);return{tree:o.tree,stemmedRevs:o.revs,conflicts:r.conflicts}}function ss(e){return e.ids}function ls(e,t){t||(t=Ka(e));for(var n,r=t.substring(t.indexOf("-")+1),o=e.rev_tree.map(ss);n=o.pop();){if(n[0]===r)return!!n[1].deleted;o=o.concat(n[2])}}function us(e){return/^_local/.test(e)}function cs(e,t,n){var r=[{rev:e._rev}];"all_docs"===n.style&&(r=Ya(t.rev_tree).map((function(e){return{rev:e.rev}})));var o={id:t.id,changes:r,doc:e};return ls(t,e._rev)&&(o.deleted=!0),n.conflicts&&(o.doc._conflicts=Xa(t),o.doc._conflicts.length||delete o.doc._conflicts),o}class fs extends(Ti()){constructor(e,t,n){super(),this.db=e;var r=(t=t?Li(t):{}).complete=$i(((t,n)=>{var r;t?(r="error",("listenerCount"in this?this.listenerCount(r):Ti().listenerCount(this,r))>0&&this.emit("error",t)):this.emit("complete",n),this.removeAllListeners(),e.removeListener("destroyed",o)}));n&&(this.on("complete",(function(e){n(null,e)})),this.on("error",n));const o=()=>{this.cancel()};e.once("destroyed",o),t.onChange=(e,t,n)=>{this.isCancelled||function(e,t,n,r){try{e.emit("change",t,n,r)}catch(e){Qi("error",'Error in .on("change", function):',e)}}(this,e,t,n)};var i=new Promise((function(e,n){t.complete=function(t,r){t?n(t):e(r)}}));this.once("cancel",(function(){e.removeListener("destroyed",o),t.complete(null,{status:"cancelled"})})),this.then=i.then.bind(i),this.catch=i.catch.bind(i),this.then((function(e){r(null,e)}),r),e.taskqueue.isReady?this.validateChanges(t):e.taskqueue.addTask((e=>{e?t.complete(e):this.isCancelled?this.emit("cancel"):this.validateChanges(t)}))}cancel(){this.isCancelled=!0,this.db.taskqueue.isReady&&this.emit("cancel")}validateChanges(e){var t=e.complete;_s._changesFilterPlugin?_s._changesFilterPlugin.validate(e,(n=>{if(n)return t(n);this.doChanges(e)})):this.doChanges(e)}doChanges(e){var t=e.complete;if("live"in(e=Li(e))&&!("continuous"in e)&&(e.continuous=e.live),e.processChange=cs,"latest"===e.since&&(e.since="now"),e.since||(e.since=0),"now"!==e.since){if(_s._changesFilterPlugin){if(_s._changesFilterPlugin.normalize(e),_s._changesFilterPlugin.shouldFilter(this,e))return _s._changesFilterPlugin.filter(this,e)}else["doc_ids","filter","selector","view"].forEach((function(t){t in e&&Qi("warn",'The "'+t+'" option was passed in to changes/replicate, but pouchdb-changes-filter plugin is not installed, so it was ignored. Please install the plugin to enable filtering.')}));"descending"in e||(e.descending=!1),e.limit=0===e.limit?1:e.limit,e.complete=t;var n=this.db._changes(e);if(n&&"function"==typeof n.cancel){const e=this.cancel;this.cancel=(...t)=>{n.cancel(),e.apply(this,t)}}}else this.db.info().then((n=>{this.isCancelled?t(null,{status:"cancelled"}):(e.since=n.update_seq,this.doChanges(e))}),t)}}function ds(e,t){return e<t?-1:e>t?1:0}function ps(e,t){return function(n,r){n||r[0]&&r[0].error?((n=n||r[0]).docId=t,e(n)):e(null,r.length?r[0]:r)}}function hs(e,t){var n=ds(e._id,t._id);return 0!==n?n:ds(e._revisions?e._revisions.start:0,t._revisions?t._revisions.start:0)}function ms(e){var t=e._compactionQueue[0],n=t.opts,r=t.callback;e.get("_local/compaction").catch((function(){return!1})).then((function(t){t&&t.last_seq&&(n.last_seq=t.last_seq),e._compact(n,(function(t,n){t?r(t):r(null,n),vi()((function(){e._compactionQueue.shift(),e._compactionQueue.length&&ms(e)}))}))}))}function vs(e,t,n){return e.get("_local/purges").then((function(e){const r=e.purgeSeq+1;return e.purges.push({docId:t,rev:n,purgeSeq:r}),e.purges.length>self.purged_infos_limit&&e.purges.splice(0,e.purges.length-self.purged_infos_limit),e.purgeSeq=r,e})).catch((function(e){if(404!==e.status)throw e;return{_id:"_local/purges",purges:[{docId:t,rev:n,purgeSeq:0}],purgeSeq:0}})).then((function(t){return e.put(t)}))}class gs extends(Ti()){_setup(){this.post=zi("post",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"object"!=typeof e||Array.isArray(e))return n(va(da));this.bulkDocs({docs:[e]},t,ps(n,e._id))})).bind(this),this.put=zi("put",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"object"!=typeof e||Array.isArray(e))return n(va(da));if(wa(e._id),us(e._id)&&"function"==typeof this._putLocal)return e._deleted?this._removeLocal(e,n):this._putLocal(e,n);const r=n=>{"function"==typeof this._put&&!1!==t.new_edits?this._put(e,t,n):this.bulkDocs({docs:[e]},t,ps(n,e._id))};var o,i,a,s;t.force&&e._rev?(i=(o=e._rev.split("-"))[1],a=parseInt(o[0],10)+1,s=Va(),e._revisions={start:a,ids:[s,i]},e._rev=a+"-"+s,t.new_edits=!1,r((function(t){var r=t?null:{ok:!0,id:e._id,rev:e._rev};n(t,r)}))):r(n)})).bind(this),this.putAttachment=zi("putAttachment",(function(e,t,n,r,o){var i=this;function a(e){var n="_rev"in e?parseInt(e._rev,10):0;return e._attachments=e._attachments||{},e._attachments[t]={content_type:o,data:r,revpos:++n},i.put(e)}return"function"==typeof o&&(o=r,r=n,n=null),void 0===o&&(o=r,r=n,n=null),o||Qi("warn","Attachment",t,"on document",e,"is missing content_type"),i.get(e).then((function(e){if(e._rev!==n)throw va(ra);return a(e)}),(function(t){if(t.reason===na.message)return a({_id:e});throw t}))})).bind(this),this.removeAttachment=zi("removeAttachment",(function(e,t,n,r){this.get(e,((e,o)=>{if(e)r(e);else if(o._rev===n){if(!o._attachments)return r();delete o._attachments[t],0===Object.keys(o._attachments).length&&delete o._attachments,this.put(o,r)}else r(va(ra))}))})).bind(this),this.remove=zi("remove",(function(e,t,n,r){var o;"string"==typeof t?(o={_id:e,_rev:t},"function"==typeof n&&(r=n,n={})):(o=e,"function"==typeof t?(r=t,n={}):(r=n,n=t)),(n=n||{}).was_delete=!0;var i={_id:o._id,_rev:o._rev||n.rev,_deleted:!0};if(us(i._id)&&"function"==typeof this._removeLocal)return this._removeLocal(o,r);this.bulkDocs({docs:[i]},n,ps(r,i._id))})).bind(this),this.revsDiff=zi("revsDiff",(function(e,t,n){"function"==typeof t&&(n=t,t={});var r=Object.keys(e);if(!r.length)return n(null,{});var o=0,i=new Pi;function a(e,t){i.has(e)||i.set(e,{missing:[]}),i.get(e).missing.push(t)}r.map((function(t){this._getRevisionTree(t,(function(s,l){if(s&&404===s.status&&"missing"===s.message)i.set(t,{missing:e[t]});else{if(s)return n(s);!function(t,n){var r=e[t].slice(0);Ga(n,(function(e,n,o,i,s){var l=n+"-"+o,u=r.indexOf(l);-1!==u&&(r.splice(u,1),"available"!==s.status&&a(t,l))})),r.forEach((function(e){a(t,e)}))}(t,l)}if(++o===r.length){var u={};return i.forEach((function(e,t){u[t]=e})),n(null,u)}}))}),this)})).bind(this),this.bulkGet=zi("bulkGet",(function(e,t){Hi(this,e,t)})).bind(this),this.compactDocument=zi("compactDocument",(function(e,t,n){this._getRevisionTree(e,((r,o)=>{if(r)return n(r);var i=function(e){var t={},n=[];return Ga(e,(function(e,r,o,i){var a=r+"-"+o;return e&&(t[a]=0),void 0!==i&&n.push({from:i,to:a}),a})),n.reverse(),n.forEach((function(e){void 0===t[e.from]?t[e.from]=1+t[e.to]:t[e.from]=Math.min(t[e.from],1+t[e.to])})),t}(o),a=[],s=[];Object.keys(i).forEach((function(e){i[e]>t&&a.push(e)})),Ga(o,(function(e,t,n,r,o){var i=t+"-"+n;"available"===o.status&&-1!==a.indexOf(i)&&s.push(i)})),this._doCompaction(e,s,n)}))})).bind(this),this.compact=zi("compact",(function(e,t){"function"==typeof e&&(t=e,e={}),e=e||{},this._compactionQueue=this._compactionQueue||[],this._compactionQueue.push({opts:e,callback:t}),1===this._compactionQueue.length&&ms(this)})).bind(this),this.get=zi("get",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"string"!=typeof e)return n(va(oa));if(us(e)&&"function"==typeof this._getLocal)return this._getLocal(e,n);var r=[];const o=()=>{var o=[],i=r.length;if(!i)return n(null,o);r.forEach((r=>{this.get(e,{rev:r,revs:t.revs,latest:t.latest,attachments:t.attachments,binary:t.binary},(function(e,t){if(e)o.push({missing:r});else{for(var a,s=0,l=o.length;s<l;s++)if(o[s].ok&&o[s].ok._rev===t._rev){a=!0;break}a||o.push({ok:t})}--i||n(null,o)}))}))};if(!t.open_revs)return this._get(e,t,((r,o)=>{if(r)return r.docId=e,n(r);var i=o.doc,a=o.metadata,s=o.ctx;if(t.conflicts){var l=Xa(a);l.length&&(i._conflicts=l)}if(ls(a,i._rev)&&(i._deleted=!0),t.revs||t.revs_info){for(var u=i._rev.split("-"),c=parseInt(u[0],10),f=u[1],d=Ja(a.rev_tree),p=null,h=0;h<d.length;h++){var m=d[h],v=m.ids.map((function(e){return e.id})).indexOf(f);(v===c-1||!p&&-1!==v)&&(p=m)}if(!p)return(r=new Error("invalid rev tree")).docId=e,n(r);var g=p.ids.map((function(e){return e.id})).indexOf(i._rev.split("-")[1])+1,y=p.ids.length-g;if(p.ids.splice(g,y),p.ids.reverse(),t.revs&&(i._revisions={start:p.pos+p.ids.length-1,ids:p.ids.map((function(e){return e.id}))}),t.revs_info){var b=p.pos+p.ids.length;i._revs_info=p.ids.map((function(e){return{rev:--b+"-"+e.id,status:e.opts.status}}))}}if(t.attachments&&i._attachments){var w=i._attachments,_=Object.keys(w).length;if(0===_)return n(null,i);Object.keys(w).forEach((e=>{this._getAttachment(i._id,e,w[e],{rev:i._rev,binary:t.binary,ctx:s},(function(t,r){var o=i._attachments[e];o.data=r,delete o.stub,delete o.length,--_||n(null,i)}))}))}else{if(i._attachments)for(var x in i._attachments)Object.prototype.hasOwnProperty.call(i._attachments,x)&&(i._attachments[x].stub=!0);n(null,i)}}));if("all"===t.open_revs)this._getRevisionTree(e,(function(e,t){if(e)return n(e);r=Ya(t).map((function(e){return e.rev})),o()}));else{if(!Array.isArray(t.open_revs))return n(va(sa,"function_clause"));r=t.open_revs;for(var i=0;i<r.length;i++){var a=r[i];if("string"!=typeof a||!/^\d+-/.test(a))return n(va(ha))}o()}})).bind(this),this.getAttachment=zi("getAttachment",(function(e,t,n,r){n instanceof Function&&(r=n,n={}),this._get(e,n,((o,i)=>o?r(o):i.doc._attachments&&i.doc._attachments[t]?(n.ctx=i.ctx,n.binary=!0,void this._getAttachment(e,t,i.doc._attachments[t],n,r)):r(va(na))))})).bind(this),this.allDocs=zi("allDocs",(function(e,t){if("function"==typeof e&&(t=e,e={}),e.skip=void 0!==e.skip?e.skip:0,e.start_key&&(e.startkey=e.start_key),e.end_key&&(e.endkey=e.end_key),"keys"in e){if(!Array.isArray(e.keys))return t(new TypeError("options.keys must be an array"));var n=["startkey","endkey","key"].filter((function(t){return t in e}))[0];if(n)return void t(va(ua,"Query parameter `"+n+"` is not compatible with multi-get"));if(!_a(this)&&(function(e){var t="limit"in e?e.keys.slice(e.skip,e.limit+e.skip):e.skip>0?e.keys.slice(e.skip):e.keys;e.keys=t,e.skip=0,delete e.limit,e.descending&&(t.reverse(),e.descending=!1)}(e),0===e.keys.length))return this._allDocs({limit:0},t)}return this._allDocs(e,t)})).bind(this),this.close=zi("close",(function(e){return this._closed=!0,this.emit("closed"),this._close(e)})).bind(this),this.info=zi("info",(function(e){this._info(((t,n)=>{if(t)return e(t);n.db_name=n.db_name||this.name,n.auto_compaction=!(!this.auto_compaction||_a(this)),n.adapter=this.adapter,e(null,n)}))})).bind(this),this.id=zi("id",(function(e){return this._id(e)})).bind(this),this.bulkDocs=zi("bulkDocs",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),t=t||{},Array.isArray(e)&&(e={docs:e}),!e||!e.docs||!Array.isArray(e.docs))return n(va(ta));for(var r=0;r<e.docs.length;++r)if("object"!=typeof e.docs[r]||Array.isArray(e.docs[r]))return n(va(da));var o;if(e.docs.forEach((function(e){e._attachments&&Object.keys(e._attachments).forEach((function(t){o=o||function(e){return"_"===e.charAt(0)&&e+" is not a valid attachment name, attachment names cannot start with '_'"}(t),e._attachments[t].content_type||Qi("warn","Attachment",t,"on document",e._id,"is missing content_type")}))})),o)return n(va(fa,o));"new_edits"in t||(t.new_edits=!("new_edits"in e)||e.new_edits);var i=this;t.new_edits||_a(i)||e.docs.sort(hs),function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n._deleted)delete n._attachments;else if(n._attachments)for(var r=Object.keys(n._attachments),o=0;o<r.length;o++){var i=r[o];n._attachments[i]=Fi(n._attachments[i],["data","digest","content_type","length","revpos","stub"])}}}(e.docs);var a=e.docs.map((function(e){return e._id}));this._bulkDocs(e,t,(function(e,r){if(e)return n(e);if(t.new_edits||(r=r.filter((function(e){return e.error}))),!_a(i))for(var o=0,s=r.length;o<s;o++)r[o].id=r[o].id||a[o];n(null,r)}))})).bind(this),this.registerDependentDatabase=zi("registerDependentDatabase",(function(e,t){var n=Li(this.__opts);this.__opts.view_adapter&&(n.adapter=this.__opts.view_adapter);var r=new this.constructor(e,n);Ta(this,"_local/_pouch_dependentDbs",(function(t){return t.dependentDbs=t.dependentDbs||{},!t.dependentDbs[e]&&(t.dependentDbs[e]=!0,t)})).then((function(){t(null,{db:r})})).catch(t)})).bind(this),this.destroy=zi("destroy",(function(e,t){"function"==typeof e&&(t=e,e={});var n=!("use_prefix"in this)||this.use_prefix;const r=()=>{this._destroy(e,((e,n)=>{if(e)return t(e);this._destroyed=!0,this.emit("destroyed"),t(null,n||{ok:!0})}))};if(_a(this))return r();this.get("_local/_pouch_dependentDbs",((e,o)=>{if(e)return 404!==e.status?t(e):r();var i=o.dependentDbs,a=this.constructor,s=Object.keys(i).map((e=>{var t=n?e.replace(new RegExp("^"+a.prefix),""):e;return new a(t,this.__opts).destroy()}));Promise.all(s).then(r,t)}))})).bind(this)}_compact(e,t){var n,r={return_docs:!1,last_seq:e.last_seq||0},o=[],i=0;const a=e=>{this.activeTasks.update(n,{completed_items:++i}),o.push(this.compactDocument(e.id,0))},s=e=>{this.activeTasks.remove(n,e),t(e)},l=e=>{var r=e.last_seq;Promise.all(o).then((()=>Ta(this,"_local/compaction",(e=>(!e.last_seq||e.last_seq<r)&&(e.last_seq=r,e))))).then((()=>{this.activeTasks.remove(n),t(null,{ok:!0})})).catch(s)};this.info().then((e=>{n=this.activeTasks.add({name:"database_compaction",total_items:e.update_seq-r.last_seq}),this.changes(r).on("change",a).on("complete",l).on("error",s)}))}changes(e,t){return"function"==typeof e&&(t=e,e={}),(e=e||{}).return_docs="return_docs"in e?e.return_docs:!e.live,new fs(this,e,t)}type(){return"function"==typeof this._type?this._type():this.adapter}}gs.prototype.purge=zi("_purge",(function(e,t,n){if(void 0===this._purge)return n(va(sa,"Purge is not implemented in the "+this.adapter+" adapter."));var r=this;r._getRevisionTree(e,((o,i)=>{if(o)return n(o);if(!i)return n(va(na));let a;try{a=function(e,t){let n=[];const r=e.slice();let o;for(;o=r.pop();){const{pos:e,ids:i}=o,a=`${e}-${i[0]}`,s=i[2];if(n.push(a),a===t){if(0!==s.length)throw new Error("The requested revision is not a leaf");return n.reverse()}(0===s.length||s.length>1)&&(n=[]);for(let t=0,n=s.length;t<n;t++)r.push({pos:e+1,ids:s[t]})}if(0===n.length)throw new Error("The requested revision does not exist");return n.reverse()}(i,t)}catch(o){return n(o.message||o)}r._purge(e,a,((o,i)=>{if(o)return n(o);vs(r,e,t).then((function(){return n(null,i)}))}))}))}));class ys{constructor(){this.isReady=!1,this.failed=!1,this.queue=[]}execute(){var e;if(this.failed)for(;e=this.queue.shift();)e(this.failed);else for(;e=this.queue.shift();)e()}fail(e){this.failed=e,this.execute()}ready(e){this.isReady=!0,this.db=e,this.execute()}addTask(e){this.queue.push(e),this.failed&&this.execute()}}function bs(e,t){let n=function(...e){if(!(this instanceof n))return new n(...e);t.apply(this,e)};var r,o;return o=e,(r=n).prototype=Object.create(o.prototype,{constructor:{value:r}}),n}class ws extends gs{constructor(e,t){super(),this._setup(e,t)}_setup(e,t){if(super._setup(),t=t||{},e&&"object"==typeof e&&(e=(t=e).name,delete t.name),void 0===t.deterministic_revs&&(t.deterministic_revs=!0),this.__opts=t=Li(t),this.auto_compaction=t.auto_compaction,this.purged_infos_limit=t.purged_infos_limit||1e3,this.prefix=_s.prefix,"string"!=typeof e)throw new Error("Missing/invalid DB name");var n=function(e,t){var n=e.match(/([a-z-]*):\/\/(.*)/);if(n)return{name:/https?/.test(n[1])?n[1]+"://"+n[2]:n[2],adapter:n[1]};var r=_s.adapters,o=_s.preferredAdapters,i=_s.prefix,a=t.adapter;if(!a)for(var s=0;s<o.length&&"idb"===(a=o[s])&&"websql"in r&&Ki()&&localStorage["_pouch__websqldb_"+i+e];++s)Qi("log",'PouchDB is downgrading "'+e+'" to WebSQL to avoid data loss, because it was already opened with WebSQL.');var l=r[a];return{name:l&&"use_prefix"in l&&!l.use_prefix?e:i+e,adapter:a}}((t.prefix||"")+e,t);if(t.name=n.name,t.adapter=t.adapter||n.adapter,this.name=e,this._adapter=t.adapter,_s.emit("debug",["adapter","Picked adapter: ",t.adapter]),!_s.adapters[t.adapter]||!_s.adapters[t.adapter].valid())throw new Error("Invalid Adapter: "+t.adapter);if(t.view_adapter&&(!_s.adapters[t.view_adapter]||!_s.adapters[t.view_adapter].valid()))throw new Error("Invalid View Adapter: "+t.view_adapter);this.taskqueue=new ys,this.adapter=t.adapter,_s.adapters[t.adapter].call(this,t,(e=>{if(e)return this.taskqueue.fail(e);!function(e){function t(t){e.removeListener("closed",n),t||e.constructor.emit("destroyed",e.name)}function n(){e.removeListener("destroyed",t),e.constructor.emit("unref",e)}e.once("destroyed",t),e.once("closed",n),e.constructor.emit("ref",e)}(this),this.emit("created",this),_s.emit("created",this.name),this.taskqueue.ready(this)}))}}const _s=bs(ws,(function(e,t){ws.prototype._setup.call(this,e,t)}));var xs="undefined"!=typeof AbortController?AbortController:function(){return{abort:function(){}}},ks=fetch,Ss=Headers;_s.adapters={},_s.preferredAdapters=[],_s.prefix="_pouch_";var Es=new(Ti());function Ps(e,t){for(var n=e,r=0,o=t.length;r<o&&(n=n[t[r]]);r++);return n}function Os(e){for(var t=[],n="",r=0,o=e.length;r<o;r++){var i=e[r];r>0&&"\\"===e[r-1]&&("$"===i||"."===i)?n=n.substring(0,n.length-1)+i:"."===i?(t.push(n),n=""):n+=i}return t.push(n),t}!function(e){Object.keys(Ti().prototype).forEach((function(t){"function"==typeof Ti().prototype[t]&&(e[t]=Es[t].bind(Es))}));var t=e._destructionListeners=new Pi;e.on("ref",(function(e){t.has(e.name)||t.set(e.name,[]),t.get(e.name).push(e)})),e.on("unref",(function(e){if(t.has(e.name)){var n=t.get(e.name),r=n.indexOf(e);r<0||(n.splice(r,1),n.length>1?t.set(e.name,n):t.delete(e.name))}})),e.on("destroyed",(function(e){if(t.has(e)){var n=t.get(e);t.delete(e),n.forEach((function(e){e.emit("destroyed",!0)}))}}))}(_s),_s.adapter=function(e,t,n){t.valid()&&(_s.adapters[e]=t,n&&_s.preferredAdapters.push(e))},_s.plugin=function(e){if("function"==typeof e)e(_s);else{if("object"!=typeof e||0===Object.keys(e).length)throw new Error('Invalid plugin: got "'+e+'", expected an object or a function');Object.keys(e).forEach((function(t){_s.prototype[t]=e[t]}))}return this.__defaults&&(_s.__defaults=Ji({},this.__defaults)),_s},_s.defaults=function(e){let t=bs(_s,(function(e,n){n=n||{},e&&"object"==typeof e&&(e=(n=e).name,delete n.name),n=Ji({},t.__defaults,n),_s.call(this,e,n)}));return t.preferredAdapters=_s.preferredAdapters.slice(),Object.keys(_s).forEach((function(e){e in t||(t[e]=_s[e])})),t.__defaults=Ji({},this.__defaults,e),t},_s.fetch=function(e,t){return ks(e,t)},_s.prototype.activeTasks=_s.activeTasks=new class{constructor(){this.tasks={}}list(){return Object.values(this.tasks)}add(e){const t=Oi();return this.tasks[t]={id:t,name:e.name,total_items:e.total_items,created_at:(new Date).toJSON()},t}get(e){return this.tasks[e]}remove(e,t){return delete this.tasks[e],this.tasks}update(e,t){const n=this.tasks[e];if(void 0!==n){const r={id:n.id,name:n.name,created_at:n.created_at,total_items:t.total_items||n.total_items,completed_items:t.completed_items||n.completed_items,updated_at:(new Date).toJSON()};this.tasks[e]=r}return this.tasks}};var Cs=["$or","$nor","$not"];function js(e){return Cs.indexOf(e)>-1}function Ts(e){return Object.keys(e)[0]}function Rs(e){var t={},n={$or:!0,$nor:!0};return e.forEach((function(e){Object.keys(e).forEach((function(r){var o=e[r];if("object"!=typeof o&&(o={$eq:o}),js(r))if(o instanceof Array){if(n[r])return n[r]=!1,void(t[r]=o);var i=[];t[r].forEach((function(e){Object.keys(o).forEach((function(t){var n=o[t],r=Math.max(Object.keys(e).length,Object.keys(n).length),a=Rs([e,n]);Object.keys(a).length<=r||i.push(a)}))})),t[r]=i}else t[r]=Rs([o]);else{var a=t[r]=t[r]||{};Object.keys(o).forEach((function(e){var t=o[e];return"$gt"===e||"$gte"===e?function(e,t,n){void 0===n.$eq&&(void 0!==n.$gte?"$gte"===e?t>n.$gte&&(n.$gte=t):t>=n.$gte&&(delete n.$gte,n.$gt=t):void 0!==n.$gt?"$gte"===e?t>n.$gt&&(delete n.$gt,n.$gte=t):t>n.$gt&&(n.$gt=t):n[e]=t)}(e,t,a):"$lt"===e||"$lte"===e?function(e,t,n){void 0===n.$eq&&(void 0!==n.$lte?"$lte"===e?t<n.$lte&&(n.$lte=t):t<=n.$lte&&(delete n.$lte,n.$lt=t):void 0!==n.$lt?"$lte"===e?t<n.$lt&&(delete n.$lt,n.$lte=t):t<n.$lt&&(n.$lt=t):n[e]=t)}(e,t,a):"$ne"===e?function(e,t){"$ne"in t?t.$ne.push(e):t.$ne=[e]}(t,a):"$eq"===e?function(e,t){delete t.$gt,delete t.$gte,delete t.$lt,delete t.$lte,delete t.$ne,t.$eq=e}(t,a):"$regex"===e?function(e,t){"$regex"in t?t.$regex.push(e):t.$regex=[e]}(t,a):void(a[e]=t)}))}}))})),t}function As(e){for(var t in e){if(Array.isArray(e))for(var n in e)e[n].$and&&(e[n]=Rs(e[n].$and));var r=e[t];"object"==typeof r&&As(r)}return e}function Zs(e,t){for(var n in e){"$and"===n&&(t=!0);var r=e[n];"object"==typeof r&&(t=Zs(r,t))}return t}function Ms(e){var t=Li(e);Zs(t,!1)&&"$and"in(t=As(t))&&(t=Rs(t.$and)),["$or","$nor"].forEach((function(e){e in t&&t[e].forEach((function(e){for(var t=Object.keys(e),n=0;n<t.length;n++){var r=t[n],o=e[r];"object"==typeof o&&null!==o||(e[r]={$eq:o})}}))})),"$not"in t&&(t.$not=Rs([t.$not]));for(var n=Object.keys(t),r=0;r<n.length;r++){var o=n[r],i=t[o];"object"==typeof i&&null!==i||(i={$eq:i}),t[o]=i}return Ns(t),t}function Ns(e){Object.keys(e).forEach((function(t){var n=e[t];Array.isArray(n)?n.forEach((function(e){e&&"object"==typeof e&&Ns(e)})):"$ne"===t?e.$ne=[n]:"$regex"===t?e.$regex=[n]:n&&"object"==typeof n&&Ns(n)}))}var Is=-324,Ls=3,$s="";function Ds(e,t){if(e===t)return 0;e=zs(e),t=zs(t);var n=Ws(e),r=Ws(t);if(n-r!=0)return n-r;switch(typeof e){case"number":return e-t;case"boolean":return e<t?-1:1;case"string":return function(e,t){return e===t?0:e>t?1:-1}(e,t)}return Array.isArray(e)?function(e,t){for(var n=Math.min(e.length,t.length),r=0;r<n;r++){var o=Ds(e[r],t[r]);if(0!==o)return o}return e.length===t.length?0:e.length>t.length?1:-1}(e,t):function(e,t){for(var n=Object.keys(e),r=Object.keys(t),o=Math.min(n.length,r.length),i=0;i<o;i++){var a=Ds(n[i],r[i]);if(0!==a)return a;if(0!==(a=Ds(e[n[i]],t[r[i]])))return a}return n.length===r.length?0:n.length>r.length?1:-1}(e,t)}function zs(e){switch(typeof e){case"undefined":return null;case"number":return e===1/0||e===-1/0||isNaN(e)?null:e;case"object":var t=e;if(Array.isArray(e)){var n=e.length;e=new Array(n);for(var r=0;r<n;r++)e[r]=zs(t[r])}else{if(e instanceof Date)return e.toJSON();if(null!==e)for(var o in e={},t)if(Object.prototype.hasOwnProperty.call(t,o)){var i=t[o];void 0!==i&&(e[o]=zs(i))}}}return e}function Fs(e){return Ws(e=zs(e))+$s+function(e){if(null!==e)switch(typeof e){case"boolean":return e?1:0;case"number":return function(e){if(0===e)return"1";var t,n=e.toExponential().split(/e\+?/),r=parseInt(n[1],10),o=e<0,i=o?"0":"2",a=function(e,t,n){for(var r="",o=n-e.length;r.length<o;)r+=t;return r}(t=((o?-r:r)-Is).toString(),"0",Ls)+t;i+=$s+a;var s=Math.abs(parseFloat(n[0]));o&&(s=10-s);var l=s.toFixed(20);return l=l.replace(/\.?0+$/,""),i+($s+l)}(e);case"string":return e.replace(/\u0002/g,"").replace(/\u0001/g,"").replace(/\u0000/g,"");case"object":var t=Array.isArray(e),n=t?e:Object.keys(e),r=-1,o=n.length,i="";if(t)for(;++r<o;)i+=Fs(n[r]);else for(;++r<o;){var a=n[r];i+=Fs(a)+Fs(e[a])}return i}return""}(e)+"\0"}function Bs(e,t){var n,r=t;if("1"===e[t])n=0,t++;else{var o="0"===e[t];t++;var i="",a=e.substring(t,t+Ls),s=parseInt(a,10)+Is;for(o&&(s=-s),t+=Ls;;){var l=e[t];if("\0"===l)break;i+=l,t++}n=1===(i=i.split(".")).length?parseInt(i,10):parseFloat(i[0]+"."+i[1]),o&&(n-=10),0!==s&&(n=parseFloat(n+"e"+s))}return{num:n,length:t-r}}function qs(e,t){var n=e.pop();if(t.length){var r=t[t.length-1];n===r.element&&(t.pop(),r=t[t.length-1]);var o=r.element,i=r.index;Array.isArray(o)?o.push(n):i===e.length-2?o[e.pop()]=n:e.push(n)}}function Ws(e){var t=["boolean","number","string","object"].indexOf(typeof e);return~t?null===e?1:Array.isArray(e)?5:t<3?t+2:t+3:Array.isArray(e)?5:void 0}function Us(e,t,n){return n.every((function(n){var r=t[n],o=Os(n),i=Ps(e,o);return js(n)?function(e,t,n){return"$or"===e?t.some((function(e){return Us(n,e,Object.keys(e))})):"$not"===e?!Us(n,t,Object.keys(t)):!t.find((function(e){return Us(n,e,Object.keys(e))}))}(n,r,e):Vs(r,e,o,i)}))}function Vs(e,t,n,r){return!e||("object"==typeof e?Object.keys(e).every((function(o){var i=e[o];if(0===o.indexOf("$"))return Hs(o,t,i,n,r);var a=Os(o);if(void 0===r&&"object"!=typeof i&&a.length>0)return!1;var s=Ps(r,a);return"object"==typeof i?Vs(i,t,n,s):Hs("$eq",t,i,a,s)})):e===r)}function Hs(e,t,n,r,o){if(!Ys[e])throw new Error('unknown operator "'+e+'" - should be one of $eq, $lte, $lt, $gt, $gte, $exists, $ne, $in, $nin, $size, $mod, $regex, $elemMatch, $type, $allMatch or $all');return Ys[e](t,n,r,o)}function Ks(e){return null!=e}function Gs(e){return void 0!==e}function Qs(e,t){return t.some((function(t){return e instanceof Array?e.some((function(e){return 0===Ds(t,e)})):0===Ds(t,e)}))}var Ys={$elemMatch:function(e,t,n,r){return!!Array.isArray(r)&&0!==r.length&&("object"==typeof r[0]&&null!==r[0]?r.some((function(e){return Us(e,t,Object.keys(t))})):r.some((function(r){return Vs(t,e,n,r)})))},$allMatch:function(e,t,n,r){return!!Array.isArray(r)&&0!==r.length&&("object"==typeof r[0]&&null!==r[0]?r.every((function(e){return Us(e,t,Object.keys(t))})):r.every((function(r){return Vs(t,e,n,r)})))},$eq:function(e,t,n,r){return Gs(r)&&0===Ds(r,t)},$gte:function(e,t,n,r){return Gs(r)&&Ds(r,t)>=0},$gt:function(e,t,n,r){return Gs(r)&&Ds(r,t)>0},$lte:function(e,t,n,r){return Gs(r)&&Ds(r,t)<=0},$lt:function(e,t,n,r){return Gs(r)&&Ds(r,t)<0},$exists:function(e,t,n,r){return t?Gs(r):!Gs(r)},$mod:function(e,t,n,r){return Ks(r)&&function(e,t){return"number"==typeof e&&parseInt(e,10)===e&&e%t[0]===t[1]}(r,t)},$ne:function(e,t,n,r){return t.every((function(e){return 0!==Ds(r,e)}))},$in:function(e,t,n,r){return Ks(r)&&Qs(r,t)},$nin:function(e,t,n,r){return Ks(r)&&!Qs(r,t)},$size:function(e,t,n,r){return Ks(r)&&Array.isArray(r)&&function(e,t){return e.length===t}(r,t)},$all:function(e,t,n,r){return Array.isArray(r)&&function(e,t){return t.every((function(t){return e.some((function(e){return 0===Ds(t,e)}))}))}(r,t)},$regex:function(e,t,n,r){return Ks(r)&&"string"==typeof r&&t.every((function(e){return function(e,t){return new RegExp(t).test(e)}(r,e)}))},$type:function(e,t,n,r){return function(e,t){switch(t){case"null":return null===e;case"boolean":return"boolean"==typeof e;case"number":return"number"==typeof e;case"string":return"string"==typeof e;case"array":return e instanceof Array;case"object":return"[object Object]"==={}.toString.call(e)}}(r,t)}};function Xs(e,t){if(e.selector&&e.filter&&"_selector"!==e.filter){var n="string"==typeof e.filter?e.filter:"function";return t(new Error('selector invalid for filter "'+n+'"'))}t()}function Js(e){e.view&&!e.filter&&(e.filter="_view"),e.selector&&!e.filter&&(e.filter="_selector"),e.filter&&"string"==typeof e.filter&&("_view"===e.filter?e.view=ka(e.view):e.filter=ka(e.filter))}function el(e,t){return t.filter&&"string"==typeof t.filter&&!t.doc_ids&&!_a(e.db)}function tl(e,t){var n=t.complete;if("_view"===t.filter){if(!t.view||"string"!=typeof t.view){var r=va(fa,"`view` filter parameter not found or invalid.");return n(r)}var o=xa(t.view);e.db.get("_design/"+o[0],(function(r,i){if(e.isCancelled)return n(null,{status:"cancelled"});if(r)return n(ga(r));var a=i&&i.views&&i.views[o[1]]&&i.views[o[1]].map;if(!a)return n(va(na,i.views?"missing json key: "+o[1]:"missing json key: views"));t.filter=ja(["return function(doc) {",'  "use strict";',"  var emitted = false;","  var emit = function (a, b) {","    emitted = true;","  };","  var view = "+a+";","  view(doc);","  if (emitted) {","    return true;","  }","};"].join("\n"),{}),e.doChanges(t)}))}else if(t.selector)t.filter=function(e){return function(e,t){if("object"!=typeof t)throw new Error("Selector error: expected a JSON object");var n=function(e,t,n){if(e=e.filter((function(e){return Us(e.doc,t.selector,n)})),t.sort){var r=function(e){function t(t){return e.map((function(e){var n=Os(Ts(e));return Ps(t,n)}))}return function(e,n){var r,o,i=Ds(t(e.doc),t(n.doc));return 0!==i?i:(r=e.doc._id)<(o=n.doc._id)?-1:r>o?1:0}}(t.sort);e=e.sort(r),"string"!=typeof t.sort[0]&&"desc"===(o=t.sort[0])[Ts(o)]&&(e=e.reverse())}var o;if("limit"in t||"skip"in t){var i=t.skip||0,a=("limit"in t?t.limit:e.length)+i;e=e.slice(i,a)}return e}([{doc:e}],{selector:t=Ms(t)},Object.keys(t));return n&&1===n.length}(e,t.selector)},e.doChanges(t);else{var i=xa(t.filter);e.db.get("_design/"+i[0],(function(r,o){if(e.isCancelled)return n(null,{status:"cancelled"});if(r)return n(ga(r));var a=o&&o.filters&&o.filters[i[1]];if(!a)return n(va(na,o&&o.filters?"missing json key: "+i[1]:"missing json key: filters"));t.filter=ja('"use strict";\nreturn '+a+";",{}),e.doChanges(t)}))}}function nl(e){return e.reduce((function(e,t){return e[t]=!0,e}),{})}_s.plugin((function(e){e._changesFilterPlugin={validate:Xs,normalize:Js,shouldFilter:el,filter:tl}})),_s.version="8.0.1";var rl=nl(["_id","_rev","_access","_attachments","_deleted","_revisions","_revs_info","_conflicts","_deleted_conflicts","_local_seq","_rev_tree","_replication_id","_replication_state","_replication_state_time","_replication_state_reason","_replication_stats","_removed"]),ol=nl(["_access","_attachments","_replication_id","_replication_state","_replication_state_time","_replication_state_reason","_replication_stats"]);function il(e){if(!/^\d+-/.test(e))return va(ha);var t=e.indexOf("-"),n=e.substring(0,t),r=e.substring(t+1);return{prefix:parseInt(n,10),id:r}}function al(e,t,n){var r,o,i;n||(n={deterministic_revs:!0});var a={status:"available"};if(e._deleted&&(a.deleted=!0),t)if(e._id||(e._id=Ha()),o=Va(e,n.deterministic_revs),e._rev){if((i=il(e._rev)).error)return i;e._rev_tree=[{pos:i.prefix,ids:[i.id,{status:"missing"},[[o,a,[]]]]}],r=i.prefix+1}else e._rev_tree=[{pos:1,ids:[o,a,[]]}],r=1;else if(e._revisions&&(e._rev_tree=function(e,t){for(var n=e.start-e.ids.length+1,r=e.ids,o=[r[0],t,[]],i=1,a=r.length;i<a;i++)o=[r[i],{status:"missing"},[o]];return[{pos:n,ids:o}]}(e._revisions,a),r=e._revisions.start,o=e._revisions.ids[0]),!e._rev_tree){if((i=il(e._rev)).error)return i;r=i.prefix,o=i.id,e._rev_tree=[{pos:r,ids:[o,a,[]]}]}wa(e._id),e._rev=r+"-"+o;var s={metadata:{},data:{}};for(var l in e)if(Object.prototype.hasOwnProperty.call(e,l)){var u="_"===l[0];if(u&&!rl[l]){var c=va(ca,l);throw c.message=ca.message+": "+l,c}u&&!ol[l]?s.metadata[l.slice(1)]=e[l]:s.data[l]=e[l]}return s}function sl(e,t,n){if(e.stub)return n();"string"==typeof e.data?function(e,t,n){var r=function(e){try{return Ra(e)}catch(e){return{error:va(la,"Attachment is not a valid base64 string")}}}(e.data);if(r.error)return n(r.error);e.length=r.length,e.data="blob"===t?Na(r,e.content_type):"base64"===t?Aa(r):r,Wa(r,(function(t){e.digest="md5-"+t,n()}))}(e,t,n):function(e,t,n){Wa(e.data,(function(r){e.digest="md5-"+r,e.length=e.data.size||e.data.length||0,"binary"===t?$a(e.data,(function(t){e.data=t,n()})):"base64"===t?Da(e.data,(function(t){e.data=t,n()})):n()}))}(e,t,n)}function ll(e,t,n,r,o,i,a,s,l){e=e||1e3;var u=s.new_edits,c=new Pi,f=0,d=t.length;function p(){++f===d&&l&&l()}t.forEach((function(e,t){if(e._id&&us(e._id)){var r=e._deleted?"_removeLocal":"_putLocal";n[r](e,{ctx:o},(function(e,n){i[t]=e||n,p()}))}else{var a=e.metadata.id;c.has(a)?(d--,c.get(a).push([e,t])):c.set(a,[[e,t]])}})),c.forEach((function(t,n){var o=0;function l(){++o<t.length?c():p()}function c(){var c=t[o],f=c[0],d=c[1];if(r.has(n))!function(e,t,n,r,o,i,a,s){if(function(e,t){for(var n,r=e.slice(),o=t.split("-"),i=parseInt(o[0],10),a=o[1];n=r.pop();){if(n.pos===i&&n.ids[0]===a)return!0;for(var s=n.ids[2],l=0,u=s.length;l<u;l++)r.push({pos:n.pos+1,ids:s[l]})}return!1}(t.rev_tree,n.metadata.rev)&&!s)return r[o]=n,i();var l=t.winningRev||Ka(t),u="deleted"in t?t.deleted:ls(t,l),c="deleted"in n.metadata?n.metadata.deleted:ls(n.metadata),f=/^1-/.test(n.metadata.rev);if(u&&!c&&s&&f){var d=n.data;d._rev=l,d._id=n.metadata.id,n=al(d,s)}var p=as(t.rev_tree,n.metadata.rev_tree[0],e);if(s&&(u&&c&&"new_leaf"!==p.conflicts||!u&&"new_leaf"!==p.conflicts||u&&!c&&"new_branch"===p.conflicts)){var h=va(ra);return r[o]=h,i()}var m=n.metadata.rev;n.metadata.rev_tree=p.tree,n.stemmedRevs=p.stemmedRevs||[],t.rev_map&&(n.metadata.rev_map=t.rev_map);var v=Ka(n.metadata),g=ls(n.metadata,v),y=u===g?0:u<g?-1:1;a(n,v,g,m===v?g:ls(n.metadata,m),!0,y,o,i)}(e,r.get(n),f,i,d,l,a,u);else{var p=as([],f.metadata.rev_tree[0],e);f.metadata.rev_tree=p.tree,f.stemmedRevs=p.stemmedRevs||[],function(e,t,n){var r=Ka(e.metadata),o=ls(e.metadata,r);if("was_delete"in s&&o)return i[t]=va(na,"deleted"),n();if(u&&function(e){return"missing"===e.metadata.rev_tree[0].ids[1].status}(e)){var l=va(ra);return i[t]=l,n()}a(e,r,o,o,!1,o?0:1,t,n)}(f,d,l)}}c()}))}var ul=5,cl="document-store",fl="by-sequence",dl="attach-store",pl="attach-seq-store",hl="meta-store",ml="local-store",vl="detect-blob-support";function gl(e){try{return JSON.stringify(e)}catch(t){return Ci.stringify(e)}}function yl(e){return function(t){var n="unknown_error";t.target&&t.target.error&&(n=t.target.error.name||t.target.error.message),e(va(pa,n,t.type))}}function bl(e,t,n){return{data:gl(e),winningRev:t,deletedOrLocal:n?"1":"0",seq:e.seq,id:e.id}}function wl(e){if(!e)return null;var t=function(e){try{return JSON.parse(e)}catch(t){return Ci.parse(e)}}(e.data);return t.winningRev=e.winningRev,t.deleted="1"===e.deletedOrLocal,t.seq=e.seq,t}function _l(e){if(!e)return e;var t=e._doc_id_rev.lastIndexOf(":");return e._id=e._doc_id_rev.substring(0,t-1),e._rev=e._doc_id_rev.substring(t+1),delete e._doc_id_rev,e}function xl(e,t,n,r){n?r(e?"string"!=typeof e?e:Ia(e,t):Za([""],{type:t})):e?"string"!=typeof e?La(e,(function(e){r(Aa(e))})):r(e):r("")}function kl(e,t,n,r){var o=Object.keys(e._attachments||{});if(!o.length)return r&&r();var i=0;function a(){++i===o.length&&r&&r()}o.forEach((function(r){t.attachments&&t.include_docs?function(e,t){var r=e._attachments[t],o=r.digest;n.objectStore(dl).get(o).onsuccess=function(e){r.body=e.target.result.body,a()}}(e,r):(e._attachments[r].stub=!0,a())}))}function Sl(e,t){return Promise.all(e.map((function(e){if(e.doc&&e.doc._attachments){var n=Object.keys(e.doc._attachments);return Promise.all(n.map((function(n){var r=e.doc._attachments[n];if("body"in r){var o=r.body,i=r.content_type;return new Promise((function(a){xl(o,i,t,(function(t){e.doc._attachments[n]=Ji(Fi(r,["digest","content_type"]),{data:t}),a()}))}))}})))}})))}function El(e,t,n){var r=[],o=n.objectStore(fl),i=n.objectStore(dl),a=n.objectStore(pl),s=e.length;function l(){--s||r.length&&r.forEach((function(e){a.index("digestSeq").count(IDBKeyRange.bound(e+"::",e+"::￿",!1,!1)).onsuccess=function(t){t.target.result||i.delete(e)}}))}e.forEach((function(e){var n=o.index("_doc_id_rev"),i=t+"::"+e;n.getKey(i).onsuccess=function(e){var t=e.target.result;if("number"!=typeof t)return l();o.delete(t),a.index("seq").openCursor(IDBKeyRange.only(t)).onsuccess=function(e){var t=e.target.result;if(t){var n=t.value.digestSeq.split("::")[0];r.push(n),a.delete(t.primaryKey),t.continue()}else l()}}}))}function Pl(e,t,n){try{return{txn:e.transaction(t,n)}}catch(e){return{error:e}}}var Ol=new Gi;function Cl(e,t,n,r,o,i){for(var a,s,l,u,c,f,d,p,h=t.docs,m=0,v=h.length;m<v;m++){var g=h[m];g._id&&us(g._id)||(g=h[m]=al(g,n.new_edits,e)).error&&!d&&(d=g)}if(d)return i(d);var y=!1,b=0,w=new Array(h.length),_=new Pi,x=!1,k=r._meta.blobSupport?"blob":"base64";function S(){y=!0,E()}function E(){p&&y&&(p.docCount+=b,f.put(p))}function P(){x||(Ol.notify(r._meta.name),i(null,w))}function O(e,t,n,r,o,i,a,s){e.metadata.winningRev=t,e.metadata.deleted=n;var l=e.data;if(l._id=e.metadata.id,l._rev=e.metadata.rev,r&&(l._deleted=!0),l._attachments&&Object.keys(l._attachments).length)return function(e,t,n,r,o,i){var a=e.data,s=0,l=Object.keys(a._attachments);function c(){s===l.length&&C(e,t,n,r,o,i)}function f(){s++,c()}l.forEach((function(n){var r=e.data._attachments[n];if(r.stub)s++,c();else{var o=r.data;delete r.data,r.revpos=parseInt(t,10),function(e,t,n){u.count(e).onsuccess=function(r){if(r.target.result)return n();var o={digest:e,body:t};u.put(o).onsuccess=n}}(r.digest,o,f)}}))}(e,t,n,o,a,s);b+=i,E(),C(e,t,n,o,a,s)}function C(e,t,n,o,i,u){var f=e.data,d=e.metadata;function p(i){var l=e.stemmedRevs||[];o&&r.auto_compaction&&(l=l.concat(function(e){var t=[];return Ga(e.rev_tree,(function(e,n,r,o,i){"available"!==i.status||e||(t.push(n+"-"+r),i.status="missing")})),t}(e.metadata))),l&&l.length&&El(l,e.metadata.id,a),d.seq=i.target.result;var u=bl(d,t,n);s.put(u).onsuccess=h}function h(){w[i]={ok:!0,id:d.id,rev:d.rev},_.set(e.metadata.id,e.metadata),function(e,t,n){var r=0,o=Object.keys(e.data._attachments||{});if(!o.length)return n();function i(){++r===o.length&&n()}function a(n){var r=e.data._attachments[n].digest,o=c.put({seq:t,digestSeq:r+"::"+t});o.onsuccess=i,o.onerror=function(e){e.preventDefault(),e.stopPropagation(),i()}}for(var s=0;s<o.length;s++)a(o[s])}(e,d.seq,u)}f._doc_id_rev=d.id+"::"+d.rev,delete f._id,delete f._rev;var m=l.put(f);m.onsuccess=p,m.onerror=function(e){e.preventDefault(),e.stopPropagation(),l.index("_doc_id_rev").getKey(f._doc_id_rev).onsuccess=function(e){l.put(f,e.target.result).onsuccess=p}}}!function(e,t,n){if(!e.length)return n();var r,o=0;function i(){o++,e.length===o&&(r?n(r):n())}e.forEach((function(e){var n=e.data&&e.data._attachments?Object.keys(e.data._attachments):[],o=0;if(!n.length)return i();function a(e){r=e,++o===n.length&&i()}for(var s in e.data._attachments)Object.prototype.hasOwnProperty.call(e.data._attachments,s)&&sl(e.data._attachments[s],t,a)}))}(h,k,(function(t){if(t)return i(t);!function(){var t=Pl(o,[cl,fl,dl,ml,pl,hl],"readwrite");if(t.error)return i(t.error);(a=t.txn).onabort=yl(i),a.ontimeout=yl(i),a.oncomplete=P,s=a.objectStore(cl),l=a.objectStore(fl),u=a.objectStore(dl),c=a.objectStore(pl),(f=a.objectStore(hl)).get(hl).onsuccess=function(e){p=e.target.result,E()},function(e){var t=[];if(h.forEach((function(e){e.data&&e.data._attachments&&Object.keys(e.data._attachments).forEach((function(n){var r=e.data._attachments[n];r.stub&&t.push(r.digest)}))})),!t.length)return e();var n,r=0;t.forEach((function(o){!function(e,t){u.get(e).onsuccess=function(n){if(n.target.result)t();else{var r=va(ma,"unknown stub attachment with digest "+e);r.status=412,t(r)}}}(o,(function(o){o&&!n&&(n=o),++r===t.length&&e(n)}))}))}((function(t){if(t)return x=!0,i(t);!function(){if(h.length)for(var t=0,o=0,i=h.length;o<i;o++){var l=h[o];l._id&&us(l._id)?u():s.get(l.metadata.id).onsuccess=c}function u(){++t===h.length&&ll(e.revs_limit,h,r,_,a,w,O,n,S)}function c(e){var t=wl(e.target.result);t&&_.set(t.id,t),u()}}()}))}()}))}function jl(e,t,n,r,o){var i,a,s;function l(e){a=e.target.result,i&&o(i,a,s)}function u(e){i=e.target.result,a&&o(i,a,s)}function c(e){var t=e.target.result;if(!t)return o();o([t.key],[t.value],t)}-1===r&&(r=1e3),"function"==typeof e.getAll&&"function"==typeof e.getAllKeys&&r>1&&!n?(s={continue:function(){if(!i.length)return o();var n,s=i[i.length-1];if(t&&t.upper)try{n=IDBKeyRange.bound(s,t.upper,!0,t.upperOpen)}catch(e){if("DataError"===e.name&&0===e.code)return o()}else n=IDBKeyRange.lowerBound(s,!0);t=n,i=null,a=null,e.getAll(t,r).onsuccess=l,e.getAllKeys(t,r).onsuccess=u}},e.getAll(t,r).onsuccess=l,e.getAllKeys(t,r).onsuccess=u):n?e.openCursor(t,"prev").onsuccess=c:e.openCursor(t).onsuccess=c}var Tl=!1,Rl=[];function Al(){!Tl&&Rl.length&&(Tl=!0,Rl.shift()())}var Zl,Ml=new Pi,Nl=new Pi;function Il(e,t){var n=this;!function(t,r,o){Rl.push((function(){var t;t=function(e,t){!function(e,t,n,r){try{e(t,n)}catch(t){r.emit("error",t)}}(r,e,t,o),Tl=!1,vi()((function(){Al()}))},function(e,t,n){var r=t.name,o=null,i=null;function a(e){return function(t,n){t&&t instanceof Error&&!t.reason&&i&&(t.reason=i),e(t,n)}}function s(e){var t=e.createObjectStore(cl,{keyPath:"id"});e.createObjectStore(fl,{autoIncrement:!0}).createIndex("_doc_id_rev","_doc_id_rev",{unique:!0}),e.createObjectStore(dl,{keyPath:"digest"}),e.createObjectStore(hl,{keyPath:"id",autoIncrement:!1}),e.createObjectStore(vl),t.createIndex("deletedOrLocal","deletedOrLocal",{unique:!1}),e.createObjectStore(ml,{keyPath:"_id"});var n=e.createObjectStore(pl,{autoIncrement:!0});n.createIndex("seq","seq"),n.createIndex("digestSeq","digestSeq",{unique:!0})}function l(e,t){var n=e.objectStore(cl);n.createIndex("deletedOrLocal","deletedOrLocal",{unique:!1}),n.openCursor().onsuccess=function(e){var r=e.target.result;if(r){var o=r.value,i=ls(o);o.deletedOrLocal=i?"1":"0",n.put(o),r.continue()}else t()}}function u(e){e.createObjectStore(ml,{keyPath:"_id"}).createIndex("_doc_id_rev","_doc_id_rev",{unique:!0})}function c(e,t){var n=e.objectStore(ml),r=e.objectStore(cl),o=e.objectStore(fl);r.openCursor().onsuccess=function(e){var i=e.target.result;if(i){var a=i.value,s=a.id,l=us(s),u=Ka(a);if(l){var c=s+"::"+u,f=s+"::",d=s+"::~",p=o.index("_doc_id_rev"),h=IDBKeyRange.bound(f,d,!1,!1),m=p.openCursor(h);m.onsuccess=function(e){if(m=e.target.result){var t=m.value;t._doc_id_rev===c&&n.put(t),o.delete(m.primaryKey),m.continue()}else r.delete(i.primaryKey),i.continue()}}else i.continue()}else t&&t()}}function f(e){var t=e.createObjectStore(pl,{autoIncrement:!0});t.createIndex("seq","seq"),t.createIndex("digestSeq","digestSeq",{unique:!0})}function d(e,t){var n=e.objectStore(fl),r=e.objectStore(dl),o=e.objectStore(pl);r.count().onsuccess=function(e){if(!e.target.result)return t();n.openCursor().onsuccess=function(e){var n=e.target.result;if(!n)return t();for(var r=n.value,i=n.primaryKey,a=Object.keys(r._attachments||{}),s={},l=0;l<a.length;l++)s[r._attachments[a[l]].digest]=!0;var u=Object.keys(s);for(l=0;l<u.length;l++){var c=u[l];o.put({seq:i,digestSeq:c+"::"+i})}n.continue()}}}function p(e){function t(e){return e.data?wl(e):(e.deleted="1"===e.deletedOrLocal,e)}var n=e.objectStore(fl),r=e.objectStore(cl);r.openCursor().onsuccess=function(e){var o=e.target.result;if(o){var i=t(o.value);if(i.winningRev=i.winningRev||Ka(i),i.seq)return s();a()}function a(){var e=i.id+"::",t=i.id+"::￿",r=n.index("_doc_id_rev").openCursor(IDBKeyRange.bound(e,t)),o=0;r.onsuccess=function(e){var t=e.target.result;if(!t)return i.seq=o,s();var n=t.primaryKey;n>o&&(o=n),t.continue()}}function s(){var e=bl(i,i.winningRev,i.deleted);r.put(e).onsuccess=function(){o.continue()}}}}e._meta=null,e._remote=!1,e.type=function(){return"idb"},e._id=Di((function(t){t(null,e._meta.instanceId)})),e._bulkDocs=function(n,r,i){Cl(t,n,r,e,o,a(i))},e._get=function(e,t,n){var r,i,a,s=t.ctx;if(!s){var l=Pl(o,[cl,fl,dl],"readonly");if(l.error)return n(l.error);s=l.txn}function u(){n(a,{doc:r,metadata:i,ctx:s})}s.objectStore(cl).get(e).onsuccess=function(e){if(!(i=wl(e.target.result)))return a=va(na,"missing"),u();var n;if(t.rev)n=t.latest?function(e,t){for(var n,r=t.rev_tree.slice();n=r.pop();){var o=n.pos,i=n.ids,a=i[0],s=i[1],l=i[2],u=0===l.length,c=n.history?n.history.slice():[];if(c.push({id:a,pos:o,opts:s}),u)for(var f=0,d=c.length;f<d;f++){var p=c[f];if(p.pos+"-"+p.id===e)return o+"-"+a}for(var h=0,m=l.length;h<m;h++)r.push({pos:o+1,ids:l[h],history:c})}throw new Error("Unable to resolve latest revision for id "+t.id+", rev "+e)}(t.rev,i):t.rev;else if(n=i.winningRev,ls(i))return a=va(na,"deleted"),u();var o=s.objectStore(fl),l=i.id+"::"+n;o.index("_doc_id_rev").get(l).onsuccess=function(e){if((r=e.target.result)&&(r=_l(r)),!r)return a=va(na,"missing"),u();u()}}},e._getAttachment=function(e,t,n,r,i){var a;if(r.ctx)a=r.ctx;else{var s=Pl(o,[cl,fl,dl],"readonly");if(s.error)return i(s.error);a=s.txn}var l=n.digest,u=n.content_type;a.objectStore(dl).get(l).onsuccess=function(e){xl(e.target.result.body,u,r.binary,(function(e){i(null,e)}))}},e._info=function(t){var n,r,i=Pl(o,[hl,fl],"readonly");if(i.error)return t(i.error);var a=i.txn;a.objectStore(hl).get(hl).onsuccess=function(e){r=e.target.result.docCount},a.objectStore(fl).openCursor(null,"prev").onsuccess=function(e){var t=e.target.result;n=t?t.key:0},a.oncomplete=function(){t(null,{doc_count:r,update_seq:n,idb_attachment_format:e._meta.blobSupport?"binary":"base64"})}},e._allDocs=function(e,t){!function(e,t,n){var r,o,i="startkey"in e&&e.startkey,a="endkey"in e&&e.endkey,s="key"in e&&e.key,l="keys"in e&&e.keys,u=e.skip||0,c="number"==typeof e.limit?e.limit:-1,f=!1!==e.inclusive_end;if(!l&&(r=function(e,t,n,r,o){try{if(e&&t)return o?IDBKeyRange.bound(t,e,!n,!1):IDBKeyRange.bound(e,t,!1,!n);if(e)return o?IDBKeyRange.upperBound(e):IDBKeyRange.lowerBound(e);if(t)return o?IDBKeyRange.lowerBound(t,!n):IDBKeyRange.upperBound(t,!n);if(r)return IDBKeyRange.only(r)}catch(e){return{error:e}}return null}(i,a,f,s,e.descending),(o=r&&r.error)&&("DataError"!==o.name||0!==o.code)))return n(va(pa,o.name,o.message));var d=[cl,fl,hl];e.attachments&&d.push(dl);var p=Pl(t,d,"readonly");if(p.error)return n(p.error);var h=p.txn;h.oncomplete=function(){e.attachments?Sl(x,e.binary).then(P):P()},h.onabort=yl(n);var m,v,g,y=h.objectStore(cl),b=h.objectStore(fl),w=h.objectStore(hl),_=b.index("_doc_id_rev"),x=[];function k(t,n){var r={id:n.id,key:n.id,value:{rev:t}};n.deleted?l&&(x.push(r),r.value.deleted=!0,r.doc=null):u--<=0&&(x.push(r),e.include_docs&&function(t,n,r){var o=t.id+"::"+r;_.get(o).onsuccess=function(r){if(n.doc=_l(r.target.result)||{},e.conflicts){var o=Xa(t);o.length&&(n.doc._conflicts=o)}kl(n.doc,e,h)}}(n,r,t))}function S(e){for(var t=0,n=e.length;t<n&&x.length!==c;t++){var r=e[t];if(r.error&&l)x.push(r);else{var o=wl(r);k(o.winningRev,o)}}}function E(e,t,n){n&&(S(t),x.length<c&&n.continue())}function P(){var t={total_rows:m,offset:e.skip,rows:x};e.update_seq&&void 0!==v&&(t.update_seq=v),n(null,t)}w.get(hl).onsuccess=function(e){m=e.target.result.docCount},e.update_seq&&(g=function(e){e.target.result&&e.target.result.length>0&&(v=e.target.result[0])},b.openCursor(null,"prev").onsuccess=function(e){var t=e.target.result,n=void 0;return t&&t.key&&(n=t.key),g({target:{result:[n]}})}),o||0===c||(l?function(e,t,n){var r=new Array(e.length),o=0;e.forEach((function(i,a){t.get(i).onsuccess=function(t){t.target.result?r[a]=t.target.result:r[a]={key:i,error:"not_found"},++o===e.length&&n(e,r,{})}}))}(e.keys,y,E):-1===c?function(e,t,n){if("function"!=typeof e.getAll){var r=[];e.openCursor(t).onsuccess=function(e){var t=e.target.result;t?(r.push(t.value),t.continue()):n({target:{result:r}})}}else e.getAll(t).onsuccess=n}(y,r,(function(t){var n=t.target.result;e.descending&&(n=n.reverse()),S(n)})):jl(y,r,e.descending,c+u,E))}(e,o,a(t))},e._changes=function(t){return function(e,t,n,r){if((e=Li(e)).continuous){var o=n+":"+Ha();return Ol.addListener(n,o,t,e),Ol.notify(n),{cancel:function(){Ol.removeListener(n,o)}}}var i=e.doc_ids&&new Ei(e.doc_ids);e.since=e.since||0;var a=e.since,s="limit"in e?e.limit:-1;0===s&&(s=1);var l,u,c,f,d=[],p=0,h=ya(e),m=new Pi;function v(e,t,n,r){if(n.seq!==t)return r();if(n.winningRev===e._rev)return r(n,e);var o=e._id+"::"+n.winningRev;f.get(o).onsuccess=function(e){r(n,_l(e.target.result))}}function g(){e.complete(null,{results:d,last_seq:a})}var y=[cl,fl];e.attachments&&y.push(dl);var b=Pl(r,y,"readonly");if(b.error)return e.complete(b.error);(l=b.txn).onabort=yl(e.complete),l.oncomplete=function(){!e.continuous&&e.attachments?Sl(d).then(g):g()},u=l.objectStore(fl),c=l.objectStore(cl),f=u.index("_doc_id_rev"),jl(u,e.since&&!e.descending?IDBKeyRange.lowerBound(e.since,!0):null,e.descending,s,(function(t,n,r){if(r&&t.length){var o=new Array(t.length),u=new Array(t.length),f=0;n.forEach((function(n,a){!function(e,t,n){if(i&&!i.has(e._id))return n();var r=m.get(e._id);if(r)return v(e,t,r,n);c.get(e._id).onsuccess=function(o){r=wl(o.target.result),m.set(e._id,r),v(e,t,r,n)}}(_l(n),t[a],(function(n,i){u[a]=n,o[a]=i,++f===t.length&&function(){for(var t=[],n=0,i=o.length;n<i&&p!==s;n++){var a=o[n];if(a){var l=u[n];t.push(g(l,a))}}Promise.all(t).then((function(t){for(var n=0,r=t.length;n<r;n++)t[n]&&e.onChange(t[n])})).catch(e.complete),p!==s&&r.continue()}()}))}))}function g(t,n){var r=e.processChange(n,t,e);a=r.seq=t.seq;var o=h(r);return"object"==typeof o?Promise.reject(o):o?(p++,e.return_docs&&d.push(r),e.attachments&&e.include_docs?new Promise((function(t){kl(n,e,l,(function(){Sl([r],e.binary).then((function(){t(r)}))}))})):Promise.resolve(r)):Promise.resolve()}}))}(t,e,r,o)},e._close=function(e){o.close(),Ml.delete(r),e()},e._getRevisionTree=function(e,t){var n=Pl(o,[cl],"readonly");if(n.error)return t(n.error);n.txn.objectStore(cl).get(e).onsuccess=function(e){var n=wl(e.target.result);n?t(null,n.rev_tree):t(va(na))}},e._doCompaction=function(e,t,n){var r=Pl(o,[cl,fl,dl,pl],"readwrite");if(r.error)return n(r.error);var i=r.txn;i.objectStore(cl).get(e).onsuccess=function(n){var r=wl(n.target.result);Ga(r.rev_tree,(function(e,n,r,o,i){var a=n+"-"+r;-1!==t.indexOf(a)&&(i.status="missing")})),El(t,e,i);var o=r.winningRev,a=r.deleted;i.objectStore(cl).put(bl(r,o,a))},i.onabort=yl(n),i.oncomplete=function(){n()}},e._getLocal=function(e,t){var n=Pl(o,[ml],"readonly");if(n.error)return t(n.error);var r=n.txn.objectStore(ml).get(e);r.onerror=yl(t),r.onsuccess=function(e){var n=e.target.result;n?(delete n._doc_id_rev,t(null,n)):t(va(na))}},e._putLocal=function(e,t,n){"function"==typeof t&&(n=t,t={}),delete e._revisions;var r=e._rev,i=e._id;e._rev=r?"0-"+(parseInt(r.split("-")[1],10)+1):"0-1";var a,s=t.ctx;if(!s){var l=Pl(o,[ml],"readwrite");if(l.error)return n(l.error);(s=l.txn).onerror=yl(n),s.oncomplete=function(){a&&n(null,a)}}var u,c=s.objectStore(ml);r?(u=c.get(i)).onsuccess=function(o){var i=o.target.result;i&&i._rev===r?c.put(e).onsuccess=function(){a={ok:!0,id:e._id,rev:e._rev},t.ctx&&n(null,a)}:n(va(ra))}:((u=c.add(e)).onerror=function(e){n(va(ra)),e.preventDefault(),e.stopPropagation()},u.onsuccess=function(){a={ok:!0,id:e._id,rev:e._rev},t.ctx&&n(null,a)})},e._removeLocal=function(e,t,n){"function"==typeof t&&(n=t,t={});var r,i=t.ctx;if(!i){var a=Pl(o,[ml],"readwrite");if(a.error)return n(a.error);(i=a.txn).oncomplete=function(){r&&n(null,r)}}var s=e._id,l=i.objectStore(ml),u=l.get(s);u.onerror=yl(n),u.onsuccess=function(o){var i=o.target.result;i&&i._rev===e._rev?(l.delete(s),r={ok:!0,id:s,rev:"0-0"},t.ctx&&n(null,r)):n(va(na))}},e._destroy=function(e,t){Ol.removeAllListeners(r);var n=Nl.get(r);n&&n.result&&(n.result.close(),Ml.delete(r));var o=indexedDB.deleteDatabase(r);o.onsuccess=function(){Nl.delete(r),Ki()&&r in localStorage&&delete localStorage[r],t(null,{ok:!0})},o.onerror=yl(t)};var h=Ml.get(r);if(h)return o=h.idb,e._meta=h.global,vi()((function(){n(null,e)}));var m=indexedDB.open(r,ul);Nl.set(r,m),m.onupgradeneeded=function(e){var t=e.target.result;if(e.oldVersion<1)return s(t);var n=e.currentTarget.transaction;e.oldVersion<3&&u(t),e.oldVersion<4&&f(t);var r=[l,c,d,p],o=e.oldVersion;function i(){var e=r[o-1];o++,e&&e(n,i)}i()},m.onsuccess=function(t){(o=t.target.result).onversionchange=function(){o.close(),Ml.delete(r)},o.onabort=function(e){Qi("error","Database has a global failure",e.target.error),i=e.target.error,o.close(),Ml.delete(r)};var a,s,l,u,c=o.transaction([hl,vl,cl],"readwrite"),f=!1;function d(){void 0!==l&&f&&(e._meta={name:r,instanceId:u,blobSupport:l},Ml.set(r,{idb:o,global:e._meta}),n(null,e))}function p(){if(void 0!==s&&void 0!==a){var e=r+"_id";e in a?u=a[e]:a[e]=u=Ha(),a.docCount=s,c.objectStore(hl).put(a)}}c.objectStore(hl).get(hl).onsuccess=function(e){a=e.target.result||{id:hl},p()},function(e,t){e.objectStore(cl).index("deletedOrLocal").count(IDBKeyRange.only("0")).onsuccess=function(e){t(e.target.result)}}(c,(function(e){s=e,p()})),Zl||(Zl=function(e){return new Promise((function(t){var n=Za([""]),r=e.objectStore(vl).put(n,"key");r.onsuccess=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||parseInt(e[1],10)>=43)},r.onerror=e.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)}})).catch((function(){return!1}))}(c)),Zl.then((function(e){l=e,d()})),c.oncomplete=function(){f=!0,d()},c.onabort=yl(n)},m.onerror=function(e){var t=e.target.error&&e.target.error.message;t?-1!==t.indexOf("stored database is a higher version")&&(t=new Error('This DB was created with the newer "indexeddb" adapter, but you are trying to open it with the older "idb" adapter')):t="Failed to open indexedDB, are you in private browsing mode?",Qi("error",t),n(va(pa,t))}}(n,e,t)})),Al()}(0,t,n.constructor)}Il.valid=function(){try{return"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}};const Ll=25,$l=50,Dl=5e3,zl=1e4;let Fl={};function Bl(e){let t=e.doc||e.ok,n=t&&t._attachments;n&&Object.keys(n).forEach((function(e){let t=n[e];t.data=Ia(t.data,t.content_type)}))}function ql(e){return/^_design/.test(e)?"_design/"+encodeURIComponent(e.slice(8)):/^_local/.test(e)?"_local/"+encodeURIComponent(e.slice(7)):encodeURIComponent(e)}function Wl(e){return e._attachments&&Object.keys(e._attachments)?Promise.all(Object.keys(e._attachments).map((function(t){let n=e._attachments[t];if(n.data&&"string"!=typeof n.data)return new Promise((function(e){Da(n.data,e)})).then((function(e){n.data=e}))}))):Promise.resolve()}function Ul(e,t){return Vl(e,e.db+"/"+t)}function Vl(e,t){let n=e.path?"/":"";return e.protocol+"://"+e.host+(e.port?":"+e.port:"")+"/"+e.path+n+t}function Hl(e){return"?"+Object.keys(e).map((function(t){return t+"="+encodeURIComponent(e[t])})).join("&")}function Kl(e,t){let n=this,r=function(e,t){if(function(e){if(!e.prefix)return!1;let t=Ca(e.prefix).protocol;return"http"===t||"https"===t}(t)){let n=t.name.substr(t.prefix.length);e=t.prefix.replace(/\/?$/,"/")+encodeURIComponent(n)}let n=Ca(e);(n.user||n.password)&&(n.auth={username:n.user,password:n.password});let r=n.path.replace(/(^\/|\/$)/g,"").split("/");return n.db=r.pop(),-1===n.db.indexOf("%")&&(n.db=encodeURIComponent(n.db)),n.path=r.join("/"),n}(e.name,e),o=Ul(r,"");e=Li(e);const i=async function(t,n){if((n=n||{}).headers=n.headers||new Ss,n.credentials="include",e.auth||r.auth){let t=e.auth||r.auth,o=t.username+":"+t.password,i=Aa(unescape(encodeURIComponent(o)));n.headers.set("Authorization","Basic "+i)}let o=e.headers||{};Object.keys(o).forEach((function(e){n.headers.append(e,o[e])})),function(e){let t="undefined"!=typeof navigator&&navigator.userAgent?navigator.userAgent.toLowerCase():"",n=-1!==t.indexOf("msie"),r=-1!==t.indexOf("trident"),o=-1!==t.indexOf("edge"),i=!("method"in e)||"GET"===e.method;return(n||r||o)&&i}(n)&&(t+=(-1===t.indexOf("?")?"?":"&")+"_nonce="+Date.now());let i=e.fetch||ks;return await i(t,n)};function a(e,t){return zi(e,(function(...e){u().then((function(){return t.apply(this,e)})).catch((function(t){e.pop()(t)}))})).bind(n)}async function s(e,t){let n={};(t=t||{}).headers=t.headers||new Ss,t.headers.get("Content-Type")||t.headers.set("Content-Type","application/json"),t.headers.get("Accept")||t.headers.set("Accept","application/json");const r=await i(e,t);n.ok=r.ok,n.status=r.status;const o=await r.json();if(n.data=o,!n.ok)throw n.data.status=n.status,ga(n.data);return Array.isArray(n.data)&&(n.data=n.data.map((function(e){return e.error||e.missing?ga(e):e}))),n}let l;async function u(){return e.skip_setup?Promise.resolve():l||(l=s(o).catch((function(e){return e&&e.status&&404===e.status?(Xi(404,"PouchDB is just detecting if the remote exists."),s(o,{method:"PUT"})):Promise.reject(e)})).catch((function(e){return!(!e||!e.status||412!==e.status)||Promise.reject(e)})),l.catch((function(){l=null})),l)}function c(e){return e.split("/").map(encodeURIComponent).join("/")}vi()((function(){t(null,n)})),n._remote=!0,n.type=function(){return"http"},n.id=a("id",(async function(e){let t;try{const e=await i(Vl(r,""));t=await e.json()}catch(e){t={}}e(null,t&&t.uuid?t.uuid+r.db:Ul(r,""))})),n.compact=a("compact",(async function(e,t){"function"==typeof e&&(t=e,e={}),e=Li(e),await s(Ul(r,"_compact"),{method:"POST"}),function r(){n.info((function(n,o){o&&!o.compact_running?t(null,{ok:!0}):setTimeout(r,e.interval||200)}))}()})),n.bulkGet=zi("bulkGet",(function(e,t){let n=this;async function o(t){let n={};e.revs&&(n.revs=!0),e.attachments&&(n.attachments=!0),e.latest&&(n.latest=!0);try{const o=await s(Ul(r,"_bulk_get"+Hl(n)),{method:"POST",body:JSON.stringify({docs:e.docs})});e.attachments&&e.binary&&o.data.results.forEach((function(e){e.docs.forEach(Bl)})),t(null,o.data)}catch(e){t(e)}}function i(){let r=$l,o=Math.ceil(e.docs.length/r),i=0,a=new Array(o);function s(e){return function(n,r){a[e]=r.results,++i===o&&t(null,{results:ba(a)})}}for(let t=0;t<o;t++){let o=Fi(e,["revs","attachments","binary","latest"]);o.docs=e.docs.slice(t*r,Math.min(e.docs.length,(t+1)*r)),Hi(n,o,s(t))}}let a=Vl(r,""),l=Fl[a];"boolean"!=typeof l?o((function(e,n){e?(Fl[a]=!1,Xi(e.status,"PouchDB is just detecting if the remote supports the _bulk_get API."),i()):(Fl[a]=!0,t(null,n))})):l?o(t):i()})),n._info=async function(e){try{await u();const t=await i(Ul(r,"")),n=await t.json();n.host=Ul(r,""),e(null,n)}catch(t){e(t)}},n.fetch=async function(e,t){await u();const n="/"===e.substring(0,1)?Vl(r,e.substring(1)):Ul(r,e);return i(n,t)},n.get=a("get",(async function(e,t,n){"function"==typeof t&&(n=t,t={});let o={};function a(e){let n=e._attachments,o=n&&Object.keys(n);if(n&&o.length)return a=o.map((function(o){return function(){return async function(o){const a=n[o],s=ql(e._id)+"/"+c(o)+"?rev="+e._rev,l=await i(Ul(r,s));let u,f;if(u="buffer"in l?await l.buffer():await l.blob(),t.binary){let e=Object.getOwnPropertyDescriptor(u.__proto__,"type");e&&!e.set||(u.type=a.content_type),f=u}else f=await new Promise((function(e){Da(u,e)}));delete a.stub,delete a.length,a.data=f}(o)}})),s=5,new Promise((function(e,t){var n,r=0,o=0,i=0,l=a.length;function u(){++i===l?n?t(n):e():d()}function c(){r--,u()}function f(e){r--,n=n||e,u()}function d(){for(;r<s&&o<l;)r++,a[o++]().then(c,f)}d()}));var a,s}(t=Li(t)).revs&&(o.revs=!0),t.revs_info&&(o.revs_info=!0),t.latest&&(o.latest=!0),t.open_revs&&("all"!==t.open_revs&&(t.open_revs=JSON.stringify(t.open_revs)),o.open_revs=t.open_revs),t.rev&&(o.rev=t.rev),t.conflicts&&(o.conflicts=t.conflicts),t.update_seq&&(o.update_seq=t.update_seq),e=ql(e);const l=Ul(r,e+Hl(o));try{const e=await s(l);t.attachments&&await(u=e.data,Array.isArray(u)?Promise.all(u.map((function(e){if(e.ok)return a(e.ok)}))):a(u)),n(null,e.data)}catch(t){t.docId=e,n(t)}var u})),n.remove=a("remove",(async function(e,t,n,o){let i;"string"==typeof t?(i={_id:e,_rev:t},"function"==typeof n&&(o=n,n={})):(i=e,"function"==typeof t?(o=t,n={}):(o=n,n=t));const a=i._rev||n.rev,l=Ul(r,ql(i._id))+"?rev="+a;try{o(null,(await s(l,{method:"DELETE"})).data)}catch(e){o(e)}})),n.getAttachment=a("getAttachment",(async function(e,t,n,o){"function"==typeof n&&(o=n,n={});const a=n.rev?"?rev="+n.rev:"",s=Ul(r,ql(e))+"/"+c(t)+a;let l;try{const e=await i(s,{method:"GET"});if(!e.ok)throw e;let t;if(l=e.headers.get("content-type"),t="undefined"==typeof process||process.browser||"function"!=typeof e.buffer?await e.blob():await e.buffer(),"undefined"!=typeof process&&!process.browser){var u=Object.getOwnPropertyDescriptor(t.__proto__,"type");u&&!u.set||(t.type=l)}o(null,t)}catch(e){o(e)}})),n.removeAttachment=a("removeAttachment",(async function(e,t,n,o){const i=Ul(r,ql(e)+"/"+c(t))+"?rev="+n;try{o(null,(await s(i,{method:"DELETE"})).data)}catch(e){o(e)}})),n.putAttachment=a("putAttachment",(async function(e,t,n,o,i,a){"function"==typeof i&&(a=i,i=o,o=n,n=null);const l=ql(e)+"/"+c(t);let u=Ul(r,l);if(n&&(u+="?rev="+n),"string"==typeof o){let e;try{e=Ra(o)}catch(e){return a(va(la,"Attachment is not a valid base64 string"))}o=e?Na(e,i):""}try{a(null,(await s(u,{headers:new Ss({"Content-Type":i}),method:"PUT",body:o})).data)}catch(e){a(e)}})),n._bulkDocs=async function(e,t,n){e.new_edits=t.new_edits;try{await u(),await Promise.all(e.docs.map(Wl)),n(null,(await s(Ul(r,"_bulk_docs"),{method:"POST",body:JSON.stringify(e)})).data)}catch(e){n(e)}},n._put=async function(e,t,n){try{await u(),await Wl(e),n(null,(await s(Ul(r,ql(e._id)),{method:"PUT",body:JSON.stringify(e)})).data)}catch(t){t.docId=e&&e._id,n(t)}},n.allDocs=a("allDocs",(async function(e,t){"function"==typeof e&&(t=e,e={});let n,o={},i="GET";(e=Li(e)).conflicts&&(o.conflicts=!0),e.update_seq&&(o.update_seq=!0),e.descending&&(o.descending=!0),e.include_docs&&(o.include_docs=!0),e.attachments&&(o.attachments=!0),e.key&&(o.key=JSON.stringify(e.key)),e.start_key&&(e.startkey=e.start_key),e.startkey&&(o.startkey=JSON.stringify(e.startkey)),e.end_key&&(e.endkey=e.end_key),e.endkey&&(o.endkey=JSON.stringify(e.endkey)),void 0!==e.inclusive_end&&(o.inclusive_end=!!e.inclusive_end),void 0!==e.limit&&(o.limit=e.limit),void 0!==e.skip&&(o.skip=e.skip);let a=Hl(o);void 0!==e.keys&&(i="POST",n={keys:e.keys});try{const o=await s(Ul(r,"_all_docs"+a),{method:i,body:JSON.stringify(n)});e.include_docs&&e.attachments&&e.binary&&o.data.rows.forEach(Bl),t(null,o.data)}catch(e){t(e)}})),n._changes=function(e){let t="batch_size"in e?e.batch_size:Ll;(e=Li(e)).continuous&&!("heartbeat"in e)&&(e.heartbeat=zl);let n="timeout"in e?e.timeout:3e4;"timeout"in e&&e.timeout&&n-e.timeout<Dl&&(n=e.timeout+Dl),"heartbeat"in e&&e.heartbeat&&n-e.heartbeat<Dl&&(n=e.heartbeat+Dl);let o={};"timeout"in e&&e.timeout&&(o.timeout=e.timeout);let i=void 0!==e.limit&&e.limit,a=i;if(e.style&&(o.style=e.style),(e.include_docs||e.filter&&"function"==typeof e.filter)&&(o.include_docs=!0),e.attachments&&(o.attachments=!0),e.continuous&&(o.feed="longpoll"),e.seq_interval&&(o.seq_interval=e.seq_interval),e.conflicts&&(o.conflicts=!0),e.descending&&(o.descending=!0),e.update_seq&&(o.update_seq=!0),"heartbeat"in e&&e.heartbeat&&(o.heartbeat=e.heartbeat),e.filter&&"string"==typeof e.filter&&(o.filter=e.filter),e.view&&"string"==typeof e.view&&(o.filter="_view",o.view=e.view),e.query_params&&"object"==typeof e.query_params)for(let t in e.query_params)Object.prototype.hasOwnProperty.call(e.query_params,t)&&(o[t]=e.query_params[t]);let l,c="GET";e.doc_ids?(o.filter="_doc_ids",c="POST",l={doc_ids:e.doc_ids}):e.selector&&(o.filter="_selector",c="POST",l={selector:e.selector});let f,d=new xs;const p=async function(n,p){if(e.aborted)return;o.since=n,"object"==typeof o.since&&(o.since=JSON.stringify(o.since)),e.descending?i&&(o.limit=a):o.limit=!i||a>t?t:a;let h=Ul(r,"_changes"+Hl(o)),m={signal:d.signal,method:c,body:JSON.stringify(l)};if(f=n,!e.aborted)try{await u(),p(null,(await s(h,m)).data)}catch(e){p(e)}};let h={results:[]};const m=function(n,r){if(e.aborted)return;let o=0;if(r&&r.results){o=r.results.length,h.last_seq=r.last_seq;let t=null,n=null;"number"==typeof r.pending&&(t=r.pending),"string"!=typeof h.last_seq&&"number"!=typeof h.last_seq||(n=h.last_seq),e.query_params,r.results=r.results.filter((function(r){a--;let o=ya(e)(r);return o&&(e.include_docs&&e.attachments&&e.binary&&Bl(r),e.return_docs&&h.results.push(r),e.onChange(r,t,n)),o}))}else if(n)return e.aborted=!0,void e.complete(n);r&&r.last_seq&&(f=r.last_seq);let s=i&&a<=0||r&&o<t||e.descending;(!e.continuous||i&&a<=0)&&s?e.complete(null,h):vi()((function(){p(f,m)}))};return p(e.since||0,m),{cancel:function(){e.aborted=!0,d.abort()}}},n.revsDiff=a("revsDiff",(async function(e,t,n){"function"==typeof t&&(n=t,t={});try{n(null,(await s(Ul(r,"_revs_diff"),{method:"POST",body:JSON.stringify(e)})).data)}catch(e){n(e)}})),n._close=function(e){e()},n._destroy=async function(e,t){try{t(null,await s(Ul(r,""),{method:"DELETE"}))}catch(e){404===e.status?t(null,{ok:!0}):t(e)}}}Kl.valid=function(){return!0};class Gl extends Error{constructor(e){super(),this.status=400,this.name="query_parse_error",this.message=e,this.error=!0;try{Error.captureStackTrace(this,Gl)}catch(e){}}}class Ql extends Error{constructor(e){super(),this.status=404,this.name="not_found",this.message=e,this.error=!0;try{Error.captureStackTrace(this,Ql)}catch(e){}}}class Yl extends Error{constructor(e){super(),this.status=500,this.name="invalid_value",this.message=e,this.error=!0;try{Error.captureStackTrace(this,Yl)}catch(e){}}}function Xl(e,t){return t&&e.then((function(e){vi()((function(){t(null,e)}))}),(function(e){vi()((function(){t(e)}))})),e}function Jl(e,t){return function(){var n=arguments,r=this;return e.add((function(){return t.apply(r,n)}))}}function eu(e){var t=new Ei(e),n=new Array(t.size),r=-1;return t.forEach((function(e){n[++r]=e})),n}function tu(e){var t=new Array(e.size),n=-1;return e.forEach((function(e,r){t[++n]=r})),t}function nu(e){return new Yl("builtin "+e+" function requires map values to be numbers or number arrays")}function ru(e){for(var t=0,n=0,r=e.length;n<r;n++){var o=e[n];if("number"!=typeof o){if(!Array.isArray(o))throw nu("_sum");t="number"==typeof t?[t]:t;for(var i=0,a=o.length;i<a;i++){var s=o[i];if("number"!=typeof s)throw nu("_sum");void 0===t[i]?t.push(s):t[i]+=s}}else"number"==typeof t?t+=o:t[0]+=o}return t}var ou=Qi.bind(null,"log"),iu=Array.isArray,au=JSON.parse;function su(e,t){return ja("return ("+e.replace(/;\s*$/,"")+");",{emit:t,sum:ru,log:ou,isArray:iu,toJSON:au})}class lu{constructor(){this.promise=new Promise((function(e){e()}))}add(e){return this.promise=this.promise.catch((function(){})).then((function(){return e()})),this.promise}finish(){return this.promise}}function uu(e){if(!e)return"undefined";switch(typeof e){case"function":case"string":return e.toString();default:return JSON.stringify(e)}}async function cu(e,t,n,r,o,i){const a=function(e,t){return uu(e)+uu(t)+"undefined"}(n,r);let s;if(!o&&(s=e._cachedViews=e._cachedViews||{},s[a]))return s[a];const l=e.info().then((async function(l){const u=l.db_name+"-mrview-"+(o?"temp":Ua(a));await Ta(e,"_local/"+i,(function(e){e.views=e.views||{};let n=t;-1===n.indexOf("/")&&(n=t+"/"+t);const r=e.views[n]=e.views[n]||{};if(!r[u])return r[u]=!0,e}));const c=(await e.registerDependentDatabase(u)).db;c.auto_compaction=!0;const f={name:u,db:c,sourceDB:e,adapter:e.adapter,mapFun:n,reduceFun:r};let d;try{d=await f.db.get("_local/lastSeq")}catch(e){if(404!==e.status)throw e}return f.seq=d?d.seq:0,s&&f.db.once("destroyed",(function(){delete s[a]})),f}));return s&&(s[a]=l),l}var fu={},du=new lu,pu=50;function hu(e){return-1===e.indexOf("/")?[e,e]:e.split("/")}function mu(e,t,n){try{e.emit("error",t)}catch(e){Qi("error","The user's map/reduce function threw an uncaught error.\nYou can debug this error by doing:\nmyDatabase.on('error', function (err) { debugger; });\nPlease double-check your map/reduce function."),Qi("error",t,n)}}var vu=function(e,t){return ru(t)},gu=function(e,t){return t.length},yu=function(e,t){return{sum:ru(t),min:Math.min.apply(null,t),max:Math.max.apply(null,t),count:t.length,sumsqr:function(e){for(var t=0,n=0,r=e.length;n<r;n++){var o=e[n];t+=o*o}return t}(t)}},bu=function(e,t,n,r){function o(e,t,n){try{t(n)}catch(r){mu(e,r,{fun:t,doc:n})}}function i(e,t,n,r,o){try{return{output:t(n,r,o)}}catch(i){return mu(e,i,{fun:t,keys:n,values:r,rereduce:o}),{error:i}}}function a(e,t){const n=Ds(e.key,t.key);return 0!==n?n:Ds(e.value,t.value)}function s(e,t,n){return n=n||0,"number"==typeof t?e.slice(n,t+n):n>0?e.slice(n):e}function l(e){const t=e.value;return t&&"object"==typeof t&&t._id||e.id}function u(e){return function(t){return e.include_docs&&e.attachments&&e.binary&&function(e){e.rows.forEach((function(e){const t=e.doc&&e.doc._attachments;t&&Object.keys(t).forEach((function(e){const n=t[e];t[e].data=Ia(n.data,n.content_type)}))}))}(t),t}}function c(e,t,n,r){let o=t[e];void 0!==o&&(r&&(o=encodeURIComponent(JSON.stringify(o))),n.push(e+"="+o))}function f(e){if(void 0!==e){const t=Number(e);return isNaN(t)||t!==parseInt(e,10)?e:t}}function d(e,t){const n=e.descending?"endkey":"startkey",r=e.descending?"startkey":"endkey";if(void 0!==e[n]&&void 0!==e[r]&&Ds(e[n],e[r])>0)throw new Gl("No rows can match your key range, reverse your start_key and end_key or set {descending : true}");if(t.reduce&&!1!==e.reduce){if(e.include_docs)throw new Gl("{include_docs:true} is invalid for reduce");if(e.keys&&e.keys.length>1&&!e.group&&!e.group_level)throw new Gl("Multi-key fetches for reduce views must use {group: true}")}["group_level","limit","skip"].forEach((function(t){const n=function(e){if(e){if("number"!=typeof e)return new Gl(`Invalid value for integer: "${e}"`);if(e<0)return new Gl(`Invalid value for positive integer: "${e}"`)}}(e[t]);if(n)throw n}))}function p(e){return function(t){if(404===t.status)return e;throw t}}function h(e){const t="string"==typeof e?e:e.name;let n=fu[t];return n||(n=fu[t]=new lu),n}async function m(e,n){return Jl(h(e),(function(){return async function(e,n){let r,i,s;const l=t(e.mapFun,(function(e,t){const n={id:i._id,key:zs(e)};null!=t&&(n.value=zs(t)),r.push(n)}));let u=e.seq||0;function c(t,n){return function(){return function(e,t,n){var r="_local/lastSeq";return e.db.get(r).catch(p({_id:r,seq:0})).then((function(r){var o=tu(t);return Promise.all(o.map((function(n){return async function(e,t,n){const r="_local/doc_"+e,o={_id:r,keys:[]},i=n.get(e),a=i[0],s=i[1],l=await(function(e){return 1===e.length&&/^1-/.test(e[0].rev)}(s)?Promise.resolve(o):t.db.get(r).catch(p(o))),u=await function(e){return e.keys.length?t.db.allDocs({keys:e.keys,include_docs:!0}):Promise.resolve({rows:[]})}(l);return function(e,t){const n=[],r=new Ei;for(let e=0,o=t.rows.length;e<o;e++){const o=t.rows[e].doc;if(o&&(n.push(o),r.add(o._id),o._deleted=!a.has(o._id),!o._deleted)){const e=a.get(o._id);"value"in e&&(o.value=e.value)}}const o=tu(a);return o.forEach((function(e){if(!r.has(e)){const t={_id:e},r=a.get(e);"value"in r&&(t.value=r.value),n.push(t)}})),e.keys=eu(o.concat(e.keys)),n.push(e),n}(l,u)}(n,e,t)}))).then((function(t){var o=ba(t);return r.seq=n,o.push(r),e.db.bulkDocs({docs:o})})).then((()=>function(e){return e.sourceDB.get("_local/purges").then((function(t){const n=t.purgeSeq;return e.db.get("_local/purgeSeq").then((function(e){return e._rev})).catch((function(e){if(404!==e.status)throw e})).then((function(t){return e.db.put({_id:"_local/purgeSeq",_rev:t,purgeSeq:n})}))})).catch((function(e){if(404!==e.status)throw e}))}(e)))}))}(e,t,n)}}let f=0;const d={view:e.name,indexed_docs:f};e.sourceDB.emit("indexing",d);const h=new lu;async function m(){return function(t,d){var p=t.results;if(!p.length&&!d.length)return;for(let e of d)if(p.findIndex((function(t){return t.id===e.docId}))<0){const t={_id:e.docId,doc:{_id:e.docId,_deleted:1},changes:[]};e.doc&&(t.doc=e.doc,t.changes.push({rev:e.doc._rev})),p.push(t)}var g=function(t){const n=new Pi;for(let s=0,c=t.length;s<c;s++){const c=t[s];if("_"!==c.doc._id[0]){r=[],i=c.doc,i._deleted||o(e.sourceDB,l,i),r.sort(a);const t=v(r);n.set(c.doc._id,[t,c.changes])}u=c.seq}return n}(p);h.add(c(g,u)),f+=p.length;const y={view:e.name,last_seq:t.last_seq,results_count:p.length,indexed_docs:f};return e.sourceDB.emit("indexing",y),e.sourceDB.activeTasks.update(s,{completed_items:f}),p.length<n.changes_batch_size?void 0:m()}(await e.sourceDB.changes({return_docs:!0,conflicts:!0,include_docs:!0,style:"all_docs",since:u,limit:n.changes_batch_size}),await e.db.get("_local/purgeSeq").then((function(e){return e.purgeSeq})).catch((function(e){if(e&&404!==e.status)throw e;return-1})).then((function(t){return e.sourceDB.get("_local/purges").then((function(n){const r=n.purges.filter((function(e,n){return n>t})).map((e=>e.docId)),o=r.filter((function(e,t){return r.indexOf(e)===t}));return Promise.all(o.map((function(t){return e.sourceDB.get(t).then((function(e){return{docId:t,doc:e}})).catch((function(e){if(404!==e.status)throw e;return{docId:t}}))})))})).catch((function(e){if(e&&404!==e.status)throw e;return[]}))})))}function v(e){const t=new Pi;let n;for(let r=0,o=e.length;r<o;r++){const o=e[r],i=[o.key,o.id];r>0&&0===Ds(o.key,n)&&i.push(r),t.set(Fs(i),o),n=o.key}return t}try{await e.sourceDB.info().then((function(t){s=e.sourceDB.activeTasks.add({name:"view_indexing",total_items:t.update_seq-u})})),await m(),await h.finish(),e.seq=u,e.sourceDB.activeTasks.remove(s)}catch(t){e.sourceDB.activeTasks.remove(s,t)}}(e,n)}))()}function v(e,t){return Jl(h(e),(function(){return async function(e,t){let r;const o=e.reduceFun&&!1!==t.reduce,a=t.skip||0;async function u(t){t.include_docs=!0;const n=await e.db.allDocs(t);return r=n.total_rows,n.rows.map((function(e){if("value"in e.doc&&"object"==typeof e.doc.value&&null!==e.doc.value){const t=Object.keys(e.doc.value).sort(),n=["id","key","value"];if(!(t<n||t>n))return e.doc.value}const t=function(e){for(var t=[],n=[],r=0;;){var o=e[r++];if("\0"!==o)switch(o){case"1":t.push(null);break;case"2":t.push("1"===e[r]),r++;break;case"3":var i=Bs(e,r);t.push(i.num),r+=i.length;break;case"4":for(var a="";;){var s=e[r];if("\0"===s)break;a+=s,r++}a=a.replace(/\u0001\u0001/g,"\0").replace(/\u0001\u0002/g,"").replace(/\u0002\u0002/g,""),t.push(a);break;case"5":var l={element:[],index:t.length};t.push(l.element),n.push(l);break;case"6":var u={element:{},index:t.length};t.push(u.element),n.push(u);break;default:throw new Error("bad collationIndex or unexpectedly reached end of input: "+o)}else{if(1===t.length)return t.pop();qs(t,n)}}}(e.doc._id);return{key:t[0],id:t[1],value:"value"in e.doc?e.doc.value:null}}))}async function c(u){let c;if(c=o?function(e,t,r){0===r.group_level&&delete r.group_level;const o=r.group||r.group_level,a=n(e.reduceFun),l=[],u=isNaN(r.group_level)?Number.POSITIVE_INFINITY:r.group_level;t.forEach((function(e){const t=l[l.length-1];let n=o?e.key:null;if(o&&Array.isArray(n)&&(n=n.slice(0,u)),t&&0===Ds(t.groupKey,n))return t.keys.push([e.key,e.id]),void t.values.push(e.value);l.push({keys:[[e.key,e.id]],values:[e.value],groupKey:n})})),t=[];for(let n=0,r=l.length;n<r;n++){const r=l[n],o=i(e.sourceDB,a,r.keys,r.values,!1);if(o.error&&o.error instanceof Yl)throw o.error;t.push({value:o.error?null:o.output,key:r.groupKey})}return{rows:s(t,r.limit,r.skip)}}(e,u,t):void 0===t.keys?{total_rows:r,offset:a,rows:u}:{total_rows:r,offset:a,rows:s(u,t.limit,t.skip)},t.update_seq&&(c.update_seq=e.seq),t.include_docs){const n=eu(u.map(l)),r=await e.sourceDB.allDocs({keys:n,include_docs:!0,conflicts:t.conflicts,attachments:t.attachments,binary:t.binary});var f=new Pi;return r.rows.forEach((function(e){f.set(e.id,e.doc)})),u.forEach((function(e){var t=l(e),n=f.get(t);n&&(e.doc=n)})),c}return c}if(void 0===t.keys||t.keys.length||(t.limit=0,delete t.keys),void 0!==t.keys){const e=t.keys.map((function(e){const n={startkey:Fs([e]),endkey:Fs([e,{}])};return t.update_seq&&(n.update_seq=!0),u(n)}));return c(ba(await Promise.all(e)))}{const e={descending:t.descending};let n,r;if(t.update_seq&&(e.update_seq=!0),"start_key"in t&&(n=t.start_key),"startkey"in t&&(n=t.startkey),"end_key"in t&&(r=t.end_key),"endkey"in t&&(r=t.endkey),void 0!==n&&(e.startkey=t.descending?Fs([n,{}]):Fs([n])),void 0!==r){let n=!1!==t.inclusive_end;t.descending&&(n=!n),e.endkey=Fs(n?[r,{}]:[r])}if(void 0!==t.key){const n=Fs([t.key]),r=Fs([t.key,{}]);e.descending?(e.endkey=n,e.startkey=r):(e.startkey=n,e.endkey=r)}return o||("number"==typeof t.limit&&(e.limit=t.limit),e.skip=a),c(await u(e))}}(e,t)}))()}var g;return{query:function(t,n,o){const i=this;"function"==typeof n&&(o=n,n={}),n=n?function(e){return e.group_level=f(e.group_level),e.limit=f(e.limit),e.skip=f(e.skip),e}(n):{},"function"==typeof t&&(t={map:t});const a=Promise.resolve().then((function(){return async function(t,n,o){if("function"==typeof t._query)return function(e,t,n){return new Promise((function(r,o){e._query(t,n,(function(e,t){if(e)return o(e);r(t)}))}))}(t,n,o);if(_a(t))return async function(e,t,n){let r,o,i=[],a="GET";if(c("reduce",n,i),c("include_docs",n,i),c("attachments",n,i),c("limit",n,i),c("descending",n,i),c("group",n,i),c("group_level",n,i),c("skip",n,i),c("stale",n,i),c("conflicts",n,i),c("startkey",n,i,!0),c("start_key",n,i,!0),c("endkey",n,i,!0),c("end_key",n,i,!0),c("inclusive_end",n,i),c("key",n,i,!0),c("update_seq",n,i),i=i.join("&"),i=""===i?"":"?"+i,void 0!==n.keys){const e=2e3,o=`keys=${encodeURIComponent(JSON.stringify(n.keys))}`;o.length+i.length+1<=e?i+=("?"===i[0]?"&":"?")+o:(a="POST","string"==typeof t?r={keys:n.keys}:t.keys=n.keys)}if("string"==typeof t){const s=hu(t),l=await e.fetch("_design/"+s[0]+"/_view/"+s[1]+i,{headers:new Ss({"Content-Type":"application/json"}),method:a,body:JSON.stringify(r)});o=l.ok;const c=await l.json();if(!o)throw c.status=l.status,ga(c);return c.rows.forEach((function(e){if(e.value&&e.value.error&&"builtin_reduce_error"===e.value.error)throw new Error(e.reason)})),new Promise((function(e){e(c)})).then(u(n))}r=r||{},Object.keys(t).forEach((function(e){Array.isArray(t[e])?r[e]=t[e]:r[e]=t[e].toString()}));const s=await e.fetch("_temp_view"+i,{headers:new Ss({"Content-Type":"application/json"}),method:"POST",body:JSON.stringify(r)});o=s.ok;const l=await s.json();if(!o)throw l.status=s.status,ga(l);return new Promise((function(e){e(l)})).then(u(n))}(t,n,o);const i={changes_batch_size:t.__opts.view_update_changes_batch_size||pu};if("string"!=typeof n)return d(o,n),du.add((async function(){const r=await cu(t,"temp_view/temp_view",n.map,n.reduce,!0,e);return a=m(r,i).then((function(){return v(r,o)})),s=function(){return r.db.destroy()},a.then((function(e){return s().then((function(){return e}))}),(function(e){return s().then((function(){throw e}))}));var a,s})),du.finish();{const a=n,s=hu(a),l=s[0],u=s[1],c=await t.get("_design/"+l);if(!(n=c.views&&c.views[u]))throw new Ql(`ddoc ${c._id} has no view named ${u}`);r(c,u),d(o,n);const f=await cu(t,a,n.map,n.reduce,!1,e);return"ok"===o.stale||"update_after"===o.stale?("update_after"===o.stale&&vi()((function(){m(f,i)})),v(f,o)):(await m(f,i),v(f,o))}}(i,t,n)}));return Xl(a,o),a},viewCleanup:(g=function(){const t=this;return"function"==typeof t._viewCleanup?function(e){return new Promise((function(t,n){e._viewCleanup((function(e,r){if(e)return n(e);t(r)}))}))}(t):_a(t)?async function(e){return(await e.fetch("_view_cleanup",{headers:new Ss({"Content-Type":"application/json"}),method:"POST"})).json()}(t):async function(t){try{const n=await t.get("_local/"+e),r=new Pi;Object.keys(n.views).forEach((function(e){const t=hu(e),n="_design/"+t[0],o=t[1];let i=r.get(n);i||(i=new Ei,r.set(n,i)),i.add(o)}));const o={keys:tu(r),include_docs:!0},i=await t.allDocs(o),a={};i.rows.forEach((function(e){const t=e.key.substring(8);r.get(e.key).forEach((function(r){let o=t+"/"+r;n.views[o]||(o=r);const i=Object.keys(n.views[o]),s=e.doc&&e.doc.views&&e.doc.views[r];i.forEach((function(e){a[e]=a[e]||s}))}))}));const s=Object.keys(a).filter((function(e){return!a[e]})).map((function(e){return Jl(h(e),(function(){return new t.constructor(e,t.__opts).destroy()}))()}));return Promise.all(s).then((function(){return{ok:!0}}))}catch(e){if(404===e.status)return{ok:!0};throw e}}(t)},function(...e){var t=e.pop(),n=g.apply(this,e);return"function"==typeof t&&Xl(n,t),n})}}("mrviews",(function(e,t){if("function"==typeof e&&2===e.length){var n=e;return function(e){return n(e,t)}}return su(e.toString(),t)}),(function(e){var t=e.toString(),n=function(e){if(/^_sum/.test(e))return vu;if(/^_count/.test(e))return gu;if(/^_stats/.test(e))return yu;if(/^_/.test(e))throw new Error(e+" is not a supported reduce function.")}(t);return n||su(t)}),(function(e,t){var n=e.views&&e.views[t];if("string"!=typeof n.map)throw new Ql("ddoc "+e._id+" has no string view named "+t+", instead found object of type: "+typeof n.map)})),wu={query:function(e,t,n){return bu.query.call(this,e,t,n)},viewCleanup:function(e){return bu.viewCleanup.call(this,e)}};function _u(e,t){var n=Object.keys(t._attachments);return Promise.all(n.map((function(n){return e.getAttachment(t._id,n,{rev:t._rev})})))}var xu=1,ku="pouchdb",Su=5,Eu=0;function Pu(e,t,n,r,o){return e.get(t).catch((function(n){if(404===n.status)return"http"!==e.adapter&&"https"!==e.adapter||Xi(404,"PouchDB is just checking if a remote checkpoint exists."),{session_id:r,_id:t,history:[],replicator:ku,version:xu};throw n})).then((function(i){if(!o.cancelled&&i.last_seq!==n)return i.history=(i.history||[]).filter((function(e){return e.session_id!==r})),i.history.unshift({last_seq:n,session_id:r}),i.history=i.history.slice(0,Su),i.version=xu,i.replicator=ku,i.session_id=r,i.last_seq=n,e.put(i).catch((function(i){if(409===i.status)return Pu(e,t,n,r,o);throw i}))}))}class Ou{constructor(e,t,n,r,o){this.src=e,this.target=t,this.id=n,this.returnValue=r,this.opts=o||{}}writeCheckpoint(e,t){var n=this;return this.updateTarget(e,t).then((function(){return n.updateSource(e,t)}))}updateTarget(e,t){return this.opts.writeTargetCheckpoint?Pu(this.target,this.id,e,t,this.returnValue):Promise.resolve(!0)}updateSource(e,t){if(this.opts.writeSourceCheckpoint){var n=this;return Pu(this.src,this.id,e,t,this.returnValue).catch((function(e){if(Ru(e))return n.opts.writeSourceCheckpoint=!1,!0;throw e}))}return Promise.resolve(!0)}getCheckpoint(){var e=this;return e.opts&&e.opts.writeSourceCheckpoint&&!e.opts.writeTargetCheckpoint?e.src.get(e.id).then((function(e){return e.last_seq||Eu})).catch((function(e){if(404!==e.status)throw e;return Eu})):e.target.get(e.id).then((function(t){return e.opts&&e.opts.writeTargetCheckpoint&&!e.opts.writeSourceCheckpoint?t.last_seq||Eu:e.src.get(e.id).then((function(e){return t.version!==e.version?Eu:(n=t.version?t.version.toString():"undefined")in Cu?Cu[n](t,e):Eu;var n}),(function(n){if(404===n.status&&t.last_seq)return e.src.put({_id:e.id,last_seq:Eu}).then((function(){return Eu}),(function(n){return Ru(n)?(e.opts.writeSourceCheckpoint=!1,t.last_seq):Eu}));throw n}))})).catch((function(e){if(404!==e.status)throw e;return Eu}))}}var Cu={undefined:function(e,t){return 0===Ds(e.last_seq,t.last_seq)?t.last_seq:0},1:function(e,t){return(n=t,r=e,n.session_id===r.session_id?{last_seq:n.last_seq,history:n.history}:ju(n.history,r.history)).last_seq;var n,r}};function ju(e,t){var n=e[0],r=e.slice(1),o=t[0],i=t.slice(1);return n&&0!==t.length?Tu(n.session_id,t)?{last_seq:n.last_seq,history:e}:Tu(o.session_id,r)?{last_seq:o.last_seq,history:i}:ju(r,i):{last_seq:Eu,history:[]}}function Tu(e,t){var n=t[0],r=t.slice(1);return!(!e||0===t.length)&&(e===n.session_id||Tu(e,r))}function Ru(e){return"number"==typeof e.status&&4===Math.floor(e.status/100)}function Au(e,t,n,r,o){return this instanceof Ou?Au:new Ou(e,t,n,r,o)}var Zu=0;function Mu(e,t,n,r,o){var i,a,s,l,u=[],c={seq:0,changes:[],docs:[]},f=!1,d=!1,p=!1,h=0,m=0,v=n.continuous||n.live||!1,g=n.batch_size||100,y=n.batches_limit||10,b=n.style||"all_docs",w=!1,_=n.doc_ids,x=n.selector,k=[],S=Ha();o=o||{ok:!0,start_time:(new Date).toISOString(),docs_read:0,docs_written:0,doc_write_failures:0,errors:[]};var E={};function P(){return s?Promise.resolve():function(e,t,n){var r=n.doc_ids?n.doc_ids.sort(Ds):"",o=n.filter?n.filter.toString():"",i="",a="",s="";return n.selector&&(s=JSON.stringify(n.selector)),n.filter&&n.query_params&&(i=JSON.stringify(function(e){return Object.keys(e).sort(Ds).reduce((function(t,n){return t[n]=e[n],t}),{})}(n.query_params))),n.filter&&"_view"===n.filter&&(a=n.view.toString()),Promise.all([e.id(),t.id()]).then((function(e){var t=e[0]+e[1]+o+a+i+r+s;return new Promise((function(e){Wa(t,e)}))})).then((function(e){return"_local/"+e.replace(/\//g,".").replace(/\+/g,"_")}))}(e,t,n).then((function(o){a=o;var i;i=!1===n.checkpoint?{writeSourceCheckpoint:!1,writeTargetCheckpoint:!1}:"source"===n.checkpoint?{writeSourceCheckpoint:!0,writeTargetCheckpoint:!1}:"target"===n.checkpoint?{writeSourceCheckpoint:!1,writeTargetCheckpoint:!0}:{writeSourceCheckpoint:!0,writeTargetCheckpoint:!0},s=new Au(e,t,a,r,i)}))}function O(){if(k=[],0!==i.docs.length){var e=i.docs,a={timeout:n.timeout};return t.bulkDocs({docs:e,new_edits:!1},a).then((function(t){if(r.cancelled)throw Z(),new Error("cancelled");var n=Object.create(null);t.forEach((function(e){e.error&&(n[e.id]=e)}));var i=Object.keys(n).length;o.doc_write_failures+=i,o.docs_written+=e.length-i,e.forEach((function(e){var t=n[e._id];if(t){o.errors.push(t);var i=(t.name||"").toLowerCase();if("unauthorized"!==i&&"forbidden"!==i)throw t;r.emit("denied",Li(t))}else k.push(e)}))}),(function(t){throw o.doc_write_failures+=e.length,t}))}}function C(){if(i.error)throw new Error("There was a problem getting docs.");o.last_seq=m=i.seq;var t=Li(o);return k.length&&(t.docs=k,"number"==typeof i.pending&&(t.pending=i.pending,delete i.pending),r.emit("change",t)),f=!0,e.info().then((function(t){var n=e.activeTasks.get(l);if(i&&n){var r=n.completed_items||0,o=parseInt(t.update_seq,10)-parseInt(h,10);e.activeTasks.update(l,{completed_items:r+i.changes.length,total_items:o})}})),s.writeCheckpoint(i.seq,S).then((function(){if(r.emit("checkpoint",{checkpoint:i.seq}),f=!1,r.cancelled)throw Z(),new Error("cancelled");i=void 0,L()})).catch((function(e){throw z(e),e}))}function j(){return function(e,t,n,r){n=Li(n);var o=[],i=!0;return Promise.resolve().then((function(){var a=function(e){var t=[];return Object.keys(e).forEach((function(n){e[n].missing.forEach((function(e){t.push({id:n,rev:e})}))})),{docs:t,revs:!0,latest:!0}}(n);if(a.docs.length)return e.bulkGet(a).then((function(n){if(r.cancelled)throw new Error("cancelled");return Promise.all(n.results.map((function(n){return Promise.all(n.docs.map((function(n){var r=n.ok;return n.error&&(i=!1),r&&r._attachments?function(e,t,n){var r=_a(t)&&!_a(e),o=Object.keys(n._attachments);return r?e.get(n._id).then((function(r){return Promise.all(o.map((function(o){return function(e,t,n){return!e._attachments||!e._attachments[n]||e._attachments[n].digest!==t._attachments[n].digest}(r,n,o)?t.getAttachment(n._id,o):e.getAttachment(r._id,o)})))})).catch((function(e){if(404!==e.status)throw e;return _u(t,n)})):_u(t,n)}(t,e,r).then((function(e){var t=Object.keys(r._attachments);return e.forEach((function(e,n){var o=r._attachments[t[n]];delete o.stub,delete o.length,o.data=e})),r})):r})))}))).then((function(e){o=o.concat(ba(e).filter(Boolean))}))}))})).then((function(){return{ok:i,docs:o}}))}(e,t,i.diffs,r).then((function(e){i.error=!e.ok,e.docs.forEach((function(e){delete i.diffs[e._id],o.docs_read++,i.docs.push(e)}))}))}function T(){var e;r.cancelled||i||(0!==u.length?(i=u.shift(),r.emit("checkpoint",{start_next_batch:i.seq}),(e={},i.changes.forEach((function(t){r.emit("checkpoint",{revs_diff:t}),"_user/"!==t.id&&(e[t.id]=t.changes.map((function(e){return e.rev})))})),t.revsDiff(e).then((function(e){if(r.cancelled)throw Z(),new Error("cancelled");i.diffs=e}))).then(j).then(O).then(C).then(T).catch((function(e){A("batch processing terminated with error",e)}))):R(!0))}function R(e){0!==c.changes.length?(e||d||c.changes.length>=g)&&(u.push(c),c={seq:0,changes:[],docs:[]},"pending"!==r.state&&"stopped"!==r.state||(r.state="active",r.emit("active")),T()):0!==u.length||i||((v&&E.live||d)&&(r.state="pending",r.emit("paused")),d&&Z())}function A(e,t){p||(t.message||(t.message=e),o.ok=!1,o.status="aborting",u=[],c={seq:0,changes:[],docs:[]},Z(t))}function Z(i){if(!(p||r.cancelled&&(o.status="cancelled",f)))if(o.status=o.status||"complete",o.end_time=(new Date).toISOString(),o.last_seq=m,p=!0,e.activeTasks.remove(l,i),i){(i=va(i)).result=o;var a=(i.name||"").toLowerCase();"unauthorized"===a||"forbidden"===a?(r.emit("error",i),r.removeAllListeners()):function(e,t,n,r){if(!1===e.retry)return t.emit("error",n),void t.removeAllListeners();if("function"!=typeof e.back_off_function&&(e.back_off_function=Yi),t.emit("requestError",n),"active"===t.state||"pending"===t.state){t.emit("paused",n),t.state="stopped";var o=function(){e.current_back_off=Zu};t.once("paused",(function(){t.removeListener("active",o)})),t.once("active",o)}e.current_back_off=e.current_back_off||Zu,e.current_back_off=e.back_off_function(e.current_back_off),setTimeout(r,e.current_back_off)}(n,r,i,(function(){Mu(e,t,n,r)}))}else r.emit("complete",o),r.removeAllListeners()}function M(t,o,i){if(r.cancelled)return Z();if("number"==typeof o&&(c.pending=o),ya(n)(t))c.seq=t.seq||i,c.changes.push(t),r.emit("checkpoint",{pending_batch:c.seq}),vi()((function(){R(0===u.length&&E.live)}));else{var a=e.activeTasks.get(l);if(a){var s=a.completed_items||0;e.activeTasks.update(l,{completed_items:++s})}}}function N(e){if(w=!1,r.cancelled)return Z();if(e.results.length>0)E.since=e.results[e.results.length-1].seq,L(),R(!0);else{var t=function(){v?(E.live=!0,L()):d=!0,R(!0)};i||0!==e.results.length?t():(f=!0,s.writeCheckpoint(e.last_seq,S).then((function(){if(f=!1,o.last_seq=m=e.last_seq,r.cancelled)throw Z(),new Error("cancelled");t()})).catch(z))}}function I(e){if(w=!1,r.cancelled)return Z();A("changes rejected",e)}function L(){if(!w&&!d&&u.length<y){w=!0,r._changes&&(r.removeListener("cancel",r._abortChanges),r._changes.cancel()),r.once("cancel",o);var t=e.changes(E).on("change",M);t.then(i,i),t.then(N).catch(I),n.retry&&(r._changes=t,r._abortChanges=o)}function o(){t.cancel()}function i(){r.removeListener("cancel",o)}}function $(t){return e.info().then((function(r){var o=void 0===n.since?parseInt(r.update_seq,10)-parseInt(t,10):parseInt(r.update_seq,10);return l=e.activeTasks.add({name:`${v?"continuous ":""}replication from ${r.db_name}`,total_items:o}),t}))}function D(){P().then((function(){if(!r.cancelled)return s.getCheckpoint().then($).then((function(e){h=e,E={since:m=e,limit:g,batch_size:g,style:b,doc_ids:_,selector:x,return_docs:!0},n.filter&&("string"!=typeof n.filter?E.include_docs=!0:E.filter=n.filter),"heartbeat"in n&&(E.heartbeat=n.heartbeat),"timeout"in n&&(E.timeout=n.timeout),n.query_params&&(E.query_params=n.query_params),n.view&&(E.view=n.view),L()}));Z()})).catch((function(e){A("getCheckpoint rejected with ",e)}))}function z(e){f=!1,A("writeCheckpoint completed with error",e)}r.ready(e,t),r.cancelled?Z():(r._addedListeners||(r.once("cancel",Z),"function"==typeof n.complete&&(r.once("error",n.complete),r.once("complete",(function(e){n.complete(null,e)}))),r._addedListeners=!0),void 0===n.since?D():P().then((function(){return f=!0,s.writeCheckpoint(n.since,S)})).then((function(){f=!1,r.cancelled?Z():(m=n.since,D())})).catch(z))}class Nu extends(Ti()){constructor(){super(),this.cancelled=!1,this.state="pending";const e=new Promise(((e,t)=>{this.once("complete",e),this.once("error",t)}));this.then=function(t,n){return e.then(t,n)},this.catch=function(t){return e.catch(t)},this.catch((function(){}))}cancel(){this.cancelled=!0,this.state="cancelled",this.emit("cancel")}ready(e,t){if(this._readyCalled)return;this._readyCalled=!0;const n=()=>{this.cancel()};function r(){e.removeListener("destroyed",n),t.removeListener("destroyed",n)}e.once("destroyed",n),t.once("destroyed",n),this.once("complete",r),this.once("error",r)}}function Iu(e,t){var n=t.PouchConstructor;return"string"==typeof e?new n(e,t):e}function Lu(e,t,n,r){if("function"==typeof n&&(r=n,n={}),void 0===n&&(n={}),n.doc_ids&&!Array.isArray(n.doc_ids))throw va(fa,"`doc_ids` filter parameter is not a list.");n.complete=r,(n=Li(n)).continuous=n.continuous||n.live,n.retry="retry"in n&&n.retry,n.PouchConstructor=n.PouchConstructor||this;var o=new Nu(n);return Mu(Iu(e,n),Iu(t,n),n,o),o}function $u(e,t,n,r){return"function"==typeof n&&(r=n,n={}),void 0===n&&(n={}),(n=Li(n)).PouchConstructor=n.PouchConstructor||this,e=Iu(e,n),t=Iu(t,n),new Du(e,t,n,r)}class Du extends(Ti()){constructor(e,t,n,r){super(),this.canceled=!1;const o=n.push?Ji({},n,n.push):n,i=n.pull?Ji({},n,n.pull):n;this.push=Lu(e,t,o),this.pull=Lu(t,e,i),this.pushPaused=!0,this.pullPaused=!0;const a=e=>{this.emit("change",{direction:"pull",change:e})},s=e=>{this.emit("change",{direction:"push",change:e})},l=e=>{this.emit("denied",{direction:"push",doc:e})},u=e=>{this.emit("denied",{direction:"pull",doc:e})},c=()=>{this.pushPaused=!0,this.pullPaused&&this.emit("paused")},f=()=>{this.pullPaused=!0,this.pushPaused&&this.emit("paused")},d=()=>{this.pushPaused=!1,this.pullPaused&&this.emit("active",{direction:"push"})},p=()=>{this.pullPaused=!1,this.pushPaused&&this.emit("active",{direction:"pull"})};let h={};const m=e=>(t,n)=>{("change"===t&&(n===a||n===s)||"denied"===t&&(n===u||n===l)||"paused"===t&&(n===f||n===c)||"active"===t&&(n===p||n===d))&&(t in h||(h[t]={}),h[t][e]=!0,2===Object.keys(h[t]).length&&this.removeAllListeners(t))};function v(e,t,n){-1==e.listeners(t).indexOf(n)&&e.on(t,n)}n.live&&(this.push.on("complete",this.pull.cancel.bind(this.pull)),this.pull.on("complete",this.push.cancel.bind(this.push))),this.on("newListener",(function(e){"change"===e?(v(this.pull,"change",a),v(this.push,"change",s)):"denied"===e?(v(this.pull,"denied",u),v(this.push,"denied",l)):"active"===e?(v(this.pull,"active",p),v(this.push,"active",d)):"paused"===e&&(v(this.pull,"paused",f),v(this.push,"paused",c))})),this.on("removeListener",(function(e){"change"===e?(this.pull.removeListener("change",a),this.push.removeListener("change",s)):"denied"===e?(this.pull.removeListener("denied",u),this.push.removeListener("denied",l)):"active"===e?(this.pull.removeListener("active",p),this.push.removeListener("active",d)):"paused"===e&&(this.pull.removeListener("paused",f),this.push.removeListener("paused",c))})),this.pull.on("removeListener",m("pull")),this.push.on("removeListener",m("push"));const g=Promise.all([this.push,this.pull]).then((e=>{const t={push:e[0],pull:e[1]};return this.emit("complete",t),r&&r(null,t),this.removeAllListeners(),t}),(e=>{if(this.cancel(),r?r(e):this.emit("error",e),this.removeAllListeners(),r)throw e}));this.then=function(e,t){return g.then(e,t)},this.catch=function(e){return g.catch(e)}}cancel(){this.canceled||(this.canceled=!0,this.push.cancel(),this.pull.cancel())}}_s.plugin((function(e){e.adapter("idb",Il,!0)})).plugin((function(e){e.adapter("http",Kl,!1),e.adapter("https",Kl,!1)})).plugin(wu).plugin((function(e){e.replicate=Lu,e.sync=$u,Object.defineProperty(e.prototype,"replicate",{get:function(){var e=this;return void 0===this.replicateMethods&&(this.replicateMethods={from:function(t,n,r){return e.constructor.replicate(t,e,n,r)},to:function(t,n,r){return e.constructor.replicate(e,t,n,r)}}),this.replicateMethods}}),e.prototype.sync=function(e,t,n){return this.constructor.sync(this,e,t,n)}}));var zu=new _s("dbname");var Fu=function(e){c(i,e);var t,r,o=(t=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=d(t);if(r){var o=d(this).constructor;e=Reflect.construct(n,arguments,o)}else e=n.apply(this,arguments);return f(this,e)});function i(e){var t;return n(this,i),p(l(t=o.call(this,e)),"componentDidMount",(function(){t.handleShowAll()})),p(l(t),"handleChange",(function(e,n){t.setState(p({},e.target.name,e.target.value))})),p(l(t),"handleAddId",(function(){var e=t.state.ownId;""===e&&(e=Math.floor(1e3*Math.random())),zu.put({_id:e,title:JSON.stringify({param1:10,param2:"asd"}),nameMethod:"nameMethod"}).then((function(e){console.log(e),t.handleShow(t.state.ownId),t.handleShowAll()})).catch((function(e){console.log(e)}))})),p(l(t),"handleAddNotId",(function(){zu.post({title:JSON.stringify({param1:10,param2:"asd"}),nameMethod:"nameMethod"}).then((function(e){console.log(e),t.handleShow(t.state.ownId),t.handleShowAll()})).catch((function(e){console.log(e)}))})),p(l(t),"handleShow",(function(){zu.get(t.state.ownId).then((function(e){console.log(e)})).catch((function(e){console.log(e)}))})),p(l(t),"handleDelete",(function(e){var n=e;n||(n=t.state.ownId),zu.get(n).then((function(e){return zu.remove(e)})).then((function(e){console.log(e),t.handleShowAll()})).catch((function(e){console.log(e)}))})),p(l(t),"handleDeleteAll",(function(){for(var e=0;e<t.state.data.rows.length;e++)t.handleDelete(t.state.data.rows[e].id);t.handleShowAll()})),p(l(t),"handleEdit",(function(){zu.get(t.state.ownId).then((function(e){return zu.put({_id:t.state.ownId,_rev:e._rev,title:JSON.stringify({param1:"шо-то другое",param2:"asd"}),nameMethod:"nameMethodДругой"})})).then((function(e){console.log(e),t.handleShow(t.state.ownId)})).catch((function(e){console.log(e)}))})),p(l(t),"handleShowAll",(function(){zu.allDocs({include_docs:!0,attachments:!0}).then((function(e){console.log(e),t.setState({data:e})})).catch((function(e){console.log(e)}))})),t.state={user:{username:"",password:"",ownId:"",data:[]},pageHeightClient:600},t}return s(i,[{key:"render",value:function(){return(0,xe.jsx)("div",{style:{width:"100%",position:"relative",overflow:"hidden"},children:(0,xe.jsx)("form",{children:(0,xe.jsxs)(Ce,{container:!0,spacing:2,style:{width:"100%",paddingLeft:"10px",paddingRight:"10px"},children:[(0,xe.jsx)(Ce,{item:!0,xs:12,children:(0,xe.jsx)(hi,{name:"ownId",style:{width:"200px",height:"50px"},variant:"standard",placeholder:"Id",value:this.state.ownId||"",onChange:this.handleChange})}),(0,xe.jsx)(Ce,{item:!0,xs:12,children:(0,xe.jsx)(_t,{onClick:this.handleAddId,style:{height:"50px",minWidth:"300px",maxWidth:"300px"},fullWidth:!0,color:"secondary",variant:"contained",children:(0,xe.jsx)(Ot,{sx:{fontSize:"20px",color:"#fff",textTransform:"none"},children:"Добавить элемент c айди"})})}),(0,xe.jsx)(Ce,{xs:12,item:!0,children:(0,xe.jsx)(_t,{onClick:this.handleAddNotId,style:{height:"50px",minWidth:"300px",maxWidth:"300px"},fullWidth:!0,color:"secondary",variant:"contained",children:(0,xe.jsx)(Ot,{sx:{fontSize:"20px",color:"#fff",textTransform:"none"},children:"Добавить элемент без айди"})})}),(0,xe.jsx)(Ce,{xs:12,item:!0,children:(0,xe.jsx)(_t,{onClick:this.handleShow,style:{height:"50px",minWidth:"300px",maxWidth:"300px"},fullWidth:!0,color:"secondary",variant:"contained",children:(0,xe.jsx)(Ot,{sx:{fontSize:"20px",color:"#fff",textTransform:"none"},children:"Вывести элемент по айди"})})}),(0,xe.jsx)(Ce,{xs:12,item:!0,children:(0,xe.jsx)(_t,{onClick:this.handleDelete,style:{height:"50px",minWidth:"300px",maxWidth:"300px"},fullWidth:!0,color:"secondary",variant:"contained",children:(0,xe.jsx)(Ot,{sx:{fontSize:"20px",color:"#fff",textTransform:"none"},children:"Удалить элемент по айди"})})}),(0,xe.jsx)(Ce,{xs:12,item:!0,children:(0,xe.jsx)(_t,{onClick:this.handleEdit,style:{height:"50px",minWidth:"300px",maxWidth:"300px"},fullWidth:!0,color:"secondary",variant:"contained",children:(0,xe.jsx)(Ot,{sx:{fontSize:"20px",color:"#fff",textTransform:"none"},children:"Изменить элемент по айди"})})}),(0,xe.jsx)(Ce,{xs:12,item:!0,children:(0,xe.jsx)(_t,{onClick:this.handleShowAll,style:{height:"50px",minWidth:"300px",maxWidth:"300px"},fullWidth:!0,color:"secondary",variant:"contained",children:(0,xe.jsx)(Ot,{sx:{fontSize:"20px",color:"#fff",textTransform:"none"},children:"Вывести все в консоль"})})}),(0,xe.jsx)(Ce,{xs:12,item:!0,children:(0,xe.jsx)(_t,{onClick:this.handleDeleteAll,style:{height:"50px",minWidth:"300px",maxWidth:"300px"},fullWidth:!0,color:"secondary",variant:"contained",children:(0,xe.jsx)(Ot,{sx:{fontSize:"20px",color:"#fff",textTransform:"none"},children:"Удалить все элементы"})})}),this.state.data&&this.state.data.rows.map((function(e){return(0,xe.jsx)(Ce,{xs:12,item:!0,children:(0,xe.jsxs)("div",{style:{width:"100%"},children:[(0,xe.jsx)("div",{children:e.doc.nameMethod}),(0,xe.jsx)("div",{style:{marginRight:"20px",marginLeft:"20px"},children:e.doc.title}),(0,xe.jsx)("div",{children:e.id})]})},e.id)}))]})})})}}]),i}(e.Component);const Bu=(e,t)=>(0,y.Z)({WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box",WebkitTextSizeAdjust:"100%"},t&&!e.vars&&{colorScheme:e.palette.mode}),qu=e=>(0,y.Z)({color:(e.vars||e).palette.text.primary},e.typography.body1,{backgroundColor:(e.vars||e).palette.background.default,"@media print":{backgroundColor:(e.vars||e).palette.common.white}});var Wu=function(t){const n=(0,de.Z)({props:t,name:"MuiCssBaseline"}),{children:r,enableColorScheme:o=!1}=n;return(0,xe.jsxs)(e.Fragment,{children:[(0,xe.jsx)(Ut,{styles:e=>((e,t=!1)=>{var n,r;const o={};t&&e.colorSchemes&&Object.entries(e.colorSchemes).forEach((([t,n])=>{var r;o[e.getColorSchemeSelector(t).replace(/\s*&/,"")]={colorScheme:null==(r=n.palette)?void 0:r.mode}}));let i=(0,y.Z)({html:Bu(e,t),"*, *::before, *::after":{boxSizing:"inherit"},"strong, b":{fontWeight:e.typography.fontWeightBold},body:(0,y.Z)({margin:0},qu(e),{"&::backdrop":{backgroundColor:(e.vars||e).palette.background.default}})},o);const a=null==(n=e.components)||null==(r=n.MuiCssBaseline)?void 0:r.styleOverrides;return a&&(i=[i,a]),i})(e,o)}),r]})},Uu={buildMode:"indexMob",cordovaPackageName:"com.test.indexdb",packageVersion:"1.0.0.0",packageName:"test-index-db",applicationName:"testIndexDb",localStoragePrefix:"testIndexDb",allowedWebViewMajorVersion:60,apiUrl:"",apiUrlDev:"",apiUrlIndexMob:"",baseNameIndexMob:""},Vu=o.n(Uu),Hu=Vu().buildMode,Ku=function(e){void 0===e&&(e={}),j||P(!1);var t,n,r=window.history,o=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,s=a.forceRefresh,l=void 0!==s&&s,u=a.getUserConfirmation,c=void 0===u?T:u,f=a.keyLength,d=void 0===f?6:f,p=e.basename?function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}("/"===(n=e.basename).charAt(0)?n:"/"+n):"";function h(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return p&&(i=function(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}(i,p)),C(i,r,n)}function m(){return Math.random().toString(36).substr(2,d)}var v,g,b=(v=null,g=[],{setPrompt:function(e){return v=e,function(){v===e&&(v=null)}},confirmTransitionTo:function(e,t,n,r){if(null!=v){var o="function"==typeof v?v(e,t):v;"string"==typeof o?"function"==typeof n?n(o,r):r(!0):r(!1!==o)}else r(!0)},appendListener:function(e){var t=!0;function n(){t&&e.apply(void 0,arguments)}return g.push(n),function(){t=!1,g=g.filter((function(e){return e!==n}))}},notifyListeners:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];g.forEach((function(e){return e.apply(void 0,t)}))}});function w(e){(0,y.Z)(z,e),z.length=r.length,b.notifyListeners(z.location,z.action)}function _(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||S(h(e.state))}function x(){S(h(Z()))}var k=!1;function S(e){k?(k=!1,w()):b.confirmTransitionTo(e,"POP",c,(function(t){t?w({action:"POP",location:e}):function(e){var t=z.location,n=M.indexOf(t.key);-1===n&&(n=0);var r=M.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(k=!0,I(o))}(e)}))}var E=h(Z()),M=[E.key];function N(e){return p+O(e)}function I(e){r.go(e)}var L=0;function $(e){1===(L+=e)&&1===e?(window.addEventListener(R,_),i&&window.addEventListener(A,x)):0===L&&(window.removeEventListener(R,_),i&&window.removeEventListener(A,x))}var D=!1,z={length:r.length,action:"POP",location:E,createHref:N,push:function(e,t){var n="PUSH",i=C(e,t,m(),z.location);b.confirmTransitionTo(i,n,c,(function(e){if(e){var t=N(i),a=i.key,s=i.state;if(o)if(r.pushState({key:a,state:s},null,t),l)window.location.href=t;else{var u=M.indexOf(z.location.key),c=M.slice(0,u+1);c.push(i.key),M=c,w({action:n,location:i})}else window.location.href=t}}))},replace:function(e,t){var n="REPLACE",i=C(e,t,m(),z.location);b.confirmTransitionTo(i,n,c,(function(e){if(e){var t=N(i),a=i.key,s=i.state;if(o)if(r.replaceState({key:a,state:s},null,t),l)window.location.replace(t);else{var u=M.indexOf(z.location.key);-1!==u&&(M[u]=i.key),w({action:n,location:i})}else window.location.replace(t)}}))},go:I,goBack:function(){I(-1)},goForward:function(){I(1)},block:function(e){void 0===e&&(e=!1);var t=b.setPrompt(e);return D||($(1),D=!0),function(){return D&&(D=!1,$(-1)),t()}},listen:function(e){var t=b.appendListener(e);return $(1),function(){$(-1),t()}}};return z}({basename:Vu()["baseName"+Hu]});function Gu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}Ku.pushForce=function(e){Ku.push("/empty"),setTimeout((function(){Ku.replace(e)}))};var Qu=function(e){c(i,e);var t,r,o=(t=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=d(t);if(r){var o=d(this).constructor;e=Reflect.construct(n,arguments,o)}else e=n.apply(this,arguments);return f(this,e)});function i(e){var t;return n(this,i),p(l(t=o.call(this,e)),"init",(function(){Ku.push("/")})),t.init(),t.state=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Gu(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Gu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},t.state),t}return s(i,[{key:"render",value:function(){return(0,xe.jsxs)("div",{children:[(0,xe.jsx)(Wu,{}),(0,xe.jsx)("div",{style:{display:"flex",alignItems:"center",justifyContent:"flex-end"},children:(0,xe.jsx)("div",{id:"ClientMainComponent",style:{flexGrow:1,marginTop:56},children:(0,xe.jsx)(q,{history:Ku,children:(0,xe.jsxs)(te,{children:[(0,xe.jsx)(ee,{exact:!0,path:"/",component:Fu}),(0,xe.jsx)(G,{from:"*",to:"/"})]})})})})]})}}]),i}(e.Component),Yu=(0,h.connect)((function(e){return function(e){if(null==e)throw new TypeError("Cannot destructure "+e)}(e),{}}),{})(Qu);function Xu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ju(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Xu(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Xu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ec(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var tc="function"==typeof Symbol&&Symbol.observable||"@@observable",nc=function(){return Math.random().toString(36).substring(7).split("").join(".")},rc={INIT:"@@redux/INIT"+nc(),REPLACE:"@@redux/REPLACE"+nc(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+nc()}};function oc(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(ec(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(ec(1));return n(oc)(e,t)}if("function"!=typeof e)throw new Error(ec(2));var o=e,i=t,a=[],s=a,l=!1;function u(){s===a&&(s=a.slice())}function c(){if(l)throw new Error(ec(3));return i}function f(e){if("function"!=typeof e)throw new Error(ec(4));if(l)throw new Error(ec(5));var t=!0;return u(),s.push(e),function(){if(t){if(l)throw new Error(ec(6));t=!1,u();var n=s.indexOf(e);s.splice(n,1),a=null}}}function d(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error(ec(7));if(void 0===e.type)throw new Error(ec(8));if(l)throw new Error(ec(9));try{l=!0,i=o(i,e)}finally{l=!1}for(var t=a=s,n=0;n<t.length;n++)(0,t[n])();return e}return d({type:rc.INIT}),(r={dispatch:d,subscribe:f,getState:c,replaceReducer:function(e){if("function"!=typeof e)throw new Error(ec(10));o=e,d({type:rc.REPLACE})}})[tc]=function(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(ec(11));function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}})[tc]=function(){return this},e},r}function ic(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function ac(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var sc=ac();sc.withExtraArgument=ac;var lc=sc,uc=(0,o(4500).createLogger)(),cc={store:null,getStore:function(){return null==this.store&&(this.store=oc(ic(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(ec(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return r=ic.apply(void 0,i)(n.dispatch),Ju(Ju({},n),{},{dispatch:r})}}}(lc,(0,ne.f0)({promiseTypeSuffixes:["REQUEST","SUCCESS","FAILURE"]}),lc,uc)))),this.store}};o(7961),Vu().buildMode,(0,t.render)((0,xe.jsx)(h.Provider,{store:cc.getStore(),children:(0,xe.jsx)(Yu,{})}),document.getElementById("app"))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,